<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mylog Blog</title>
        <link>https://mooyeon-choi.github.io/blog</link>
        <description>Mylog Blog</description>
        <lastBuildDate>Mon, 25 Nov 2024 19:45:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[Amazon Cognito로 사용자 관리하기]]></title>
            <link>https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito</link>
            <guid>https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito</guid>
            <pubDate>Mon, 25 Nov 2024 19:45:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>Amazon Cognito는 웹 및 모바일 앱에 대한 사용자 인증 및 승인을 처리한다. 사용자 풀을 사용하면 앱에 가입 및 로그인 기능을 쉽고 안전하게 추가할 수 있다. Identity pools를 사용하면 앱은 사용자가 익명이든 인증되었든 특정 AWS 리소스에 대한 액세스 권한을 부여하는 임시 자격 증명을 얻을 수 있다.</p>
<p>미국, 수술실이라는 특수한 환경에서 사용하는 애플리케이션을 개발하면서 사용자 요청을 최소화하기 위해 ML model 적용, 제스쳐 동작 등 다양한 시도를 하였다. 이번에는 사용자 인증과 관련하여 어떻게 하면 불필요한 과정을 줄이고 보다 안전하게 적용할 수 있을지 고민하며 Amazon Coginto를 적용한 내용이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#user-pool">User pool</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#identity-pool">Identity pool</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#github-action%EC%9D%84-%ED%86%B5%ED%95%9C-vercel-%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5-with-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC">Cognito Sync</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="user-pool">User pool<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#user-pool" class="hash-link" aria-label="User pool에 대한 직접 링크" title="User pool에 대한 직접 링크">​</a></h2>
<p>Amazon Cognito 사용자 풀은 웹 및 모바일 앱 인증과 권한 부여를 위한 사용자 디렉토리이다. 앱 관점에서 Amazon Cognito 사용자 풀은 OpenID Connect(OIDC) 자격 증명 공급자(IdP)이다. 사용자 풀은 보안, 아이덴티티, 페더레이션, 앱 통합, 사용자 경험 사용자 지정을 위한 기능 계층을 추가한다.</p>
<p>예를 들어 사용자의 세션이 신뢰할 수 있는 출처에서 온 것인지 확인할 수 있다. Amazon Cognito 디렉터리를 외부 ID 제공업체와 결합할 수 있다. 원하는 AWS SDK를 사용하여 앱에 가장 적합한 권한 부여 모델 API를 선택할 수 있다. 그리고 Amazon Cognito의 기본 동작을 수정하거나 정비하는 AWS Lambda 함수를 추가할 수 있다.</p>
<p><img decoding="async" loading="lazy" alt="user pool" src="https://mooyeon-choi.github.io/assets/images/user_pool-8473381fabe3542107f2f3cc27407d5b.png" width="798" height="199" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%ED%8A%B9%EC%A7%95" class="hash-link" aria-label="특징에 대한 직접 링크" title="특징에 대한 직접 링크">​</a></h3>
<p>Amazon Cognito user pool은 다음과 같은 특징을 가지고 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="가입하기">가입하기<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EA%B0%80%EC%9E%85%ED%95%98%EA%B8%B0" class="hash-link" aria-label="가입하기에 대한 직접 링크" title="가입하기에 대한 직접 링크">​</a></h4>
<p>Amazon Cognito 사용자 풀에는 사용자 프로필을 사용자 풀에 추가하는 사용자 중심, 관리자 중심 및 프로그래밍 방식이 있다. Amazon Cognito 사용자 풀은 다음 가입 모델을 지원한다. 앱에서 아래 모델의 모든 조합을 사용할 수 있다.</p>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>중요</div><div class="admonitionContent_BuS1"><p>사용자 풀에서 사용자 가입을 활성화 하면 인터넷에 있는 모든 사람이 계정에 가입하고 앱에 로그인할 수 있다. 앱을 공개적으로 개방하려는 경우가 아니면 사용자 풀에서 셀프 등록을 비활성화 해야한다. 이 설정을 변경하려면 사용자 풀 콘솔의 <strong>Authentication</strong> 아래 <strong>Sign-up</strong> 메뉴에서 <strong>Self-service sign-up</strong> 설정을 변경하거나 <code>CreateUserPool</code> 또는 <code>UpdateUserPool</code> API 요청에서 <code>AllowAdmiCreateUserOnly</code> 값을 수정해야 한다.</p><p>사용자 풀에 설정할 수 있는 보안 기능에 대한 자세한 내용은 <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/managing-security.html" target="_blank" rel="noopener noreferrer">Amazon Cognito 사용자 풀 보안 기능 사용</a>을 참고하자.</p></div></div>
<ol>
<li>
<p>사용자는 앱에 정보를 입력하고 사용자 풀에 고유한 사용자 프로필을 만들 수 있다. API 가입 작업을 호출하여 사용자 풀에 사용자를 등록할 수 있다. 이러한 가입 작업을 누구에게나 공개하거나 <strong>Client secret</strong> 또는 <strong>AWS credentials</strong>로 권한을 부여할 수 있다.</p>
</li>
<li>
<p>사용자가 Amazon Cognito에 정보를 전달하도록 허가할 수 있는 타사 IdP로 리디렉션할 수 있다. Amazon Cognito는 OIDC ID 토큰, OAuth 2.0 <code>userInfo</code> 데이터 및 SAML 2.0 어설션을 사용자 풀의 사용자 프로필로 처리한다. 속성 매핑 규칙에 따라 Amazon Cognito가 수신하도록 하려는 속성을 제어한다.</p>
</li>
<li>
<p>공개 또는 연합 가입을 건너뛰고, 자체 데이터 소스 및 스키마를 기반으로 사용자를 만들 수 있다. Amazon Cognito 콘솔 또는 API에서 직접 사용자를 추가한다. CSV 파일에서 사용자를 가져온다. 기존 디렉토리에서 새 사용자를 조회하고 기존 데이터에서 사용자 프로필을 채우는 AWS Lambda 함수를 실행한다.</p>
</li>
</ol>
<p>사용자가 가입한 후 Amazon Cognito가 액세스 및 ID 토큰에 나열한 그룹에 추가할 수 있다. ID 토큰을 ID 풀에 전달할 때 사용자 풀 그룹을 IAM 역할에 연결할 수도 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="로그인">로그인<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EB%A1%9C%EA%B7%B8%EC%9D%B8" class="hash-link" aria-label="로그인에 대한 직접 링크" title="로그인에 대한 직접 링크">​</a></h4>
<p>Amazon Cognito는 앱에 대한 독립형 사용자 디렉터리 및 ID 공급자(IdP)가 될 수 있다. 사용자는 Amazon Cognito에서 호스팅하는 관리형 로그인 페이지 또는 Amazon Cognito 사용자 풀 API를 통한 사용자 정의 사용자 인증 서비스로 로그인할 수 있다. 사용자 정의 프론트엔드 뒤에 있는 애플리케이션 계층은 여러가지 방법 중 하나를 사용하여 백엔드에서 요청을 승인하여 요청을 확인할 수 있다.</p>
<p>사용자는 사용자 이름과 비밀번호, 패스키, 이메일 및 SMS 메시지 일회용 비밀번호로 설정하고 로그인할 수 있다. 외부 사용자 디렉토리, 로그인 후 다중 요소 인증(MFA), 신뢰 기억 장치, 설계한 사용자 지정 인증 흐름과 통합 로그인을 제공할 수 있다.</p>
<p>Amazon Cognito에 내장된 사용자 디렉토리와 선택적으로 결합된 외부 디렉토리를 통해 사용자를 로그인시키려면 다음 통합을 추가할 수 있다.</p>
<ol>
<li>
<p>OAuth 2.0 소셜 로그인으로 로그인하고 고객 사용자 데이터를 가져온다. Amazon Cognito는 OAuth 2.0을 통해 Google, Facebook, Amazon 및 Apple 로그인을 지원한다.</p>
</li>
<li>
<p>SAML 및 OIDC 로그인으로 로그인하고 직장 및 학교 사용자 데이터를 가져온다. 또한 Amanon Cognito를 구성하여 모든 SAML 또는 OpenID Connect(OIDC) ID 공급자(IdP)의 클레임을 수락할 수도 있다.</p>
</li>
<li>
<p>외부 사용자 프로필을 기본 사용자 프로필에 연결한다. 연결된 사용자는 타사 사용자 ID로 로그인하여 기본 제공 디렉토리에서 사용자에게 할당한 액세스 권한을 받을 수 있다.</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="관리자-로그인">관리자 로그인<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EA%B4%80%EB%A6%AC%EC%9E%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8" class="hash-link" aria-label="관리자 로그인에 대한 직접 링크" title="관리자 로그인에 대한 직접 링크">​</a></h4>
<p>사용자 인터페이스를 구축하고 싶지 않은 경우, 사용자에게 사용자 지정 관리형 로그인 페이지를 제공할 수 있다. 관리형 로그인은 가입, 로그인, 다중 요소 인증(MFA) 및 비밀번호 재설정을 위한 웹 페이지 세트이다. 기존 도메인에 관리형 로그인을 추가하거나 AWS 하위 도메인에서 접두사 식별자를 사용할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="보안">보안<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EB%B3%B4%EC%95%88" class="hash-link" aria-label="보안에 대한 직접 링크" title="보안에 대한 직접 링크">​</a></h4>
<p>로컬 사용자는 SMS 또는 이메일 메시지읠 코드 또는 다중 요소 인증(MFA) 코드를 생성하는 앱으로 추가 인증 요소를 제공할 수 있다. 애플리케이션에서 MFA를 설정하고 처리하는 메커니즘을 구축하거나 관리되는 로그인이 이를 관리하도록 할 수 있다. Amazon Cognito 사용자 풀은 사용자가 신뢰할 수 있는 기기에서 로그인할 때 MFA를 우회할 수 있다.</p>
<p>사용자에게 처음에 MFA를 요구하지 않으려면 조건부로 요구할 수 있다. Amazon Cognito는 고급 보안 기능을 통해 잠재적인 악의적 활동을 감지하고 사용자에게 MFA를 설정하거나 로그인을 차단하도록 요구할 수 있다.</p>
<p>사용자 풀에 대한 네트워크 트래픽이 악의적일 수 있는 경우 AWS WAF 웹 ACL을 사용하여 이를 모니터링하고 조치를 취할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="사용자-정의형-사용자-경험">사용자 정의형 사용자 경험<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98%ED%98%95-%EC%82%AC%EC%9A%A9%EC%9E%90-%EA%B2%BD%ED%97%98" class="hash-link" aria-label="사용자 정의형 사용자 경험에 대한 직접 링크" title="사용자 정의형 사용자 경험에 대한 직접 링크">​</a></h4>
<p>사용자의 가입, 로그인 또는 프로필 업데이트의 대부분 단계에서 Amazon Cognito가 요청을 처리하는 방식을 사용자 정의할 수 있다. Lambda 트리거를 사용하면 사용자 정의 조건에 따라 ID 토큰을 수정하거나 가입 요청을 거부할 수 있다. 사용자 정의 인증 흐름을 직접 만들 수 있다.</p>
<p>사용자 정의 CSS와 로고를 업로드하여 관리되는 로그인에 친숙한 모양과 느낌을 부여할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="모니터링-및-분석">모니터링 및 분석<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%B0%8F-%EB%B6%84%EC%84%9D" class="hash-link" aria-label="모니터링 및 분석에 대한 직접 링크" title="모니터링 및 분석에 대한 직접 링크">​</a></h4>
<p>Amazon Cognito 사용자 풀을 관리형 로그인 요청을 포함한 API 요청을 AWS CloudTrail에 기록한다. Amazon CloudWatch Logs에서 성능 지표를 검토하고, Lambda 트리거를 사용하여 CloudWatch에 사용자 지정 로그를 푸시하고, 이메일 및 SMS 메시지 전달을 모니터링하고, Service Quotas 콘솔에서 API 요청 볼륨을 모니터링할 수 있다.</p>
<p>Plus 기능 플랜을 사용하면 자동 학습 기술로 사용자 인증 시도를 모니터링하여 침해 지표를 파악하고 위험을 즉시 해결할 수 있다. 이러한 고급 보안 기능은 사용자 활동을 사용자 풀에 기록하고, 선택적으로 Amazon S3, CloudWatch Logs 또는 Amazon Data Firehouse에 기록한다.</p>
<p>API 요청에서 Amazon Pinopoint 캠페인으로 디바이스 및 세션 데이터를 로깅할 수도 있다. Amazon Pinpoint를 사용하면 사용자 활동 분석에 따라 앱에서 푸시 알림을 보낼 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="amazon-cognito-id-풀-통합">Amazon Cognito ID 풀 통합<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#amazon-cognito-id-%ED%92%80-%ED%86%B5%ED%95%A9" class="hash-link" aria-label="Amazon Cognito ID 풀 통합에 대한 직접 링크" title="Amazon Cognito ID 풀 통합에 대한 직접 링크">​</a></h4>
<p>Amazon Cognito의 다른 절반은 ID 풀이다. ID 풀은 사용자로부터 Amazon DynamoDB 또는 Amazon S3와 같은 AWS 서비스에 대한 API 요청을 승인하고 모니터링하는 자격 증명을 제공한다. 사용자 풀에서 사용자를 분류하는 방법에 따라 데이터를 보호하는 ID 기반 액세스 정책을 빌드할 수 있다. ID 풀은 사용자 풀 인증과 무관하게 다양한 ID 공급자로부터 토큰 및 SAML 2.0 어설션을 허용할 수 있다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="identity-pool">Identity pool<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#identity-pool" class="hash-link" aria-label="Identity pool에 대한 직접 링크" title="Identity pool에 대한 직접 링크">​</a></h2>
<p>Amazon Cognito ID 풀은 AWS 자격 증명으로 교환할 수 있는 페더레이션 ID 디렉토리이다. ID 풀은 앱 사용자에 대한 임시 AWS 자격 증명을 생성한다. 사용자가 로그인했든 아직 식별하지 않았든 상관없다. AWS Identity and Access Management(IAM) 역할 및 정책을 사용하면 사용자에게 부여하려는 권한 수준을 선택할 수 있다. 사용자는 게스트로 시작하여 AWS 서비스에 보관된 자산을 검색할 수 있다. 그런 다음 타사 ID 공급자를 사용하여 로그인하여 등록된 멤버에게 제공하는 자산에 대한 액세스를 잠금 해제 할 수 있다. 타사 ID 공급자는 Apple이나 Google과 같은 소비자(소셜) OAuth 2.0 공급자, 사용자 지정 SAML 또는 OIDC ID 공급자 또는 사용자가 직접 디자인한 사용자 지정 인증 체계(개발 공급자라고도 함)가 될 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="특징-1">특징<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%ED%8A%B9%EC%A7%95-1" class="hash-link" aria-label="특징에 대한 직접 링크" title="특징에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="aws-서비스에-대한-요청-인증">AWS 서비스에 대한 요청 인증<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#aws-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9A%94%EC%B2%AD-%EC%9D%B8%EC%A6%9D" class="hash-link" aria-label="AWS 서비스에 대한 요청 인증에 대한 직접 링크" title="AWS 서비스에 대한 요청 인증에 대한 직접 링크">​</a></h4>
<p>Amazon Simple Storage Service(Amazon S3) 및 Amazon DynamoDB와 같은 AWS 서비스에 API 요청을 인증한다. Amazon Pinpoint 및 Amazon CloudWatch와 같은 서비스로 사용자 활동을 분석한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="리소스-기반-정책으로-요청-필터링">리소스 기반 정책으로 요청 필터링<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EB%A6%AC%EC%86%8C%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EC%A0%95%EC%B1%85%EC%9C%BC%EB%A1%9C-%EC%9A%94%EC%B2%AD-%ED%95%84%ED%84%B0%EB%A7%81" class="hash-link" aria-label="리소스 기반 정책으로 요청 필터링에 대한 직접 링크" title="리소스 기반 정책으로 요청 필터링에 대한 직접 링크">​</a></h4>
<p>리소스에 대한 사용자 액세스를 세부적으로 제어한다. 사용자 클레임을 IAM 세션 태그로 변환하고 사용자의 개별 하위 집합에 리소스 액세스를 부여하는 IAM 정책을 구축한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="게스트-액세스-할당">게스트 액세스 할당<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EA%B2%8C%EC%8A%A4%ED%8A%B8-%EC%95%A1%EC%84%B8%EC%8A%A4-%ED%95%A0%EB%8B%B9" class="hash-link" aria-label="게스트 액세스 할당에 대한 직접 링크" title="게스트 액세스 할당에 대한 직접 링크">​</a></h4>
<p>아직 로그인하지 않은 사용자의 경우, 좁은 액세스 범위로 AWS 자격 증명을 생성하도록 ID 풀을 구성한다. 단일 로그인 공급자를 통해 사용자를 인증하여 액세스 권한을 높일 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="사용자-특성에-따라-iam-역할-할당">사용자 특성에 따라 IAM 역할 할당<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EC%82%AC%EC%9A%A9%EC%9E%90-%ED%8A%B9%EC%84%B1%EC%97%90-%EB%94%B0%EB%9D%BC-iam-%EC%97%AD%ED%95%A0-%ED%95%A0%EB%8B%B9" class="hash-link" aria-label="사용자 특성에 따라 IAM 역할 할당에 대한 직접 링크" title="사용자 특성에 따라 IAM 역할 할당에 대한 직접 링크">​</a></h4>
<p>인증된 모든 사용자에게 단일 IAM 역할을 할당하거나 각 사용자의 클레임에 따라 역할을 선택한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="다양한-id-공급자-허용">다양한 ID 공급자 허용<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EB%8B%A4%EC%96%91%ED%95%9C-id-%EA%B3%B5%EA%B8%89%EC%9E%90-%ED%97%88%EC%9A%A9" class="hash-link" aria-label="다양한 ID 공급자 허용에 대한 직접 링크" title="다양한 ID 공급자 허용에 대한 직접 링크">​</a></h4>
<p>AWS 자격 증명을 위해 ID 또는 액세스 토큰, 사용자 풀 토큰, SAML 어설션 또는 소셜 공급자 OAuth 토큰을 교환한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="직접-자격-증명">직접 자격 증명<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#%EC%A7%81%EC%A0%91-%EC%9E%90%EA%B2%A9-%EC%A6%9D%EB%AA%85" class="hash-link" aria-label="직접 자격 증명에 대한 직접 링크" title="직접 자격 증명에 대한 직접 링크">​</a></h4>
<p>사용자 검증을 직접 수행하고 개발자 AWS 자격 증명을 사용하여 사용자에게 자격 증명을 발급한다.</p>
<p>앱에 인증 및 권한 부여 서비스를 제공하는 Amazon Cognito 사용자 풀이 이미 있을 수 있다. 사용자 풀을 ID 풀에 대한 ID 공급자(IdP)로 설정할 수 있다. 그렇게 하면 사용자는 사용자 풀 IdP를 통해 인증하고, 클레임을 공통 OIDC ID 토큰으로 통합하고, 해당 토큰을 AWS 자격 증명으로 교환할 수 있다. 그런 다음 사용자는 서명된 요청에서 자격 증명을 AWS 서비스에 제시할 수 있다.</p>
<p>또한 모든 ID 공급자의 인증된 클레임을 ID 풀에 직접 제출할 수 있다. Amazon Cognito는 SAML, OAuth 및 OIDC 공급자의 사용자 클레임을 단기 자격 증명에 대한 AssumeRoleWithWebIdentity API 요청으로 사용자 정의한다.</p>
<p>Amazon Cognito 사용자 풀은 SSO 지원 앱에 대한 OIDC ID 공급자와 같다. ID 풀은 IAM 권한 부여에 가장 잘 작동하는 리소스 종속성이 있는 모든 앱에 대한 AWS ID 공급자 역할을 한다.</p>
<p>Amazon Cognito ID 풀은 다음과 같은 ID 공급자를 지원한다.</p>
<ul>
<li>공공 공급자: Amazon을 ID 풀 IdP로 로그인 설정, Facebook을 ID 풀 IDP로 설정, Google을 ID 풀 IdP로 설정, Apple을 ID 풀 IdP로 로그인 설정</li>
<li>Amazon Cognito 사용자 풀</li>
<li>OIDC 공급자를 ID 풀 IdP로 설정</li>
<li>SAML 공급자를 ID 풀 IdP로 설정</li>
<li>개발자 인증 ID</li>
</ul>
<p>Amazon Cognito ID 풀 지역 가용성에 대한 자세한 내용은 <a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/" target="_blank" rel="noopener noreferrer">AWS 서비스 지역 가용성</a>을 통해 확인할 수 있다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cognito-sync">Cognito Sync<a href="https://mooyeon-choi.github.io/blog/identity-pool-with-aws-cognito#cognito-sync" class="hash-link" aria-label="Cognito Sync에 대한 직접 링크" title="Cognito Sync에 대한 직접 링크">​</a></h2>
<p>Amazon Cognito Sync는 AWS AppSync와 데이터를 동기화 하므로 AWS AppSync를 사용해도 된다.</p>
<p>Amazon Cognito Sync는 애플리케이션 관련 사용자 데이터를 여러기기에서 동기화할 수 있는 AWS 서비스 및 클라이언트 라이브러리이다. Amazon Cognito Sync는 자체 백엔드를 사용하지 않고도 모바일 기기와 웹에서 사용자 프로필 데이터를 동기화할 수 있다. 클라이언트 라이브러리는 데이터를 로컬에 캐시하여 앱이 기기 연결 상태에 관계없이 데이터를 읽고 쓸 수 있도록 한다. 기기가 온라인 상태이면 데이터를 동기화할 수 있다. 푸시 동기화를 설정하면 다른 기기에 업데이트가 있음을 즉시 알릴 수 있다.</p>]]></content:encoded>
            <category>aws</category>
            <category>cognito</category>
            <category>swift</category>
            <category>cocoapods</category>
        </item>
        <item>
            <title><![CDATA[기술 블로그 내용 공유 스터디 첫주차 리뷰]]></title>
            <link>https://mooyeon-choi.github.io/blog/first-study-review</link>
            <guid>https://mooyeon-choi.github.io/blog/first-study-review</guid>
            <pubDate>Sat, 23 Nov 2024 22:53:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>매주 꾸준히 글을 작성하기 위한 동기부여 겸, 다양한 분야의 소식들을 다른 개발자분들과 공유하는 시간을 가질 겸, 다른 사람들 앞에서 발표해보는 연습도 할 겸 F-Lab dev club에서 활동중인 개발자분들을 모아 스터디를 만들었다. '제대로 진행이 될까?' 우려했던 것과는 달리 다들 열정도 있고 실력도 좋으셔서 잘 따라가기만 하면 될 것 같다.</p>
<p>이 글은 이번 첫 스터디 모임에서 공유한 주제들을 정리한 내용이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4">오픈소스 패키지 배포 시 고려해야할 것들</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/first-study-review#%EB%A0%88%EA%B1%B0%EC%8B%9C%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%83%91%EC%9D%84-%EC%8C%93%EC%95%84%EC%98%AC%EB%A6%B4-%EA%B2%83%EC%9D%B8%EA%B0%80">레거시에서 어떻게 탑을 쌓아올릴 것인가</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/first-study-review#github-action%EC%9D%84-%ED%86%B5%ED%95%9C-vercel-%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5-with-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC">GITHUB ACTION을 통한 VERCEL 수동 배포 완전 정복 (with 모노레포)</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="오픈소스-패키지-배포-시-고려해야할-것들">오픈소스 패키지 배포 시 고려해야할 것들<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4" class="hash-link" aria-label="오픈소스 패키지 배포 시 고려해야할 것들에 대한 직접 링크" title="오픈소스 패키지 배포 시 고려해야할 것들에 대한 직접 링크">​</a></h2>
<p><a href="https://mooyeon.com/blog/how-to-upload-opensource-package" target="_blank" rel="noopener noreferrer">블로그 포스트 링크</a></p>
<p>첫 순서는 내가 준비한 내용으로 시작했다. 최근 회사 디자이너, 기획자 분들과 소통하는데 있어 어떻게하면 좀 더 빠르고 명확하게 피드백을 주고 받을까 고민하며 다양한 시도를 하고 있다. 이 내용은 그 중 하나인 디자이너분들과 애니메이션 효과 피드백을 위한 오픈소스 프로젝트 제작을 위해 준비해야할 단계에 대해 정리한 내용이다.</p>
<p>Flutter 커뮤니티는 다른 패키지 관리 시스템들보다 쉽게 접근할 수 있도록 다양한 기능을 제공해주기 때문에 보다 쉽게 패키지를 배포할 수 있다. 따라서 이번에는 패키지 버전 관리와 관련하여 어떻게 하면 다른 개발자들이 버전 충돌 문제 없이 잘 사용할 수 있을지에 집중하여 내용을 정리하였다.</p>
<p>발표 내용은 <strong>이번 프로젝트를 진행하게된 계기</strong>, <strong>Flutter에서 패키지를 사용하는 방법</strong>, <strong>Flutter 패키지 개발</strong>, <strong>패키지 버전 관리의 역사(npm, yarn과 비교)</strong> 순서로 진행했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="프로젝트를-진행하게된-계기">프로젝트를 진행하게된 계기<a href="https://mooyeon-choi.github.io/blog/first-study-review#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EA%B2%8C%EB%90%9C-%EA%B3%84%EA%B8%B0" class="hash-link" aria-label="프로젝트를 진행하게된 계기에 대한 직접 링크" title="프로젝트를 진행하게된 계기에 대한 직접 링크">​</a></h3>
<p>회사에서 디자이너분들과 화면 Interaction과 관련하여 소통할 때, 정확하게 의견을 전달하기는 생각보다 매우 힘들다. 가장 명확한 방법은 직접 화면을 보여주는 것이며 이를 모를 사람들은 없을 거라 생각한다. 하지만 스타트업에서 실제로 업무를 진행하다보면 이렇게 진행하기가 어렵다는 것을 알 수 있는데, 크게는 다음의 이유 때문이었다.</p>
<p>먼저 <strong>디자이너가 매번 애니메이션 효과까지 적용하기 어렵다.</strong> 빠르게 결과물을 찍어내야하는 스타트업의 특성상 디자이너분들이 사소한 디테일 하나하나에 신경쓸 시간이 부족하다. 따라서 UI/UX의 큰 틀을 찍어내고 개발자들은 디자인이 나오는 동시에 개발에 들어가서 디테일한 부분을 볼 시간이 부족했다.</p>
<p>다음으로는 <strong>애니메이션 효과를 똑같이 구현하기는 어렵다.</strong> 화면 UI/UX를 디자인할 때에는 생각보다 더 많이 주관적인 평가가 들어간다. 따라서 다양한 상호작용 효과들과 이에 들어가는 애니메이션 효과를 만능 EaseInOut으로는 해결할 수 없는 경우도 많다. 하지만 위 첫번째 이유와 마찬가지로 우리에게는 항상 시간이 부족하므로 적당히 비슷한 수준으로 넘어가는 경우가 많다. 예술에 조금이라도 관심이 있는 사람이라면 이 적당이 비슷한 수준의 차이가 얼마나 치명적인지는 알고있을 것이다. 따라서 미리 가능한 효과 목록을 제공해주고 이를 활용하여 디자인 할 수 있도록 하는 것이 하나의 목표였다.</p>
<p>따라서 이 문제들을 해결하기 위해 이미 Apple이라는 대기업에서 제공하는 방식인 <a href="https://developer.apple.com/sf-symbols/" target="_blank" rel="noopener noreferrer">SF-Symbols</a>를 참고하여 조금 더 다양한 효과를 넣어볼 수 있는 오픈소스 프로젝트 개발을 시작하였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flutter에서-패키지를-활용하는-방법">Flutter에서 패키지를 활용하는 방법<a href="https://mooyeon-choi.github.io/blog/first-study-review#flutter%EC%97%90%EC%84%9C-%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="Flutter에서 패키지를 활용하는 방법에 대한 직접 링크" title="Flutter에서 패키지를 활용하는 방법에 대한 직접 링크">​</a></h3>
<p>Flutter 에서 패키지를 활용하기 위한 pub.dev 소개와 <code>pubspec.yaml</code> 작성 방법에대해 간단히 이야기 했다. 다른 분들도 이미 <code>npm</code>이나 <code>pnpm</code>, <code>yarn</code>을 활용해본 경험이 있어 이와 다른 점에 대해서만 간단히 설명하고 넘어갔다.</p>
<p>JavaScript의 대표적인 패키지 매니저 <code>npm</code>과 비교해본다면 <code>npm</code>의 경우 유연한 버전 관리를 지향하고 <code>pub.dev</code>의 경우 엄격한 버전 관리를 지향하고 있다. 따라서 공유 종속성 문제를 해결하기 위해 <code>pub.dev</code>에서는 더 큰 범위의 버전을 설정가능하게 해줘야한다. 그 결과 <code>pub.dev</code>는 의미론적 버전관리를 할 때 최소단위가 메이저 버전이 되었다.</p>
<p>이 외에도 <strong>Android</strong> 종속성 관리, <strong>CocoaPods</strong>의 경우 종속성 관리가 불가능한 점을 공유하였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-패키지-개발하기">Flutter 패키지 개발하기<a href="https://mooyeon-choi.github.io/blog/first-study-review#flutter-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Flutter 패키지 개발하기에 대한 직접 링크" title="Flutter 패키지 개발하기에 대한 직접 링크">​</a></h3>
<p>플러터에서 패키지를 개발하는 방법과 <code>publish_to: </code> 옵션을 통해 배포하는 방법, 비공개 배포나 로컬 배포 방법에 대해 공유하였다. 또 종속성 버전을 관리하는 방법에 대해 얘기하며 다음 내용인 패키지 버전 관리로 넘어간다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-버전-관리의-역사npm-yarn과-비교">패키지 버전 관리의 역사(npm, yarn과 비교)<a href="https://mooyeon-choi.github.io/blog/first-study-review#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%97%AD%EC%82%ACnpm-yarn%EA%B3%BC-%EB%B9%84%EA%B5%90" class="hash-link" aria-label="패키지 버전 관리의 역사(npm, yarn과 비교)에 대한 직접 링크" title="패키지 버전 관리의 역사(npm, yarn과 비교)에 대한 직접 링크">​</a></h3>
<p>패키지 버전 관리를 시작하게된 계기와 공유 종속성을 어떻게 해결하는지, 그럼에도 아직 해결하기 어려운 경우는 어떤 것들이 있는지에 대해 정리하였다.</p>
<p>공유 종속성 해결 문제와 관련하여 <code>npm</code>, <code>yarn</code>과 비교하여 <code>pub.dev</code>가 다른 점을 설명하였다. 세부 내용은 <a href="https://mooyeon.com/blog/how-to-upload-opensource-package" target="_blank" rel="noopener noreferrer">해당 포스트</a>에서 확인하자.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="레거시에서-어떻게-탑을-쌓아올릴-것인가">레거시에서 어떻게 탑을 쌓아올릴 것인가<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EB%A0%88%EA%B1%B0%EC%8B%9C%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%83%91%EC%9D%84-%EC%8C%93%EC%95%84%EC%98%AC%EB%A6%B4-%EA%B2%83%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="레거시에서 어떻게 탑을 쌓아올릴 것인가에 대한 직접 링크" title="레거시에서 어떻게 탑을 쌓아올릴 것인가에 대한 직접 링크">​</a></h2>
<p><a href="https://archanwriteup.tistory.com/entry/%EB%A0%88%EA%B1%B0%EC%8B%9C%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%83%91%EC%9D%84-%EC%8C%93%EC%95%84%EC%98%AC%EB%A6%B4-%EA%B2%83%EC%9D%B8%EA%B0%80" target="_blank" rel="noopener noreferrer">블로그 포스트 링크</a></p>
<p>소개팅 애플리케이션 스타트업에 리드 개발자로 합류하면서 기존 Python Django 코드를 어떻게 Java Spring으로 전환하였는지 이 과정에서 어떻게 하면 실행중인 서비스를 멈추지 않으면서 필요한 기능 개발도 이어가면서 전환할 수 있었는지 공유해주었다.</p>
<p>대규모 리브랜딩을 진행 중인 스타트업에 참여하여 바로 리드 개발자로 팀원들을 이끌어 나가며 어떻게 개발 생산성을 높일 수 있었는지 공유해주는 내용과 리팩토링의 다양한 방법론에 대해 설명해주어서 많은 도움이 되었다.</p>
<p>발표 내용은 <strong>레거시 코드를 수정하게된 계기</strong>, <strong>리팩토링 종류</strong>, <strong>실제 적용 방법</strong> 순서로 진행되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="레거시-코드를-수정하게-된-계기">레거시 코드를 수정하게 된 계기<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EB%A0%88%EA%B1%B0%EC%8B%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B2%8C-%EB%90%9C-%EA%B3%84%EA%B8%B0" class="hash-link" aria-label="레거시 코드를 수정하게 된 계기에 대한 직접 링크" title="레거시 코드를 수정하게 된 계기에 대한 직접 링크">​</a></h3>
<p>보통 스타트업 회사들이 경력있는 개발자를 채용하는 타이밍은 큰 프로젝트를 진행하기 직전인 경우가 많을 것이다. Archan님의 경우도 리드 개발자로 해당 회사에 합류하자 마자 대규모 리브랜딩을 어떻게 진행해야할 지 고민하게 된다. 이때 기존에 사용중이던 시스템을 개선해야한다면 문제는 더 복잡해진다. 기존의 레거시 코드들이 어떻게 동작하는지 빠르게 파악해야하며 이를 어떻게 개선할지 또한 빠르게 선택해야한다.</p>
<p>지금까지 경험해본바 스타트업의 레거시 코드들은 <em>고쳐쓰기</em>에는 이미 코드가 너무 복잡하게 얽혀있는 경우가 많다. 이를 보통 <strong>기술 부채</strong>라고 한다. 시험기간 많이들 "내일의 내가 하겠지"라며 게임을 하거나 친구들과 놀러가본 경험이 있을 것이다. 개발을 진행할 때에도 이와 마찬가지로 "회사가 성장해서 개발자가 더 많아지면 하겠지"와 같은 생각을 하게되고 기능 개발에만 급급하게 된다. 이렇게 개발을 진행하다 보면 <em>깨진 유리창 이론</em>과 같이 점차 문제 있는 코드에 대한 경각심이 사라지게 된다.</p>
<p>이렇게 개발을 지속하게 되면 결국에는 프로젝트 코드가 하나하나 고쳐쓰기에는 겉잡을 수 없을만큼 얼기설기 얽혀있어 건들기 어렵다. 이를 많이들 들어봤을 <em>스파게티 코드</em>라 하고 이젠 새로만드는게 더 빠를 지경에 이른다. 이번에도 같은 문제로 인해 <em>고쳐쓰기</em>보다는 새롭게 만들어내는게 나을 것이라 판단하고 이를 하나하나 새롭게 개발하게 된다.</p>
<p>내 경우도 지금의 회사에 들어와서 개발팀장님과 자주 얘기하는 내용이 "현재의 코드는 고쳐쓰기에는 너무 멀리왔다 새롭게 만드는게 더 빠를 것이다." 였는데 우리 회사의 경우와 겹쳐보여 많이 공감이 되었다. 하지만 여기서 회사의 상황에 따라 선택할 수 있는 방법에 차이가 발생하는데 리팩토링의 종류를 보며 확인할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="리팩토링의-종류">리팩토링의 종류<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%EC%9D%98-%EC%A2%85%EB%A5%98" class="hash-link" aria-label="리팩토링의 종류에 대한 직접 링크" title="리팩토링의 종류에 대한 직접 링크">​</a></h3>
<p>리팩토링 방법에는 크게 빅뱅과 도살자 방법 두가지가 있다.</p>
<blockquote>
<p><em>The only thing a Big Bang rewrite guarantees is a Big Bang! - Martin Fowler</em></p>
</blockquote>
<p>빅뱅 방법은 단어에서 유추할 수 있듯 기존의 코드를 버리고 모든 것을 새롭게 만드는 방식이다.</p>
<p>실제 운영되는 코드의 리팩토링을 진행하기란 매우 어렵다. 아래의 말을 한번쯤 들어보았을 것이다.</p>
<p><em>멈춰있는 자동차보다, 달리는 자동차의 바퀴를 바꾸는 것이 더 까다롭기 때문이죠.</em></p>
<p>운영되고 있는 서비스를 리팩토링 하는 것은 '달리는 자동차의 바퀴를 갈아끼우는 것'과 같다고 한다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>유레카!</div><div class="admonitionContent_BuS1"><p><img decoding="async" loading="lazy" alt="Eureka!" src="https://mooyeon-choi.github.io/assets/images/first_study_review_1-dca03aedc5f8acae922b8227dca760ba.png" width="100" height="136" class="img_ev3q"><br><em>"달리는 자동차의 바퀴를 갈아끼는 것이 어렵다면, 새로운 자동차를 만들어버리면 되지 않을까?"</em></p></div></div>
<p>사람들은 생각한다. '그냥 새로 만드는게 더 빠르겠는데?' 이렇게 진행되는 리팩토링 방식이 <strong>빅뱅 리팩토링</strong>이다.</p>
<p>하지만 이렇게 한번에 모든 것을 고치려고 하면 모든 팀원들이 리팩토링 이외의 업무를 중단하고 리팩토링에만 집중해서 참여해야한다. 스타트업에서는 당장 새로운 서비스와 기능들을 출시하기에도 바쁜데 현재 "잘 실행되고 있는" 서비스를 위해 시간을 할애하기는 쉽지 않을 것이다.</p>
<p>이를 위한 또 다른 방법으로 <strong>도살자</strong> 방식이 있다. <strong>점진적 리팩토링(Incremental Refactoring)</strong> 을 통해 한 번에 모든 코드를 바꾸지 않고 여러 작은 단위로 나누어 변경하므로 기능 개발을 지속하며 코드를 개선해 나갈 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="실제-적용-방법">실제 적용 방법<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%8B%A4%EC%A0%9C-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="실제 적용 방법에 대한 직접 링크" title="실제 적용 방법에 대한 직접 링크">​</a></h3>
<p>백엔드에서 코드를 하나하나 수정하기 위해서는 어떻게 해야할까? 기술스택을 유지하며 개발을 진행한다면 새로운 API를 추가해주고 기능 하나하나 요청 API를 변경해주며 적용한다면 기존 시스템에 문제가 발생하지 않으면서 새로운 코드로 전환이 가능할 것 이다.</p>
<p>하지만 이 경우 기존 Django로 작성된 레거시 코드를 Spring으로 전환하며 새로운 기술스택으로 전환하며 새로운 서버를 구성해주어 위 방법으로는 해결할 수 없다.</p>
<p>이를 보통 프록시 서버나 URL 구분을 위한 레이어를 추가하여 새로운 서버로 넘겨 주겠지만 AWS를 활용하여 로드밸런서에서 바로 URL 패턴을 구분하여 넘겨주는 방식을 사용하였다.</p>
<p>기존에는 로드밸런서는 부하분산을 위해서 사용한다는 것 정도만 알고있었는데 이런 기능도 추가해줄 수 있다는 내용을 들을 수 있어 흥미로웠다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="github-action을-통한-vercel-수동-배포-완전-정복-with-모노레포">GITHUB ACTION을 통한 VERCEL 수동 배포 완전 정복 (with 모노레포)<a href="https://mooyeon-choi.github.io/blog/first-study-review#github-action%EC%9D%84-%ED%86%B5%ED%95%9C-vercel-%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5-with-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC" class="hash-link" aria-label="GITHUB ACTION을 통한 VERCEL 수동 배포 완전 정복 (with 모노레포)에 대한 직접 링크" title="GITHUB ACTION을 통한 VERCEL 수동 배포 완전 정복 (with 모노레포)에 대한 직접 링크">​</a></h2>
<p><a href="https://roseline.oopy.io/dev/vercel-deploy-by-github-action-in-monorepo" target="_blank" rel="noopener noreferrer">블로그 포스트 링크</a></p>
<p>서비스 배포를 위해서는 커밋 이력이 필요하다. 하지만 간혹 수정된 내용이 없어 커밋이력을 남길 수 없어 난감한 경우가 있을 것이다. 사람들의 생각이 다 똑같은게 가장 만만한건 역시 <code>README.md</code> 파일이었다. 내 블로그의 경우에도 한번씩 배포중 문제가 발생하거나 한다면 리드미에 엔터를 추가해서 커밋 이력을 남겨서 배포한 적도 있고 이전 회사에서도 리드미를 수정해서 커밋 이력을 만든 적이 있었다.</p>
<p>하지만 많은 사람들이 이와 같은 방식을 쓰게되면 문제가 발생한다. 사람들이 동시에 이러한 방법을 쓴다면 어떻게 될까? 공통된 파일에 수정사항이 발생해 git에서는 바로 충돌 에러가 발생할 것이다.</p>
<p>이번 내용에서도 이와 관련하여 기존의 자동 배포 방식을 왜 포기하고 수동 배포를 적용하였는지 이와 관련하여 어떻게 설정해주었는지 공유하는 시간이었다.</p>
<p>발표 진행 순서는 <strong>수동 배포를 적용하게된 배경</strong>, <strong>배포 Flow 개선</strong>, <strong>추가 개발사항</strong>, <strong>개선 결과</strong> 순서로 진행되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="수동-배포를-적용하게된-배경">수동 배포를 적용하게된 배경<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B2%8C%EB%90%9C-%EB%B0%B0%EA%B2%BD" class="hash-link" aria-label="수동 배포를 적용하게된 배경에 대한 직접 링크" title="수동 배포를 적용하게된 배경에 대한 직접 링크">​</a></h3>
<p>회사에서는 기존에 FrontEnd 코드를 모노레포로 관리하며 vercel의 git integration 기능을 통해 특정 브랜치의 특정 패키지에 변경사항이 생기면 자동으로 배포하게 되어있었다. 하지만 회사 모노레포 구조상 특정 패키지들의 경우 변경사항이 발생하지 않아 자동으로 배포되지 않는 문제가 발생하였다.</p>
<p>이를 해결하기 위해 약간의 <em>꼼수</em>로 <code>README.md</code> 파일을 수정하는 방식을 사용하는 사람이 생기고 이를 점차 많은 사람들이 빈번하게 사용하여 불필요한 fake commit 생성, merge conflict 등 여러 문제가 발생한다. 따라서 이를 개선하기 위해 다른 방안을 찾게되었다.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>모노레포 파이프라인 최적화</div><div class="admonitionContent_BuS1"><p>모노레포를 직접 회사에서 적용해보지는 않아 잘 이해가 안가는 부분도 많았다. 검색해보다가 아래의 내용이 많은 도움이 되었다.</p><p><a href="https://toss.tech/article/monorepo-pipeline" target="_blank" rel="noopener noreferrer">200여개 서비스 모노레포의 파이프라인 최적화</a></p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="배포-flow-개선">배포 Flow 개선<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EB%B0%B0%ED%8F%AC-flow-%EA%B0%9C%EC%84%A0" class="hash-link" aria-label="배포 Flow 개선에 대한 직접 링크" title="배포 Flow 개선에 대한 직접 링크">​</a></h3>
<p><code>vercel_ignore_step.sh</code>를 수정하고 dispatch workflow로 브랜치, 패키지명을 선택해서 배포하는 등의 방법들에 대해 설명해주었다. 세부내용은 해당 <a href="https://roseline.oopy.io/dev/vercel-deploy-by-github-action-in-monorepo" target="_blank" rel="noopener noreferrer">포스트</a>에서 확인하자</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="추가-개발사항">추가 개발사항<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%B6%94%EA%B0%80-%EA%B0%9C%EB%B0%9C%EC%82%AC%ED%95%AD" class="hash-link" aria-label="추가 개발사항에 대한 직접 링크" title="추가 개발사항에 대한 직접 링크">​</a></h3>
<p><code>pnpm</code>을 사용해 패키지 의존성을 설치할 때 종속성 패키지를 캐싱하여 설치시간을 단축한 내용이 인상적이었다. 현재 우리 회사도 웹배포 시 CI/CD 로직을 좀 개선해야하는데 다른 프로젝트들로 인해 계속해서 미루고 있다. 우리의 경우도 의존성 변경이 거의 없으므로 추후 이 내용을 참고하면 배포시간을 크게 단축할 수 있을 것 같다.</p>
<p>이 외에도 수동 배포 시 랜덤한 url 생성을 막기 위한 <strong>vercel alias</strong> 활용법, <strong>배포 결과 자동 알림</strong> 등의 기능을 적용한 방법들에 대해 공유해주었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="개선-결과">개선 결과<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EA%B0%9C%EC%84%A0-%EA%B2%B0%EA%B3%BC" class="hash-link" aria-label="개선 결과에 대한 직접 링크" title="개선 결과에 대한 직접 링크">​</a></h3>
<p>fake commit을 만들고 vercel_ignore_step을 고치고 merge conflict를 수정하는 세 단계의 과정이 workflow를 트리거하는 하나의 단계로 줄었다. 또한 fake commit 작성을 깜빡하는 등 휴먼 에러를 줄이고 수동으로 전달하던 배포 알림을 직접 입력하지 않아도 되도록 하였다.</p>
<p>내년 우리 회사의 매인 프로젝트인 서비스 통합 과정에서 도입 준비중인 모노레포와 관련된 문제점들과 해결과정에 대해 공유해주셔서 많은 도움이 되었다. 아직은 직접 경험해보지 못해 크게 공감할 수는 없었지만, 내년에 프로젝트를 진행하며 다시 본다면 "아~ 그래서 저렇게 했구나"하고 공감할 수 있을 것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="정리에 대한 직접 링크" title="정리에 대한 직접 링크">​</a></h2>
<p>여느 회사나 고민하는 내용들은 비슷한 것 같다. 회사에서 고민하고 있던 "기존 레거시 코드들을 어떻게 고칠까?", "모노레포를 적용해야 할까?" 같은 고민들을 다른 회사의 상황들을 들으며 어떻게 접근해보면 좋을지 생각하는 시간이 되어 좋았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="참고-문헌">참고 문헌<a href="https://mooyeon-choi.github.io/blog/first-study-review#%EC%B0%B8%EA%B3%A0-%EB%AC%B8%ED%97%8C" class="hash-link" aria-label="참고 문헌에 대한 직접 링크" title="참고 문헌에 대한 직접 링크">​</a></h2>
<p><a href="https://velog.io/@uwoobeat/Big-Bang-Rewrite-%EB%8C%80%EC%9D%91%EA%B8%B0" target="_blank" rel="noopener noreferrer">빅뱅 리팩토링(Big Bang Rewrite 대응기 - 유우비트 velog)</a></p>]]></content:encoded>
            <category>study</category>
            <category>pub.dev</category>
            <category>refactoring</category>
            <category>deploy</category>
        </item>
        <item>
            <title><![CDATA[오픈소스 패키지 배포 시 고려해야할 것들]]></title>
            <link>https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package</link>
            <guid>https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package</guid>
            <pubDate>Sat, 16 Nov 2024 12:47:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>Flutter 환경에서 커스터마이징 가능한 움직이는 아이콘 개발과 배포를 진행하면서 찾아본 내용들을 정리하였다. 어떻게 하면 좀 더 많은 사람들이 편하게 활용할 수 있도록 작성할 수 있을 지, 어떻게 코드를 작성해야 다른 사람들이 코드를 확인하고 수정하기 더 편할지를 생각하며 성공한 여러 오픈소스 패키지들을 참고하고 관련 글을 찾아본 내용들을 정리하였다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#flutter%EC%9D%98-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%ED%99%98%EA%B2%BD">Flutter의 패키지 배포 환경</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#flutter-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0">Flutter 패키지 개발하기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C">패키지 버전 관리 가이드</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter의-패키지-배포-환경">Flutter의 패키지 배포 환경<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#flutter%EC%9D%98-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B0%B0%ED%8F%AC-%ED%99%98%EA%B2%BD" class="hash-link" aria-label="Flutter의 패키지 배포 환경에 대한 직접 링크" title="Flutter의 패키지 배포 환경에 대한 직접 링크">​</a></h2>
<p>Flutter는 다른 개발자가 Flutter 및 Dart 생태계에 기여한 공유 패키지를 사용하도록 지원한다. 이를 통해 모든 것을 처음부터 개발하지 않고도 앱을 빠르게 빌드할 수 있다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>패키지와 플러그인의 차이점</div><div class="admonitionContent_BuS1"><p>플러그인은 패키지의 한 유형으로 전체 명칭은 <em>플러그인 패키지</em>이며 일반적으로 플러그인이라고 줄여 부른다.</p><p><strong>패키지</strong></p><p>Dart 패키지는 최소한 <code>pubspec.yaml</code> 파일을 포함하는 디렉토리이다. 또한 패키지에는 종속성(pubspec에 나열됨), Dart 라이브러리, 앱, 리소스, 테스트, 이미지, 글꼴 및 예시가 포함될 수 있다. <a href="https://pub.dev/" target="_blank" rel="noopener noreferrer">pub.dev</a> 사이트에는 Google 엔지니어와 Flutter 및 Dart 커뮤니티의 구성원들이 개발한 패키지들이 소개되어 있으며, 앱에서 활용할 수 있다.</p><p><strong>플러그인</strong></p><p>플러그인 패키지는 플랫폼 기능을 앱에서 사용할 수 있게 해주는 특별한 종류의 패키지이다. 플러그인 패키지는 Android(Kotlin 또는 Java 사용), iOS(Swift 또는 Objective-C 사용), 웹, macOS, Windows, Linux 또는 이들의 조합으로 작성될 수 있다. 예를 들어, 플러그인은 Flutter 앱에 기기의 카메라를 사용할 수 있는 기능을 제공할 수 있다.</p><p><a href="https://www.youtube.com/watch/Y9WifT8aN6o" target="_blank" rel="noopener noreferrer">Packages versus plugins | Decoding Flutter</a></p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-사용">패키지 사용<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%82%AC%EC%9A%A9" class="hash-link" aria-label="패키지 사용에 대한 직접 링크" title="패키지 사용에 대한 직접 링크">​</a></h3>
<p>패키지는 <a href="https://pub.dev/" target="_blank" rel="noopener noreferrer">pub.dev</a>에 게시된다. <code>pub.dev</code>의 <a href="https://pub.dev/flutter" target="_blank" rel="noopener noreferrer">Flutter 랜딩 페이지</a>는 Flutter와 호환되는 상위 패키지(일반적으로 Flutter와 호환되는 종속성을 선언한 패키지)를 표시하고 게시된 모든 패키지를 검색하는 기능을 지원한다.</p>
<p>pub.dev의 <a href="https://pub.dev/flutter/favorites" target="_blank" rel="noopener noreferrer">Flutter Favorites</a> 페이지에는 앱을 작성할 때 크게 도움이 되는 패키지들이 나열되어있어 이를 활용하면 보다 빠르게 애플리케이션을 개발할 수 있다.</p>
<p>또한 <code>Android</code>, <code>iOS</code>, <code>web</code>, <code>Linux</code>, <code>Windows</code>, <code>macOS</code>를 필터링하여 현재 환경에서 활용할 수 있는 패키지 목록도 찾아볼 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="앱에-패키지-종속성-추가하기">앱에 패키지 종속성 추가하기<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%95%B1%EC%97%90-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A2%85%EC%86%8D%EC%84%B1-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0" class="hash-link" aria-label="앱에 패키지 종속성 추가하기에 대한 직접 링크" title="앱에 패키지 종속성 추가하기에 대한 직접 링크">​</a></h4>
<p>예시로 <code>css_colors</code>를 추가해보자</p>
<ol>
<li>
<p><code>dependencies</code> 추가</p>
<ul>
<li>프로젝트 폴더에 있는 <code>pubspec.yaml</code> 파일을 열고 <code>dependencies</code> 항목에 <code>css_colors</code>를 추가한다.</li>
</ul>
</li>
<li>
<p>Install</p>
<ul>
<li>터미널:
<code>flutter pub get</code>을 실행한다</li>
<li>VS Code:
다운로드 아이콘으로 표시된 상단 작업 목록의 <strong>패키지 가져오기</strong>를 클릭한다.</li>
<li>Android Studio/IntelliJ:
<code>pubspec.yaml</code> 상단의 작업 목록에서 <strong>Pub get</strong>을 클릭한다.</li>
</ul>
</li>
<li>
<p>Import</p>
<ul>
<li>Dart code에 <code>import</code>를 사용하여 패키지를 추가한다.</li>
</ul>
</li>
<li>
<p>앱 재실행하기</p>
<ul>
<li><code>hot reload/restart</code>의 경우 Dart 코드만 업데이트 하므로 패키지가 플랫폼별 코드 (Android의 경우 Kotlin/Java, iOS의 경우 Swift/Objective-C)를 가져오는 경우 앱을 재실행하여 빌드해야한다.</li>
</ul>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="터미널-명령어를-통한-추가">터미널 명령어를 통한 추가<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%84%B0%EB%AF%B8%EB%84%90-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B6%94%EA%B0%80" class="hash-link" aria-label="터미널 명령어를 통한 추가에 대한 직접 링크" title="터미널 명령어를 통한 추가에 대한 직접 링크">​</a></h4>
<p><code>flutter pub add "some-package"</code>를 통해서도 패키지 종속성을 추가할 수 있다. 마찬가지로 <code>css_colors</code>를 예시로 확인해보자.</p>
<ol>
<li>
<p>프로젝트 디렉토리 내부 터미널에서 명령어 실행</p>
<ul>
<li><code>flutter pub add css_colors</code></li>
</ul>
</li>
<li>
<p>Import</p>
<ul>
<li>Dart code에 <code>import</code>를 사용하여 패키지를 추가한다.</li>
</ul>
</li>
<li>
<p>앱 재실행하기</p>
<ul>
<li><code>hot reload/restart</code>의 경우 Dart 코드만 업데이트 하므로 패키지가 플랫폼별 코드 (Android의 경우 Kotlin/Java, iOS의 경우 Swift/Objective-C)를 가져오는 경우 앱을 재실행하여 빌드해야한다.</li>
</ul>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-종속성-제거">패키지 종속성 제거<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A2%85%EC%86%8D%EC%84%B1-%EC%A0%9C%EA%B1%B0" class="hash-link" aria-label="패키지 종속성 제거에 대한 직접 링크" title="패키지 종속성 제거에 대한 직접 링크">​</a></h4>
<p><code>flutter pub remove</code>를 통해 패키지를 제거할 수 있다.</p>
<ol>
<li>프로젝트 디렉토리 내부 터미널에서 명령어 실행<!-- -->
<ul>
<li><code>flutter pub add css_colors</code></li>
</ul>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="문제-해결">문제 해결<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="문제 해결에 대한 직접 링크" title="문제 해결에 대한 직접 링크">​</a></h4>
<p>앱에서 <code>some_package</code>와 <code>another_package</code>를 사용하려 한다. 두 패키지는 모두 <code>url_launcher</code>를 종속성으로 가지고 있는데 <code>url_launcher</code>의 버전이 다르다고 가정해보자. 그러면 두 패키지를 가져올 때 충돌이 발생하게 될 것이다.</p>
<p>이를 피하는 가장 좋은 방법은 패키지 작성자가 종속성을 지정할 때 특정 버전 대신 <strong>범위</strong> 버전을 설정하는 것 이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Caret syntax &amp; Traditional syntax</div><div class="admonitionContent_BuS1"><p>버전 범위를 설정해주는 방법은 <code>caret syntax</code>와 <code>traditional syntax</code> 방식이 있다.</p><p><strong>caret syntax</strong></p><p><code>caret syntax</code>의 경우 다음과 같이 사용한다. ex. <code>^1.2.3</code></p><p>이는 <code>&gt;=1.2.3 &lt;2.0.0</code>의 의미를 가지며 메이저 버전이 바뀌지 않는 모든 버전을 포함하는 의미를 가진다.</p><p><strong>traditional syntax</strong></p><p><code>traditional syntax</code>의 경우 단어 그대로 이전부터 사용되던 범위 설정 방식이며 아래와 같이 설정한다.</p><table><thead><tr><th><strong>Value</strong></th><th><strong>허용 범위</strong></th><th><strong>사용가능 여부</strong></th><th><strong>메모</strong></th></tr></thead><tbody><tr><td><code>any</code></td><td>모든 버전</td><td>No</td><td>비어있는 버전 제약 조건을 명시적으로 보여주는 역할이다.</td></tr><tr><td><code>1.2.3</code></td><td>해당 버전만</td><td>No</td><td>패키지를 사용하는 앱에 제약이 걸리기 때문에 패키지가 채택되지 않는다.</td></tr><tr><td><code>&gt;=1.2.3</code></td><td>주어진 버전 이상</td><td>Yes</td><td></td></tr><tr><td><code>&gt;1.2.3</code></td><td>주어진 버전 이후</td><td>No</td><td></td></tr><tr><td><code>&lt;=1.2.3</code></td><td>주어진 버전 이하</td><td>No</td><td></td></tr><tr><td><code>&lt;1.2.3</code></td><td>주어진 버전 이전</td><td>No</td><td></td></tr></tbody></table><p>패키지의 경우 여러 사용자들이 제약없이 활용할 수 있어야하므로 <code>&gt;=</code> 만 허용되는 것에 유의하자.</p></div></div>
<p>종속성을 범위 버전으로 설정해주면 pub은 자동으로 문제를 해결해준다.</p>
<p>만약 해당 패키지를 직접 수정할 수 없는 경우에는 어떻게 할까? <code>pubspec.yaml</code>파일에서 <code>dependency_overrides</code>를 설정하여 종속성을 재정의 할 수 있다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">pubspec.yaml</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">some_package</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">another_package</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependency_overrides</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">url_launcher</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"5.4.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보�드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>충돌하는 종속성이 패키지 자체가 아니라 Android나 iOS 전용 라이브러리일 경우에는 어떻게 할까? <strong>Android</strong>의 경우 종속성 재정의 선언을 <code>Gradle</code> 빌드 로직에 추가하여 강제할 수 있다. <code>guava</code> 패키지를 예시로 보자.</p>
<div class="language-groovy codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-groovy codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">configuration.all {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resolutionStrategy {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        force 'com.google.guava:guava:28.0-android'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>CocoaPods</strong>의 경우 현재(2024-11-19) 종속성 재정의 기능을 제공하지 않고 있다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-패키지-개발하기">Flutter 패키지 개발하기<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#flutter-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Flutter 패키지 개발하기에 대한 직접 링크" title="Flutter 패키지 개발하기에 대한 직접 링크">​</a></h2>
<p>원하는 패키지가 없는 경우 새로운 패키지를 작성하는 방법은 어떻게 될까?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-종속성-및-버전-관리">패키지 종속성 및 버전 관리<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A2%85%EC%86%8D%EC%84%B1-%EB%B0%8F-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC" class="hash-link" aria-label="패키지 종속성 및 버전 관리에 대한 직접 링크" title="패키지 종속성 및 버전 관리에 대한 직접 링크">​</a></h3>
<p>우선 버전 충돌 위험을 최소화하기 위해 <code>pubspec.yaml</code> 파일에서 버전 범위를 설정해줘야한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-버전">패키지 버전<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84" class="hash-link" aria-label="패키지 버전에 대한 직접 링크" title="패키지 버전에 대한 직접 링크">​</a></h4>
<p>모든 패키지에는 <code>pubspec.yaml</code> 파일에 지정된 패키지 버전 번호가 있다. 패키지의 현재 버전은 이름 옆에 표시된다.(예시 <code>url_launcher</code>: <a href="https://pub.dev/packages/url_launcher" target="_blank" rel="noopener noreferrer">url_launcher 6.3.1</a>) 또한 모든 이전 버전 목록을 확인할 수 있다.(예시 <a href="https://pub.dev/packages/url_launcher/versions" target="_blank" rel="noopener noreferrer">url_launcher 버전</a>)</p>
<p>패키지를 업데이트할 때 마이그레이션 작업 없이 앱이 동작하도록 하기 위해 종속성들을 버전 범위로 설정해준다.</p>
<ul>
<li>
<p><strong>범위 제약 조건</strong>: 최소 및 최대 버전 지정</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">url_launcher</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=5.4.0 &lt;6.0.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p><strong><a href="https://dart.dev/tools/pub/dependencies#caret-syntax" target="_blank" rel="noopener noreferrer">캐럿 구문</a>을 이용한 범위 제약</strong>: 최소 버전을 설정한다. 이는 해당 버전부터 다음 메이저 버전 이전까지의 모든 버전을 포함한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^5.4.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 구문은 위 <strong>범위 제약 조건</strong> 과 같은 의미를 가진다.</p>
</li>
</ul>
<p>상세 내용은 다음에 살펴볼 <a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C">패키지 버전 관리 가이드</a>에서 확인하자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="공개되지-않은-패키지에-대한-종속성">공개되지 않은 패키지에 대한 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EA%B3%B5%EA%B0%9C%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="공개되지 않은 패키지에 대한 종속성에 대한 직접 링크" title="공개되지 않은 패키지에 대한 종속성에 대한 직접 링크">​</a></h4>
<p>패키지는 pub.dev에 게시되지 않은 경우에도 활용할 수 있다. 비공개 패키지 또는 로컬 패키지와 같은 게시할 준비가 되지 않은 패키지의 경우 추가 종속성 옵션을 사용할 수 있다.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="경로-종속성">경로 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EA%B2%BD%EB%A1%9C-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="경로 종속성에 대한 직접 링크" title="경로 종속성에 대한 직접 링크">​</a></h5>
<p>Flutter 앱은 파일 시스템 <code>path:</code> 종속성을 사용하여 패키지에 종속될 수 있다. 경로는 상대 경로 또는 절대 경로일 수 있다. 상대 경로는 <code>pubspec.yaml</code>을 포함하는 디렉토리를 기준으로 평가된다. 예를 들어, 옆 디렉토리에 있는 패키지에 종속되려면 다음과 같이 설정한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">상대 경로 종속성</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">packageA</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ../pacakgeA/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="git-종속성">Git 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#git-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="Git 종속성에 대한 직접 링크" title="Git 종속성에 대한 직접 링크">​</a></h5>
<p>Git 저장소에 저장된 패키지에 의존할 수도 있다. 패키지가 저장소 루트에 있는 경우 다음과 같이 설정한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Git 종속성</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packageA</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/flutter/packageA.git</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="ssh를-사용한-git-종속성">SSH를 사용한 Git 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#ssh%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-git-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="SSH를 사용한 Git 종속성에 대한 직접 링크" title="SSH를 사용한 Git 종속성에 대한 직접 링크">​</a></h5>
<p>저장소가 비공개이고 SSH를 사용하여 연결할 수 있는 저장소의 SSH URL을 사용하여 설정한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">SSH를 사용한 Git 비공개 저장소</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packageA</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git@github.com</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">flutter/packageA.git</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="폴더-내-패키지에-대한-git-종속성">폴더 내 패키지에 대한 Git 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8F%B4%EB%8D%94-%EB%82%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%97%90-%EB%8C%80%ED%95%9C-git-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="폴더 내 패키지에 대한 Git 종속성에 대한 직접 링크" title="폴더 내 패키지에 대한 Git 종속성에 대한 직접 링크">​</a></h5>
<p>Pub은 패키지가 Git 저장소의 루트에 있다고 가정한다. 그렇지 않은 경우 <code>path</code>로 위치를 지정한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">폴더 내 패키지에 대한 Git 종속성</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packageA</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/flutter/packages.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> packages/packageA</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="특정-커밋-브랜치-고정-git-종속성">특정 커밋, 브랜치 고정 Git 종속성<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8A%B9%EC%A0%95-%EC%BB%A4%EB%B0%8B-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EA%B3%A0%EC%A0%95-git-%EC%A2%85%EC%86%8D%EC%84%B1" class="hash-link" aria-label="특정 커밋, 브랜치 고정 Git 종속성에 대한 직접 링크" title="특정 커밋, 브랜치 고정 Git 종속성에 대한 직접 링크">​</a></h5>
<p>마지막으로 <code>ref</code>인수를 사용하여 종속성을 특정 git 커밋, 브랜치 또는 태그에 고정한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">kittens</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git@github.com</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">munificent/kittens.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> some</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">branch</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>추가적인 내용은 <a href="https://dart.dev/tools/pub/dependencies" target="_blank" rel="noopener noreferrer">패키지 종속성</a>을 확인하자.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="패키지-버전-관리-가이드">패키지 버전 관리 가이드<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EA%B0%80%EC%9D%B4%EB%93%9C" class="hash-link" aria-label="패키지 버전 관리 가이드에 대한 직접 링크" title="패키지 버전 관리 가이드에 대한 직접 링크">​</a></h2>
<p>pub 패키지 관리자는 버전 관리를 하는데 도움을 준다. 이번에는 버전 관리의 역사와 pub의 버전 관리 접근 방식에 대해 간략히 알아보자.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="버전-관리의-역사">버전 관리의 역사<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%97%AD%EC%82%AC" class="hash-link" aria-label="버전 관리의 역사에 대한 직접 링크" title="버전 관리의 역사에 대한 직접 링크">​</a></h3>
<p>현대 소프트웨어 개발, 특히 웹 개발은 많은 기존 코드를 재사용하는 데 크게 의존한다. 여기에는 과거 작성한 코드뿐만 아니라 타사의 코드, 큰 프레임 워크에서 작은 유틸리티 라이브러리에 이르기까지 많은 것이 포함된다. 애플리케이션이 수십 개의 서로 다른 패키지와 라이브러리에 의존하는 것은 이처럼 드문 일이 아니다.</p>
<p>이는 생각보다도 매우 강력한 효력을 발휘한다. 몇 주 만에 수백만 명의 사용자를 확보한 사이트를 구추하는 소규모 웹 스타트업의 이야기를 볼 때, 그들이 이를 달성할 수 있는 이유는 오픈 소스 커뮤니티 덕분이라 할 수 있다.</p>
<p>하지만 이는 무료로 제공되지는 않는다. 코드 재사용, 특히 유지 관리하지 않는 코드 재사용에는 어려움이 있다. 앱에서 다른 사람이 개발한 코드를 사용하는 경우, 그들이 코드를 변경하면 어떻게 될까? 그들은 앱을 망가뜨리고 싶어하지 않으며, 이는 다들 마찬가지일 것이다. 따라서 이를 <em>버전관리</em>를 통해 해결하고자 한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="name과-number">Name과 Number<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#name%EA%B3%BC-number" class="hash-link" aria-label="Name과 Number에 대한 직접 링크" title="Name과 Number에 대한 직접 링크">​</a></h3>
<p>외부 코드에 의존할 때, "내 앱은 <code>widgets</code>를 사용합니다." 라고만 말하지는 않는다. "내 앱은 <code>widgets 2.0.5</code>를 사용합니다." 라고 말한다. 이름과 버전 번호의 조합은 <em>변경 불가능한</em> 코드 덩어리를 고유하게 식별한다. 업데이트하는 사람들은 원하는 모든 변경을 할 수 있지만 이미 릴리스된 버전은 건드리지 않겠다고 약속한다. 그들은 또 다른 <code>widgets 3.0.0</code>를 내놓을 수 있고 <code>2.0.5</code>에서는 사용하는 버전이 변경되지 않았기 때문에 전혀 영향을 미치지 않는다.</p>
<p><em>변경 사항</em>을 적용하고 싶을 때는 항상 앱을 최신 버전으로 지정할 수 있으며 이를 위해 해당 개발자와 협력할 필요가 없다. 그러나 그렇다고 해서 문제가 완전히 해결되지는 않는다.</p>
<p>아래 내용에서 논의하는 버전 번호는 패키지 파일 이름에 설정된 버전 번호와 다를 수 있다. 여기에는 <code>-0</code>또는 <code>-beta</code>가 포함될 수 있다. 이러한 표기법은 종속성 해결에 영향을 미치지 않는다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="공유-종속성-해결">공유 종속성 해결<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EA%B3%B5%EC%9C%A0-%EC%A2%85%EC%86%8D%EC%84%B1-%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="공유 종속성 해결에 대한 직접 링크" title="공유 종속성 해결에 대한 직접 링크">​</a></h3>
<p><em>종속성 그래프</em>가 실제로 <em>종속성 트리</em>일 때 특정 버전에 따라 잘 변경된다. 앱이 여러 패키지에 종속되고 해당 패키지가 자체 종속성을 갖는 경우와 같이 종속성이 겹치지 않는 한 모두 잘 동작한다.</p>
<p>다음 예시를 참고해보자</p>
<p><img decoding="async" loading="lazy" alt="Dependencies Tree" src="https://mooyeon-choi.github.io/assets/images/dependencies_tree-60e791292a87185fdbcce5e35cd455b4.png" width="305" height="265" class="img_ev3q"></p>
<p>그래서 <code>my_app</code>은 <code>widgets</code>와 <code>templates</code>를 사용하고 이 둘은 모두 <code>collection</code>을 사용한다. 이 것을 <strong>공유 종속성</strong> 이라 한다. 하지만 <code>widgets</code>에서 <code>collection 2.3.5</code> 종속성을 사용하고 싶지 않고 <code>templates</code>에서 <code>collection 2.3.7</code>을 사용하고 싶다면 어떻게 할까? 버전에 동의하지 않으면 어떻게 될까?</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unshared-libraries-npm-접근-방식">Unshared libraries (npm 접근 방식)<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#unshared-libraries-npm-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="Unshared libraries (npm 접근 방식)에 대한 직접 링크" title="Unshared libraries (npm 접근 방식)에 대한 직접 링크">​</a></h4>
<p>한 가지 옵션은 앱이 <code>collection</code>의 두 버전을 모두 사용하도록 하는 것이다. <code>widgets</code>와 <code>templates</code>는 다른 버전의 복사본을 각각 따로 가지게 된다.</p>
<p>이것이 <code>npm</code>이 <code>node.js</code>를 위해 하는 일이다. 다트에서는 어떨까? 다음 시나리오를 따라가며 보자.</p>
<ol>
<li><code>collection</code>이 일부 <code>Dictionary</code> 클래스를 정의한다.</li>
<li><code>widgets</code>는 <code>collection 2.3.5</code>의 복사본에서 인스턴스를 얻는다. 이 후 <code>my_app</code>으로 전달한다.</li>
<li><code>my_app</code>은 <code>templates</code>로 <code>Dictionary</code>를 넘긴다.</li>
<li>이 후 순차적으로 <code>collection 2.3.7</code>에 전달된다.</li>
<li>이를 사용하는 메서드에는 해당 <code>Dictionary</code> 형식 주석이 있다.</li>
</ol>
<p>Dart에서는 <code>collection 2.3.5</code>와 <code>collection 2.3.7</code>은 완전히 관련없는 라이브러리이다. 한 쪽에서 클래스 인스턴스를 가져와 다른쪽의 <code>Dictionary</code> 메서드에 전달하면 두 <code>Dictionary</code>는 완전히 다른 유형이므로 일치하지 않는다.</p>
<p>이러한 이유로 Dart에서는 npm 모델이 적합하지 않다고 판단하고 다른 접근 방식을 가진다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="version-lock-사용되지-않음">Version lock (사용되지 않음)<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#version-lock-%EC%82%AC%EC%9A%A9%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%8C" class="hash-link" aria-label="Version lock (사용되지 않음)에 대한 직접 링크" title="Version lock (사용되지 않음)에 대한 직접 링크">​</a></h4>
<p>대신, 패키지에 의존할 때 앱은 해당 패키지의 단일 사본만 사용한다. 공유 종속성이 있는 경우 이에 의존하는 모든 것이 사용할 버전에 대해 동의해야 한다. 만약 그렇지 않으면 오류가 발생한다.</p>
<p>하지만 이러한 접근 방법으로는 문제가 해결되지 않는다. 우리는 오류가 발생하면 이를 해결할 수 있어야 한다. 이전 npm의 예에서와 같은 상황에 처했다고 가정해보자. <code>widgets</code>와 <code>templates</code>를 사용하고 싶지만 서로 다른 <code>collection</code> 버전을 사용하고 있다. 어떻게 해결해야 할까?</p>
<p>이 접근 방식에서 제시할 수 있는 답은 둘 중 하나를 업그레이드 하는 것이다. <code>templates</code>에 맞추기 위해 <code>collection 2.3.7</code> 버전이 적용된 <code>widgets</code> 버전을 찾을 수 있을까?</p>
<p>대부분의 경우 답은 "No"일 것이다. 개발하는 입장에서 생각해보자 우리는 <code>widgets</code> 코드에 새로운 변경사항을 적용한 새 버전을 출시하려 한다. 어떻게 하면 보다 많은 사람들이 문제 없이 업그레이드 하도록 할 수 있을까? <code>collection</code>의 버전을 유지한다면 모든 사람이 문제 없이 새 버전으로 업그레이드할 수 있을 것이다.</p>
<p>우리가 종속성을 업그레이드 한다면 <code>widgets</code>를 업그레이드 하는 모든 사람은 좋든 싫든 <code>collection</code>을 업그레이드 해야한다. 이는 때에 따라 매우 힘든일이므로 종속성 버전을 올리고자 하는 동기가 저하된다. 이를 <strong>버전 잠금</strong> 이라고 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="버전-제약-dart의-접근-방식">버전 제약 (Dart의 접근 방식)<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%B2%84%EC%A0%84-%EC%A0%9C%EC%95%BD-dart%EC%9D%98-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="버전 제약 (Dart의 접근 방식)에 대한 직접 링크" title="버전 제약 (Dart의 접근 방식)에 대한 직접 링크">​</a></h4>
<p>버전 잠금을 해결하기 위해 패키지가 종속성에 두는 제약을 느슨하게 한다. <code>widgets</code>및 <code>templates</code>가 모두 작업하는 버전의 <em>범위</em>를 나타낼 수 있다면 종속성을 새 버전으로 옮길 수 있는 충분한 여유가 생긴다. 범위에 겹치는 부분이 있는 한 둘다 만족하는 버전을 찾을 수 있다.</p>
<p>이는 <a href="https://bundler.io/" target="_blank" rel="noopener noreferrer">bundler</a>가 따르는 모델이며 <strong>pub</strong>의 모델이기도 하다. <code>pubspec.yaml</code>에 종속성을 추가 할 때 허용할 수 있는 버전 범위를 지정할 수 있다. <code>widgets</code>의 <code>pubspec.yaml</code>이 다음과 같다면</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=2.3.5 &lt;2.4.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>collection 2.3.7</code>에 대한 버전을 선택할 수 있을 것이다. 해당 버전은 <code>widgets</code>와 <code>templates</code> 모두의 제약 조건을 충족한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="의미론적-버전">의미론적 버전<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%9D%98%EB%AF%B8%EB%A1%A0%EC%A0%81-%EB%B2%84%EC%A0%84" class="hash-link" aria-label="의미론적 버전에 대한 직접 링크" title="의미론적 버전에 대한 직접 링크">​</a></h3>
<p>패키지에 종속성을 추가할 때 허용할 버전 범위를 지정하고 싶을 때가 있다. 어떤 범위를 선택해야 할지 어떻게 알 수 있을까? 전방 호환이 되어야 하므로 이상적으로는 범위가 아직 출시되지 않은 미래 버전을 포함한다. 하지만 아직 존재하지도 않는 새로운 버전에서 패키지가 작동할 것이라고 어떻게 확신할 수 있을까?</p>
<p>이를 해결하려면 버전 번호가 무엇을 의미하는지 <strong>합의</strong>해야 한다. 의존하는 패키지 개발자가 "이전 버전과 호환되지 않는 변경 사항을 만들면 주요 버전 번호를 올리겠다고 약속합니다."라고 선언했다고 가정해보자. 그들을 신뢰하고 <code>2.3.5</code> 패키지가 그들의 버전과 호환된다는 것을 알고 있다면 최대 <code>3.0.0</code>까지 작동할 것이라고 믿을 수 있다. 이를 <code>pubspec.yaml</code>에서 보면 다음과 같다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ^2.3.5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>노트</div><div class="admonitionContent_BuS1"><p>이 예에서는 캐럿 구문을 사용하여 다양한 버전을 표현한다. <code>^2.3.5</code> 문자열은 "<code>3.0.0</code>을 제외한 <code>2.3.5</code>에서 <code>3.0.0</code>까지의 모든 버전 범위"를 의미한다. 자세한 내용은 <a href="https://dart.dev/tools/pub/dependencies#caret-syntax" target="_blank" rel="noopener noreferrer">캐럿 구문</a>을 참고하자.</p></div></div>
<p>이 작업을 하려면 우리는 약속들을 정리해 규칙을 만들어야 한다. 다행히도 이미 이전의 똑똑한 사람들이 모든 작업을 끝냈고, 이를 <a href="https://semver.org/spec/v2.0.0-rc.1.html" target="_blank" rel="noopener noreferrer">의미론적 버전 관리</a>라 명명했다.</p>
<p>이는 버전 번호의 형식과 이후 버전 번호로 증가할 때의 정확한 API 동작 차이를 설명한다. Pub에서는 버전이 이런 방식으로 포맷되어야 하며, Pub 커뮤니티와 잘 어울리려면 패키지가 지정한 의미 체계를 따라야 한다. 또한 의존하는 패키지도 이를 따른다고 가정해야 한다.</p>
<p>의미론적 버전 관리가 <code>1.0.0</code> 이전 버전들 사이의 호환성을 약속하지는 않지만 Dart 커뮤니티 규칙에서는 이러한 버전들도 의미론적으로 처리한다. 각 숫자별로 해석해보면 <code>0.1.2</code>에서 <code>0.2.0</code>은 중대한 변경사항이 추가되었음을 나타내고 <code>0.1.3</code>은 새로운 기능이 추가되었음을 나타낸다. <code>0.1.2+1</code>과 같이 표시할 수도 있는데 이는 공개 API에 영향을 미치지 않는 변경을 나타낸다. 하지만 보다 단순하고 명확하게 관리하기 위해 <code>0.1.2+1</code>과 같은 명명 방식은 <code>1.0.0</code> 이후부터는 사용하지 않도록 하자.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="제약-조건-해결">제약 조건 해결<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="제약 조건 해결에 대한 직접 링크" title="제약 조건 해결에 대한 직접 링크">​</a></h3>
<p>패키지를 정의할 때 사용하는 <a href="https://dart.dev/tools/pub/glossary#immediate-dependency" target="_blank" rel="noopener noreferrer">직접 종속성(Immediate dependency)</a> 목록들을 직접 나열할 수 있다. 이러한 각 패키지에 대해 패키지에서 허용하는 버전 범위를 지정한다. 이러한 종속 패키지 각각은 고유한 종속성을 가질 수 있다. 이를 <a href="https://dart.dev/tools/pub/glossary#transitive-dependency" target="_blank" rel="noopener noreferrer">이적 종속성(transitive dependency)</a>이라 한다. Pub은 이를 탐색하여 앱의 전체 종속성 그래프를 빌드한다.</p>
<p>그래프의 각 패키지에 대해 pub는 종속된 모든 것을 살펴보고, 모든 버전 제약 조건을 모아서 동시에 해결하려 한다. 우선 중첩되는 범위를 교차하여 얻어내고 해당 패키지에 릴리스된 실제 버전들 중 모든 제약 조건을 충족하는 가장 최신 버전을 선택한다.</p>
<p><code>collection</code>을 예로 3개의 패키지가 다음과 같이 종속되어 있다고 가정해보자.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt;=1.7.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">^1.4.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;1.9.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>collection</code>의 개발자들은 다음 버전을 아래와 같이 출시했다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1.7.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1.7.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1.8.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1.8.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1.8.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1.9.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>모든 범위에 맞는 가장 높은 버전 번호는 <code>1.8.2</code>이므로 pub에서는 이를 선택한다. 이 후 <em>앱과 앱에서 사용되는 모든 패키지</em>들은 모두 <code>collection 1.8.2</code>를 사용한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="제약-컨텍스트">제약 컨텍스트<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%A0%9C%EC%95%BD-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8" class="hash-link" aria-label="제약 컨텍스트에 대한 직접 링크" title="제약 컨텍스트에 대한 직접 링크">​</a></h3>
<p>패키지 버전을 선택할 때 그에 종속된 모든 패키지를 고려한다는 사실은 중요한 결과를 낳는다. 패키지에 대해 선택되는 특정 버전은 해당 패키지를 사용하는 앱의 전역 속성이다.</p>
<p>다음의 예는 이것의 무엇을 의미하는지 보여준다. 앱이 두 개가 있다고 가정해보자. 다음은 그 것들의 <code>pubspec.yaml</code>이다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> my_app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  widgets</span><span class="token punctuation" style="color:#393A34">:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> other_app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">widgets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt;1.5.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>두 패키지는 아래와 같은 <code>pubspec.yaml</code>을 갖는 <code>widgets</code>에 의존한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> widgets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=1.0.0 &lt;2.0.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>other_app</code> 패키지는 그 자체가 가지는 <code>collection</code>에 의존한다. 흥미로운 점은 <code>widgets</code> 패키지가 다른 버전 제약 조건을 가지고 있다는 것이다.</p>
<p>즉, <code>widgets</code> 패키지를 단독으로 보고 <code>collection</code>의 어떤 버전을 사용할지 알아낼 수는 없다. 이는 콘텍스트 상황에 따라 달라진다. <code>my_app</code>에서는 <code>widgets</code>는 <code>collection 1.9.9</code>를 사용할 것이다. 하지만 <code>other_app</code>의 <code>widgets</code>은 다른 제약 때문에 <code>collection 1.4.9</code>를 사용할 수 있다.</p>
<p>각 앱이 자체 <code>package_config.json</code> 파일을 갖는 이유가 여기있다. 각 패키지에 대해 선택된 구체적인 버전은 포함된 전체 종속성 그래프에 따라 달라진다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="exported-dependencies에-대한-제약-조건-해결">Exported dependencies에 대한 제약 조건 해결<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#exported-dependencies%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="Exported dependencies에 대한 제약 조건 해결에 대한 직접 링크" title="Exported dependencies에 대한 제약 조건 해결에 대한 직접 링크">​</a></h3>
<p>패키지 작성자는 패키지 제약 조건을 신중하게 정의해야 한다. 아래 시나리오를 예시로 보자.</p>
<p><img decoding="async" loading="lazy" alt="Exported dependencies tree" src="https://mooyeon-choi.github.io/assets/images/exported_dependencies_tree-26173514523219c0887a3bb5c0a417b2.png" width="162" height="261" class="img_ev3q"></p>
<p><code>bookshelf</code> 패키지는 <code>widgets</code>에 의존한다. 현재 <code>1.2.0</code>인 <code>widgets</code>패키지는 <code>collection</code>에서 <code>export package:collection/collection.dart</code>를 통해 내보내고, 이 버전은 <code>2.4.0</code>이다. <code>pubspec.yaml</code>로 보면 아래와 같다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bookshelf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">widgets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ^1.2.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> widgets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ^2.4.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>패키지 <code>collection</code>이 <code>2.5.0</code>으로 업데이트 되었을 때를 보자. <code>collection 2.5.0</code>에는 <code>sortBackwards()</code> 라는 새 메서드가 포함되어 있다. 이는 <code>widgets</code>의 일부분이므로 <code>bookshelf</code>가 <code>collection</code> 종속성만 가지고 있더라도 <code>sortBackwards()</code>를 호출할 수 있다.</p>
<p><code>widgets</code> API에 버전 번호가 명시되어 있지 않기 때문에 <code>bookshelf</code>를 사용하는 앱은 <code>sortBackwards()</code>를 호출할 때 충돌이 발생할 수 있다.</p>
<p>이러한 이유로 <strong>Exported dependencies</strong>를 다룰 때 패키지 작성자는 종속성의 상한과 하한에 대해 더 엄격한 제한을 유지하는 것이 좋다. 이 경우 <code>widgets</code> 패키지의 범위를 좁혀야 한다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bookshelf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">widgets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=1.2.0 &lt;1.3.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> widgets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">collection</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=2.4.0 &lt;2.5.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>widgets</code>은 <code>1.2.0</code>이상 <code>1.3.0</code> 미만, <code>collection</code>은 <code>2.4.0</code>이상 <code>2.5.0</code> 미만으로 제약 조건을 수정했다.</p>
<p>이 규칙을 사용하면 하나가 직접적인 종속성이 아니더라도 사용자가 두 패키지의 올바를 버전을 모두 사용할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="잠금-파일">잠금 파일<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%9E%A0%EA%B8%88-%ED%8C%8C%EC%9D%BC" class="hash-link" aria-label="잠금 파일에 대한 직접 링크" title="잠금 파일에 대한 직접 링크">​</a></h3>
<p>그럼 pub에서 앱의 버전 제약을 해결하면 그 다음은 어떻게 될까? 최종 결과는 앱이 직접 또는 간접적으로 의존하는 모든 패키지의 전체 목록과 앱의 제약과 함께 작동하는 해당 패키지의 최상위 버전이다.</p>
<p>각 패키지에 대해 pub은 해당 정보를 가져와서 콘텐츠 해시를 계산하고, 둘다 앱의 디렉토리에 있는 <code>pubspec.lock</code> 잠금 파일에 쓴다. pub이 앱의 파일을 빌드할 때, <code>dart_tool/package_config.json</code> 잠금 파일을 사용하여 각 패키지의 어떤 버전을 참조해야 하는지 알아낸다. (그리고 어떤 버전을 선택했는지 궁금하다면 잠금 파일을 열어서 확인할 수 있다.)</p>
<p>다음으로 중요한 pub의 작업은 잠금 파일을 건드리지 않는 것이다. 앱에 대한 잠금 파일을 얻으면 pub은 사용자가 잠금 파일을 건드리라고 지시할 때까지 건들지 않는다. 이는 매우 중요하다. 의도하지 않고 앱에서 무작위 패키지의 새 버전을 자발적으로 사용하지 않는다는 의미이다. 앱이 잠기면 수동으로 잠금 파일을 업데이트하라고 지시할 때까지 잠긴 상태로 유지된다.</p>
<p>패키지가 앱용이라면 소스 제어 시스템에 잠금 파일을 체크인하자. 이렇게 하면 팀의 모든 구성원이 앱을 빌드할 때 모든 종속성의 정확히 동일한 버전을 사용하게 된다. 앱을 배포할 때도 이를 사용하여 프로덕션 서버에서 개발 중인 것과 정확히 동일한 패키지를 사용하고 있는지 확인할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="문제가-생기는-경우들">문제가 생기는 경우들<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%83%9D%EA%B8%B0%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%93%A4" class="hash-link" aria-label="문제가 생기는 경우들에 대한 직접 링크" title="문제가 생기는 경우들에 대한 직접 링크">​</a></h3>
<p>물론, 모든 것은 종속성 그래프가 완벽하고 흠이 없다는 것을 전제로 한다. 버전 범위와 pub의 제약 조건 해결 및 의미론적 버전 관리를 사용하더라도 버전 충돌의 위험으로 부터 완전히 자유로울 수는 없다.</p>
<p>다음은 문제가 발생하는 예시들이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="분리된-제약-조건을-가질-수-없음">분리된 제약 조건을 가질 수 없음<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%B6%84%EB%A6%AC%EB%90%9C-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EA%B0%80%EC%A7%88-%EC%88%98-%EC%97%86%EC%9D%8C" class="hash-link" aria-label="분리된 제약 조건을 가질 수 없음에 대한 직접 링크" title="분리된 제약 조건을 가질 수 없음에 대한 직접 링크">​</a></h4>
<p>앱이 <code>widgets</code>와 <code>templates</code>를 사용한다고 가정해 보자. <code>widgets</code> 에서는 <code>collection &gt;=1.0.0 &lt;2.0.0</code>을 사용하고 <code>templates</code>에서는 <code>collection &gt;=3.0.0 &lt;4.0.0</code>을 사용한다면 겹치는 버전 범위가 없다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="릴리스된-버전이-포함되지-않은-범위를-가지는-경우">릴리스된 버전이 포함되지 않은 범위를 가지는 경우<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%A6%B4%EB%A6%AC%EC%8A%A4%EB%90%9C-%EB%B2%84%EC%A0%84%EC%9D%B4-%ED%8F%AC%ED%95%A8%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%B2%94%EC%9C%84%EB%A5%BC-%EA%B0%80%EC%A7%80%EB%8A%94-%EA%B2%BD%EC%9A%B0" class="hash-link" aria-label="릴리스된 버전이 포함되지 않은 범위를 가지는 경우에 대한 직접 링크" title="릴리스된 버전이 포함되지 않은 범위를 가지는 경우에 대한 직접 링크">​</a></h4>
<p>공유 종속성에 대한 모든 제약 조건을 함께 넣은 좁은 범위가 있다고 가정해보자. 종속성의 버전이 <code>&gt;=1.2.4 &lt;1.2.6</code> 로 설정되어있다면 <code>1.2.4</code> 버전은 문제없이 동작할 것 이다. 하지만 만약 <code>1.3.0</code>을 사용한다면 범위를 벗어날 것이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="불안정한-그래프-구조">불안정한 그래프 구조<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EB%B6%88%EC%95%88%EC%A0%95%ED%95%9C-%EA%B7%B8%EB%9E%98%ED%94%84-%EA%B5%AC%EC%A1%B0" class="hash-link" aria-label="불안정한 그래프 구조에 대한 직접 링크" title="불안정한 그래프 구조에 대한 직접 링크">​</a></h4>
<p>이는 지금까지 pub의 버전 해결 프로세스에서 가장 어려운 부분이다. 이 프로세스는 종속성 그래프를 구축한 다음 모든 제약 조건을 해결하고 버전을 선택하는 것으로 설명되었다. 하지만 실제로는 그런식으로 동작하지 않는다. 버전을 선택하기 전에 전체 종속성 그래프를 어떻게 구축할 수 있을까? <code>pubspec.yaml</code> 자체로는 버전에 따라 다르다. 동일한 패키지라도 다른 버전을 불러온다면 다른 종속성 집합을 가지고 있을 수 있다.</p>
<p>패키지 버전을 선택하면 종속성 그래프 모양 자체가 변경된다. 그래프가 변경되면 제약 조건이 변경되어 다른 버전을 선택하게 되고, 이후 다시 실행된다.</p>
<p>때때로 이 과정은 결코 안정적인 해결책으로 정착되지 않는다. 예시를 보자</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> my_app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 0.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">yin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&gt;=1.0.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 1.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 2.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">yang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1.0.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 1.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">yin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1.0.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 모든 경우에, 앱에 맞는 구체적인 버전은 없으며, 이런 일이 발생하면 pub에서 오류를 보고하고 무슨 일이 일어나고 있는지 알려준다. 뭔가가 작동할 수 있다고 생각하지만 작동하지 않는 이상한 상태에 빠지지는 않을 것이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://mooyeon-choi.github.io/blog/how-to-upload-opensource-package#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="정리에 대한 직접 링크" title="정리에 대한 직접 링크">​</a></h3>
<ul>
<li>코드 재사용에는 장점도 있지만, 패키지는 독립적으로 수정될 수 있어야한다.</li>
<li>버전 관리로 독립성을 확보할 수 있다. 구체적인 단일 버전에 의존하는 것은 유연성을 해친다. 공유 종속성을 활용하면 버전 잠금을 활용한다.</li>
<li>버전 잠금을 처리하려면 패키지가 다양한 버전에 의존해야한다. 그런 다음 Pub은 종속성 그래프를 탐색하여 사용자에게 가장 적합한 버전을 선택한다. 적절한 버전을 선택할 수 없는 경우 Pub에서 경고한다.</li>
<li>앱이 종속성에 대한 견고한 버전 세트를 갖추면 해당 세트는 잠금 파일에 고정된다. 그럼 앱을 실행하는 모든 머신이 동일한 종속성 버전을 사용하게 된다.</li>
</ul>]]></content:encoded>
            <category>Flutter</category>
            <category>pub.dev</category>
            <category>Opensource</category>
        </item>
        <item>
            <title><![CDATA[2024 KWDC 톺아보기]]></title>
            <link>https://mooyeon-choi.github.io/blog/2024-kwdc</link>
            <guid>https://mooyeon-choi.github.io/blog/2024-kwdc</guid>
            <pubDate>Wed, 30 Oct 2024 12:47:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>2024 KWDC 내용 정리</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%8B%B9%EC%8B%A0%EC%9D%98-view%EA%B0%80-%EB%B2%84%EB%B2%85%EC%9D%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0">당신의 View가 버벅이는 이유</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#swiftui-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%98-%EB%A7%88%EB%B2%95">SwiftUI 애니메이션의 마법</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%9C%84%EC%A0%AF-%EC%9C%84%EC%A0%AF-%EC%96%B4%EB%94%94%EC%97%90%EB%82%98-%EC%9E%88%EA%B3%A0-%ED%94%BD%EC%85%80-%ED%95%98%EB%82%98%EB%8F%84-%EB%82%A8%EA%B8%B0%EC%A7%80-%EC%95%8A%EA%B8%B0">위젯, 위젯, 어디에나 있고 픽셀 하나도 남기지 않기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%AA%A8%EB%91%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8">모두를 위한 디자인</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B0%98-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%ED%95%98%EB%A9%B4%EC%84%9C-%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%82%AC%EC%86%8C%ED%95%9C-%EC%A7%80%EC%8B%9D%EB%93%A4">위치 기반 서비스를 하면서 알게된 사소한 지식들</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A4%91%EC%8B%AC-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0">사용자 중심 소프트웨어 만들기</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="당신의-view가-버벅이는-이유">당신의 View가 버벅이는 이유<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%8B%B9%EC%8B%A0%EC%9D%98-view%EA%B0%80-%EB%B2%84%EB%B2%85%EC%9D%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="당신의 View가 버벅이는 이유에 대한 직접 링크" title="당신의 View가 버벅이는 이유에 대한 직접 링크">​</a></h2>
<p>화면 렌더링이 멈추는 대표적인 Case인 메인 스레드가 동작하지 않는 원인들에 대해 알아보고, 이를 테스트하기 위한 방법들에 대한 내용이다.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>요약</div><div class="admonitionContent_BuS1"><p>Swift에서는 View protocol의 body 생성자를 통해 화면에 표시할 구성요소들을 정의 해준다. 이러한 View는 Main thread와 Background thread를 통해 코드가 실행되는 방식을 제어 할 수 있는데 어떻게 더 부드러운 화면을 만들 수 있는지 알아보자</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="view가-멈추는-대표적인-이유">View가 멈추는 대표적인 이유<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#view%EA%B0%80-%EB%A9%88%EC%B6%94%EB%8A%94-%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="View가 멈추는 대표적인 이유에 대한 직접 링크" title="View가 멈추는 대표적인 이유에 대한 직접 링크">​</a></h3>
<p>화면이 멈추는 이유는 대부분 메인 스레드에 Blocking이 발생하기 때문이다. 그렇다면 메인 스레드에 Blocking이 발생하는 원인은 어떤게 있을까?</p>
<ul>
<li><strong>메인 스레드가 동작하지(반응하지) 않는 이유</strong>
<ol>
<li>스레드에 작업이 할당되어 있을 때</li>
<li>다른 응답을 기다리고 있을 때 ex) async hang</li>
</ol>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="메인-스레드에-작업이-걸리는-경우들">메인 스레드에 작업이 걸리는 경우들<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%A9%94%EC%9D%B8-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90-%EC%9E%91%EC%97%85%EC%9D%B4-%EA%B1%B8%EB%A6%AC%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%93%A4" class="hash-link" aria-label="메인 스레드에 작업이 걸리는 경우들에 대한 직접 링크" title="메인 스레드에 작업이 걸리는 경우들에 대한 직접 링크">​</a></h3>
<ul>
<li>View model의 <code>initialize</code> 시점에 작업 할당 시
-&gt; <code>initialize</code> 시점에 작업 할당 시 메인 스레드에서 동작하도록 되어있어 의도치 않게 메인 스레드에 작업이 할당될 수 있다</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="swiftui-애니메이션의-마법">SwiftUI 애니메이션의 마법<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#swiftui-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%98-%EB%A7%88%EB%B2%95" class="hash-link" aria-label="SwiftUI 애니메이션의 마법에 대한 직접 링크" title="SwiftUI 애니메이션의 마법에 대한 직접 링크">​</a></h2>
<p>SwiftUI iOS 개발자인 <code>pavel zak</code>님이 SwiftUI Canvas를 사용해 여러 애니메이션들을 구현하는 방법과 예제를 공유해주었다. 발표 당시 ppt 자료 글씨가 너무 작게보여 해당 내용들을 기록해둘 수 없었는데, 개인 블로그인 <a href="https://nerdyak.tech/" target="_blank" rel="noopener noreferrer">Pavel Zak’s dev blog</a>에 잘 정리되어있어 코드를 확인할 수 있었다.</p>
<p>블로그 링크로 발표 내용 정리를 대신하고, 추후 시간이되면 포스트를 하나씩 따라하며 정리해보려한다.</p>
<p><a href="https://nerdyak.tech/" target="_blank" rel="noopener noreferrer">Pavel Zak’s dev blog</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="위젯-위젯-어디에나-있고-픽셀-하나도-남기지-않기">위젯, 위젯, 어디에나 있고 픽셀 하나도 남기지 않기<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%9C%84%EC%A0%AF-%EC%9C%84%EC%A0%AF-%EC%96%B4%EB%94%94%EC%97%90%EB%82%98-%EC%9E%88%EA%B3%A0-%ED%94%BD%EC%85%80-%ED%95%98%EB%82%98%EB%8F%84-%EB%82%A8%EA%B8%B0%EC%A7%80-%EC%95%8A%EA%B8%B0" class="hash-link" aria-label="위젯, 위젯, 어디에나 있고 픽셀 하나도 남기지 않기에 대한 직접 링크" title="위젯, 위젯, 어디에나 있고 픽셀 하나도 남기지 않기에 대한 직접 링크">​</a></h2>
<p>iOS, iPadOS, watchOS, macOS 등 애플 기기 전반에 걸쳐 활용되는 위젯을 구현해본 경험을 공유하는 시간이었다.</p>
<p>iOS 16 부터 위젯에 여러 상호작용이 가능하도록 구현되어 이를 활용한 위젯 개발이 가능해졌다.
이를 토대로 여러 디바이스 환경에서 위젯을 개발하는 방법과 위젯을 개발할 때 고려해야할 사항들을 공유하는 시간이었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모두를-위한-디자인">모두를 위한 디자인<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%AA%A8%EB%91%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8" class="hash-link" aria-label="모두를 위한 디자인에 대한 직접 링크" title="모두를 위한 디자인에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="포괄적인-디자인">포괄적인 디자인<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%ED%8F%AC%EA%B4%84%EC%A0%81%EC%9D%B8-%EB%94%94%EC%9E%90%EC%9D%B8" class="hash-link" aria-label="포괄적인 디자인에 대한 직접 링크" title="포괄적인 디자인에 대한 직접 링크">​</a></h3>
<p>우리의 삶에서 문화, 신체, 나이, 위치 등 여러 요소들로 사람들의 그룹을 나눌 수 있고 이러한 요소들을 조합하여 또 다시 다양한 그룹으로 나눌 수 있다. 앱 개발시에도 이러한 요소들을 고려하여 우리의 애플리케이션을 사용하는 사용자가 어떤 그룹에 속해있을 지 고려한다면 해당 그룹 사용자들에 맞춘 서비스를 개발할 수 있을 것이다. 하지만 우리의 애플리케이션이 특정 그룹을 타겟팅한 서비스가 아니라면 이러한 다양한 요소들을 고려한 <strong>모두를 고려한 디자인</strong>이 필요하다</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게">어떻게?<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%96%B4%EB%96%BB%EA%B2%8C" class="hash-link" aria-label="어떻게?에 대한 직접 링크" title="어떻게?에 대한 직접 링크">​</a></h3>
<p>그렇다면 <strong>모두를 고려한 디자인</strong>은 어떻게 적용할 수 있을까? Apple은 이미 여러 콘텐츠에서 글쓰기, 형상화, 오디오, 비디오를 통해 이를 적용 중이며 이러한 요소들 외에도 식별자(개인을 구분하기 위한)도 고려하여 제공하고 있다.</p>
<p>포괄적인 디자인을 위해 고려해야할 사항들은 크게 아래의 6가지로 정의할 수 있다.</p>
<ol>
<li>다양한 스토리</li>
<li>고정관념을 피하라</li>
<li>접근성 개선</li>
<li>문화에 맞춰 현지화 하기</li>
<li>색상을 통한 표현</li>
<li>자유로운 자기표현</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="다양한-스토리">다양한 스토리<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%8A%A4%ED%86%A0%EB%A6%AC" class="hash-link" aria-label="다양한 스토리에 대한 직접 링크" title="��다양한 스토리에 대한 직접 링크">​</a></h3>
<p>다양한 스토리를 담기위해서는 어떠한 방법들이 있을까, 아래의 예시를 보며 확인해보자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="액티비티-동호회를-위한-소모임-어플">액티비티 동호회를 위한 소모임 어플<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%95%A1%ED%8B%B0%EB%B9%84%ED%8B%B0-%EB%8F%99%ED%98%B8%ED%9A%8C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%86%8C%EB%AA%A8%EC%9E%84-%EC%96%B4%ED%94%8C" class="hash-link" aria-label="액티비티 동호회를 위한 소모임 어플에 대한 직접 링크" title="액티비티 동호회를 위한 소모임 어플에 대한 직접 링크">​</a></h4>
<p>액티비티 동호회를 위한 소모임 애플리케이션에서 동호회의 활동성을 강조하기 위해 메인 이미지를 <strong>격류에서 카약을 타고있는 사람</strong>으로 설정할 수 있을 것이다. 또한 활동성보단 커뮤니케이션을 강조하기 위해서는 <strong>대화를 주고받는 사람들</strong>의 이미지를 사용하면 좀 더 직관적으로 동호회의 성격을 표현할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="to-do-list-어플">To Do List 어플<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#to-do-list-%EC%96%B4%ED%94%8C" class="hash-link" aria-label="To Do List 어플에 대한 직접 링크" title="To Do List 어플에 대한 직접 링크">​</a></h4>
<p>이번에는 하루일과를 계획하고 정의해주는 애플리케이션을 생각해보자 조금 과할 수도 있지만, 우리나라에서만 사용중이던 애플리케이션의 대표이미지에 김장하기라는 일과가 설정 되어있었다. 이를 글로벌 사용자들을 위해 제공하려 할 때 해당 내용을 단순히 번역만 하여 제공한다면, 미국의 사용자들은 <em>김장하기</em>라는 활동에 대해 알지못하므로 이 애플리케이션이 정확히 어떤 용도인지 한눈에 파악하기 조금 어려워질 것 이다. 따라서 예시로 작성되는 일과들을 해당 국가의 문화에 맞춰 변경하는 것만으로도 사용자들에게 많은 공감을 끌어낼 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="식도락-어플">식도락 어플<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%8B%9D%EB%8F%84%EB%9D%BD-%EC%96%B4%ED%94%8C" class="hash-link" aria-label="식도락 어플에 대한 직접 링크" title="식도락 어플에 대한 직접 링크">​</a></h4>
<p>음식 이미지에서도 해당 문화에 맞는 사진을 통해 공감을 얻어낼 수 있다. 인도의 사람들은 난이나 카레와 같은 음식 이미지가 공감하기 좋을 것이고 이탈리아의 사용자들은 피자, 리조또 같은 이미지들이 공감을 끌어내기 쉬울 것 이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="정리에 대한 직접 링크" title="정리에 대한 직접 링크">​</a></h4>
<p>이러한 내용들과 같이 이미지 안에도 다양한 스토리를 담아낼 수 있으므로 다양성을 고려할 때는 이미지에서 담아내는 스토리에 주의하면 보다 많은 사용자들에 공감을 얻을 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="고정관념을-피하라">고정관념을 피하라<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EA%B3%A0%EC%A0%95%EA%B4%80%EB%85%90%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC" class="hash-link" aria-label="고정관념을 피하라에 대한 직접 링크" title="고정관념을 피하라에 대한 직접 링크">​</a></h3>
<p>우리의 지나치게 단순화된 믿음은 무의식적으로 소수그룹의 사람들을 배제할 수 있다. 발표자분은 최근 글로벌로 이슈가 되고있는 성별에 대한 예시로 이를 설명했다. 최근 미국에서는 성별의 다양성을 존중해 단순히 남성, 여성으로 나누는 것이 아닌 다양한 가치관을 포용하려는 노력을 하고있다. 다양성까지 가지 않더라도 아이콘을 남성적이거나 여성적인 아이콘을 활용한다면 해당 서비스는 특정 성별을 위한 서비스로 생각되어 반대 성별의 사람들이 사용하기 꺼려질 것이다. 따라서 젠더프리한 실루엣이 적용된 아이콘을 활용한다면 특정 그룹에게 거리감을 주지 않고 포용적인 어플리케이션을 개발할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="접근성-개선하기">접근성 개선하기<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%A0%91%EA%B7%BC%EC%84%B1-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0" class="hash-link" aria-label="접근성 개선하기에 대한 직접 링크" title="접근성 개선하기에 대한 직접 링크">​</a></h3>
<p>대부분 사람들은 나이가 들어감에 따라 시력이 나빠질 것이고 신체에 불편한 곳이 하나씩 생길 것이다. 따라서 어떤 사람들도 불편함 없이 사용할 수 있도록 반응형 요소들을 설정한다면 모든 사람들이 불편함 없이 서비스를 사용할 수 있다.</p>
<p>예를들어, 사용자의 시력에 따라 디바이스의 텍스트 사이즈를 다양하게 설정할 때, Text Size 에 맞춰 UI의 다른 요소들도 같이 반응한다면 앱을 사용하기 더 편해질 것이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="문화에-맞게-현지화">문화에 맞게 현지화<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%AC%B8%ED%99%94%EC%97%90-%EB%A7%9E%EA%B2%8C-%ED%98%84%EC%A7%80%ED%99%94" class="hash-link" aria-label="문화에 맞게 현지화에 대한 직접 링크" title="문화에 맞게 현지화에 대한 직접 링크">​</a></h3>
<p>전세계 사람들의 약 50% 정도는 2개국어를 사용하고 있다. 이에 맞춰 다국어를 고려한 UI 디자인이 필요하다. 다국어를 고려한 UI디자인은 단순히 문자를 변경하는데서 끝나지 않고, 문화에 맞춰 UI의 다른 요소들도 변경을 해주어야한다. 아랍어를 예시로 생각해보자.</p>
<p>아랍어의 경우 오른쪽에서 왼쪽으로 읽는 문화다. 따라서 단순 텍스트 뿐만 아닌 UI 다른 요소들도 오른쪽에서 왼쪽으로 배치하여 억지로 끼워 맞춘듯한 UI가 아닌 자연스러운 UI 적용한다면 아랍인들도 불편함 없이 사용할 수 있을 것이다.</p>
<p><a href="https://developer.apple.com/design/human-interface-guidelines/" target="_blank" rel="noopener noreferrer">Apple style guide</a>를 통해 애플에서는 어떻게 적용 중인지 확인해볼 수도 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="색상을-통한-표현">색상을 통한 표현<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%83%89%EC%83%81%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%91%9C%ED%98%84" class="hash-link" aria-label="색상을 통한 표현에 대한 직접 링크" title="색상을 통한 표현에 대한 직접 링크">​</a></h3>
<p>색상은 감정을 불러 일으키는 효과가 있다. 하지만 이러한 색상에 대한 이미지도 나라별로 큰 차이가 있으므로, 이를 고려한 디자인 필요하다. 아래 예시를 통해 보자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="녹색과-빨강에-대한-인식">녹색과 빨강에 대한 인식<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EB%85%B9%EC%83%89%EA%B3%BC-%EB%B9%A8%EA%B0%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B8%EC%8B%9D" class="hash-link" aria-label="녹색과 빨강에 대한 인식에 대한 직접 링크" title="녹색과 빨강에 대한 인식에 대한 직접 링크">​</a></h4>
<ul>
<li>녹색 - 동양권: 친환경, 서양권: 행운</li>
<li>빨강 - 동양권: 행운, 텍스트에 사용 시 불길한 이미지, 남미: 사랑, 서양권: 폭력</li>
</ul>
<p><strong>주식 예시</strong></p>
<ul>
<li>동양권에서는 상승 - 빨강, 하락 - 파랑</li>
<li>서양권에서는 상승 - 녹색, 하락 - 빨강</li>
</ul>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>추가로</div><div class="admonitionContent_BuS1"><p>세계 인구의 5%정도는 색맹이라 한다. 따라서 색에만 의존할 경우 알아보지 못할 수 있다. 색에 의존하지 않고 모양을 통해서도 표현한다면 모든 사용자들이 불편함 없이 사용할 것 이다.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="자유로운-자기표현">자유로운 자기표현<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%9E%90%EC%9C%A0%EB%A1%9C%EC%9A%B4-%EC%9E%90%EA%B8%B0%ED%91%9C%ED%98%84" class="hash-link" aria-label="자유로운 자기표현에 대한 직접 링크" title="자유로운 자기표현에 대한 직접 링크">​</a></h3>
<p>사람들은 어플리케이션을 통해 자기자신을 표현하고 싶어한다. 이러한 욕구를 충족시켜주어, 자유롭게 자신을 표현할 수 있도록 정체성을 존중해준다면 보다 많은 사용자들을 포용할 수 있을 것이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="위치-기반-서비스를-하면서-알게된-사소한-지식들">위치 기반 서비스를 하면서 알게된 사소한 지식들<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B0%98-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%ED%95%98%EB%A9%B4%EC%84%9C-%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%82%AC%EC%86%8C%ED%95%9C-%EC%A7%80%EC%8B%9D%EB%93%A4" class="hash-link" aria-label="위치 기반 서비스를 하면서 알게된 사소한 지식들에 대한 직접 링크" title="위치 기반 서비스를 하면서 알게된 사소한 지식들에 대한 직접 링크">​</a></h2>
<p>어플리케이션을 개발한다면 항상 내가 만드는 시스템에 대한 도메인 기반 지식이 필요하다. 이번에는 TMAP iOS 개발자분이 지도 애플리케이션을 개발하며 습득한 지식들을 공유해주셨다. 위치 기반 서비스를 개발할 때 알아야할 기반 지식들은 어떤게 있을까?</p>
<p>먼저 지도 위치정보를 활용한다면 크게는 트리거, 이벤트, 경험 <strong>3가지</strong>, 작게는 언제, 어디서, 무엇을, 어떻게, 왜 <strong>5가지</strong> 사실이 중요하다.</p>
<ul>
<li>
<p>트리거</p>
<ul>
<li>언제</li>
<li>어디서</li>
</ul>
</li>
<li>
<p>이벤트</p>
<ul>
<li>무엇을</li>
</ul>
</li>
<li>
<p>경험</p>
<ul>
<li>어떻게</li>
<li>왜</li>
</ul>
</li>
</ul>
<p>트리거에는 언제, 어디서가 포함된다. 위치정보를 활용할 때 사람이 어디에 있는지</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="지도-위치기반-어플리케이션을-개발하면서-자주-접하는-용어들">지도, 위치기반 어플리케이션을 개발하면서 자주 접하는 용어들<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#%EC%A7%80%EB%8F%84-%EC%9C%84%EC%B9%98%EA%B8%B0%EB%B0%98-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9E%90%EC%A3%BC-%EC%A0%91%ED%95%98%EB%8A%94-%EC%9A%A9%EC%96%B4%EB%93%A4" class="hash-link" aria-label="지도, 위치기반 어플리케이션을 개발하면서 자주 접하는 용어들에 대한 직접 링크" title="지도, 위치기반 어플리케이션을 개발하면서 자주 접하는 용어들에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="geofencing">Geofencing<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#geofencing" class="hash-link" aria-label="Geofencing에 대한 직접 링크" title="Geofencing에 대한 직접 링크">​</a></h4>
<p>특정 영역에 가상 울타리가 쳐져있다고 생각 -&gt; 영역에 들어가고 나가는 이벤트 트리거</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="geocoding-reverse-coding">Geocoding, reverse coding<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#geocoding-reverse-coding" class="hash-link" aria-label="Geocoding, reverse coding에 대한 직접 링크" title="Geocoding, reverse coding에 대한 직접 링크">​</a></h4>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="map-matching">Map matching<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#map-matching" class="hash-link" aria-label="Map matching에 대한 직접 링크" title="Map matching에 대한 직접 링크">​</a></h4>
<p>위치 정보를 실제 도로 네트워크에서 신호가 벗어나더라도 조정</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="polyline">polyline<a href="https://mooyeon-choi.github.io/blog/2024-kwdc#polyline" class="hash-link" aria-label="polyline에 대한 직접 링크" title="polyline에 대한 직접 링크">​</a></h4>
<p>점의 연속적인 집합을 연결한 선
ex)</p>]]></content:encoded>
            <category>Apple</category>
            <category>IOS</category>
            <category>Swift</category>
        </item>
        <item>
            <title><![CDATA[퓨처 플러터 컨퍼런스 톺아보기]]></title>
            <link>https://mooyeon-choi.github.io/blog/future-flutter-conf</link>
            <guid>https://mooyeon-choi.github.io/blog/future-flutter-conf</guid>
            <pubDate>Tue, 29 Oct 2024 12:47:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>조금 늦었지만, 2024년 9월 28일 진행된 Flutter 컨퍼런스 Future Flutter에서 들었던 내용을 정리하고, 실제 회사에 적용해보며 겪었던 이슈들에 대한 내용을 정리한 글이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ffi%EB%A1%9C-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EA%B3%A0go%EC%99%80-%ED%94%8C%EB%9F%AC%ED%84%B0">FFI로 연결하는 고(Go)와 플러터</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-webrtc">Flutter WebRTC</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#shorebird-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D">ShoreBird 작동 방식</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%92%8D%EC%84%B1%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9A%94%EC%B2%AD%EC%82%AC%ED%95%AD%EC%97%90-%EB%8C%80%EC%9D%91%ED%95%98%EA%B8%B0">풍성한 디자인 요청사항에 대응하기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%94%8C%EB%9F%AC%ED%84%B0-%EB%A0%8C%EB%8D%94%EB%A7%81-%ED%95%B4%EB%B6%80%ED%95%99">플러터 렌더링 해부학</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-web%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%9C%ED%92%88-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0">Flutter web을 활용하여 제품 개발 환경 개선하기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%96%B4%EB%8A%90%EB%82%A0-%EA%B0%91%EC%9E%90%EA%B8%B0-%EC%95%B1%EC%9D%B4-%ED%84%B0%EC%A1%8C%EC%9D%84-%EB%95%8C">어느날 갑자기 앱이 터졌을 때</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-bloc%EC%9D%84-%EC%A0%9C%ED%92%88-%EA%B0%9C%EB%B0%9C%EC%97%90-%EC%95%BC%EB%AC%B4%EC%A7%80%EA%B2%8C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0">Flutter Bloc을 제품 개발에 야무지게 적용하기</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ffi로-연결하는-고go와-플러터">FFI로 연결하는 고(Go)와 플러터<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ffi%EB%A1%9C-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EA%B3%A0go%EC%99%80-%ED%94%8C%EB%9F%AC%ED%84%B0" class="hash-link" aria-label="FFI로 연결하는 고(Go)와 플러터에 대한 직접 링크" title="FFI로 연결하는 고(Go)와 플러터에 대한 직접 링크">​</a></h2>
<p>멀티 플랫폼에 대응하는 앱을 만들기 위해 Go 언어와 플러터를 활용하며 기본적인 UI 디자인을 적용하며 고성능의 앱을 개발하는 방법에 대해 고민하며 적용한 내용에 대한 발표였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="왜-go-인가">왜 Go 인가?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%99%9C-go-%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="왜 Go 인가?에 대한 직접 링크" title="왜 Go 인가?에 대한 직접 링크">​</a></h3>
<p>고언어를 채택한 장점에는 크게 3가지의 이유가 있었다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="크로스-플랫폼-개발">크로스 플랫폼 개발<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%81%AC%EB%A1%9C%EC%8A%A4-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EA%B0%9C%EB%B0%9C" class="hash-link" aria-label="크로스 플랫폼 개발에 대한 직접 링크" title="크로스 플랫폼 개발에 대한 직접 링크">​</a></h4>
<p>Windows, macOS, Linux 와 같은 다양한 운영체제와 x86, ARM 등의 아키텍쳐로 크로스 컴파일이 가능하여 보다 빠르게 다양한 플랫폼 지원을 간편하게 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="빠른-컴파일과-실행">빠른 컴파일과 실행<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%B9%A0%EB%A5%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%8B%A4%ED%96%89" class="hash-link" aria-label="빠른 컴파일과 실행에 대한 직접 링크" title="빠른 컴파일과 실행에 대한 직접 링크">​</a></h4>
<p>Go언어는 머신코드로 바로 컴파일 가능하기 때문에 고성능의 앱 개발에 유리하다. 실행속도가 빠를 뿐만아니라 컴파일 속도도 빨라, 수정사항을 빠르게 적용하여 테스트 가능하고 이로인해 개발 속도를 빠르게 가져갈 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="가벼움과-확장성">가벼움과 확장성<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EA%B0%80%EB%B2%BC%EC%9B%80%EA%B3%BC-%ED%99%95%EC%9E%A5%EC%84%B1" class="hash-link" aria-label="가벼움과 확장성에 대한 직접 링크" title="가벼움과 확장성에 대한 직접 링크">​</a></h4>
<p>고루틴과 채널이라 알려진 동시성 기능을 지원하여 많은 작업들을 성능저하 없이 동시에 처리 가능하다. 효율성과 확장성을 필요로하는 고성능 어플리케이션 개발에 이상적이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="왜-플러터인가">왜 플러터인가?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%99%9C-%ED%94%8C%EB%9F%AC%ED%84%B0%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="왜 플러터인가?에 대한 직접 링크" title="왜 플러터인가?에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="크로스-플랫폼-개발-1">크로스 플랫폼 개발<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%81%AC%EB%A1%9C%EC%8A%A4-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EA%B0%9C%EB%B0%9C-1" class="hash-link" aria-label="크로스 플랫폼 개발에 대한 직접 링크" title="크로스 플랫폼 개발에 대한 직접 링크">​</a></h4>
<p>하나의 코드 베이스로 안드로이드, IOS, Windows desktop, Web 등 여러 플랫폼 개발이 가능하다. 이로인해 적은 인원과 시간으로 다양한 플랫폼에 대응하는 App.을 개발할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="유용한-개발도구">유용한 개발도구<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%9C%A0%EC%9A%A9%ED%95%9C-%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC" class="hash-link" aria-label="유용한 개발도구에 대한 직접 링크" title="유용한 개발도구에 대한 직접 링크">​</a></h4>
<p>플러터의 핫리로드, 핫리스타스 같은 기능과 유용한 개발 도구를 지원해 개발 속도를 빠르게 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="빠르고-아름다운-애플리케이션">빠르고 아름다운 애플리케이션<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EC%95%84%EB%A6%84%EB%8B%A4%EC%9A%B4-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98" class="hash-link" aria-label="빠르고 아름다운 애플리케이션에 대한 직접 링크" title="빠르고 아름다운 애플리케이션에 대한 직접 링크">​</a></h4>
<p>플러터는 자체적으로 기본적인 애니메이션과 인터렉션에 대한 처리가 되어있어 보다 간편하게 고퀄리티의 사용자 경험을 제공한다. 또한 각 플랫폼에 맞게 컴파일되어 효율적으로 동작하도록 해준다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ffi-란">FFI 란?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ffi-%EB%9E%80" class="hash-link" aria-label="FFI 란?에 대한 직접 링크" title="FFI 란?에 대한 직접 링크">​</a></h3>
<p>Foreign Function Interface (FFI)는 C언어로 짜여진 함수를 다트나 플러터에서 사용하는 방법으로 플러터에서는 <code>dart:ffi</code> 패키지를 사용한다.</p>
<p>C뿐만 아니라 Go, C++, Rust 등의 <strong>C 인터페이스를 제공하는 언어</strong>라면 Dart에서 사용이 가능하다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="플러터에서-ffi-사용하��기">플러터에서 FFI 사용하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%94%8C%EB%9F%AC%ED%84%B0%EC%97%90%EC%84%9C-ffi-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="플러터에서 FFI 사용하기에 대한 직접 링크" title="플러터에서 FFI 사용하기에 대한 직접 링크">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">flutter create --platforms=android,ios,macos,windows,linux --template=plugin ffi native add</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 커맨드로 프로젝트를 생성하면 <code>lib</code>폴더 아래에 <code>Dart</code> 코드, <code>src</code> 폴더 아래에 <code>C</code> 코드가 생성된다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="고언어-라이브러리-생성하기">고언어 라이브러리 생성하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EA%B3%A0%EC%96%B8%EC%96%B4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0" class="hash-link" aria-label="고언어 라이브러리 생성하기에 대한 직접 링크" title="고언어 라이브러리 생성하기에 대한 직접 링크">​</a></h4>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="고언어-코드-작성">고언어 코드 작성<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EA%B3%A0%EC%96%B8%EC%96%B4-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1" class="hash-link" aria-label="고언어 코드 작성에 대한 직접 링크" title="고언어 코드 작성에 대한 직접 링크">​</a></h5>
<ol>
<li>
<p><code>src</code>폴더 안에 <code>go.mod</code> 파일 생성</p>
<blockquote>
<p><strong><code>go.mod</code> 파일이란?</strong> 모듈 이름, 버전, 의존성 등을 정의하는 파일</p>
</blockquote>
</li>
<li>
<p><code>sum.go</code> 파일을 생성하고 고언어 코드를 작성</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// sum.go file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// cgo 문법으로</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// export &lt;함수명&gt; 주석을 이용해서 sum이라는 함수를 C로 export</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// export sum</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// C에서 사용해야하기 때문에 Go의</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> b                        </span><span class="token comment" style="color:#999988;font-style:italic">// 타입이 아닌 C 타입으로 C.int 를 사용</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="고언어-라이브러리를-안드로이드용으로-컴파일">고언어 라이브러리를 안드로이드용으로 컴파일<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EA%B3%A0%EC%96%B8%EC%96%B4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC" class="hash-link" aria-label="고언어 라이브러리를 안드로이드용으로 컴파일에 대한 직접 링크" title="고언어 라이브러리를 안드로이드용으로 컴파일에 대한 직접 링크">​</a></h4>
<p>최신 안드로이드 단말기들을 지원하기 위해서는 <code>arm64</code>와 <code>x86_64</code> 아키텍처를 지원하도록 크로스 컴파일 되어야함</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export ANDROID_OUT=../android/src/main/jniLibs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export ANDROID_SDK=$HOME/Library/Android/sdk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export NDK_BIN=$ANDROID_SDK/ndk/23.1.777.9620/toolchains/llvm/prebuilt/darwin-x86_64/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># x86_64 아키텍처로 컴파일 해서 android/src/main/jniLibs/x86_64 폴더에 libsum.so 생성</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CGO_ENABLED=1 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOS=android \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOARCH=and64 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CC=$NDK_BIN/x86_64-linux-android21-clang \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go build -buildmod=c-shared -o $ANDROID_OUT/x86_64/libsum.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># arm64 아키텍처로 컴파일 해서 android/src/main/jniLibs/arm64-v8a 폴더에 libsum.so 생성</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CGO_ENABLED=1 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOOS=android \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GOARCH=arm64 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CC=$NDK_BIN/aarch64-linux-android21-clang \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go build -buildmode=c-shared -o $ANDROID_OUT/arm64-v8a/libsum.so</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="고언어-라이브러리를-ios용으로-컴파일">고언어 라이브러리를 IOS용으로 컴파일<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EA%B3%A0%EC%96%B8%EC%96%B4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-ios%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC" class="hash-link" aria-label="고언어 라이브러리를 IOS용으로 컴파일에 대한 직접 링크" title="고언어 라이브러리를 IOS용으로 컴파일에 대한 직접 링크">​</a></h4>
<p>기본적인 컨셉은 안드로이드용 빌드와 동일하나 약간의 추가과정이 필요함</p>
<ul>
<li>IOS는 static 라이브러리로 컴파일 해야함</li>
<li>시뮬레이터용 <code>arm64</code>와 <em><code>arm64</code> 빌드</em>와 <em>아이폰용 <code>arm64</code> 빌드</em>, 총 세개의 라이브러리로 컴파일</li>
<li>시뮬레이터용 라이브러리 두개를 통합하기 위해 lipo라는 도구를 사용</li>
<li>빌드된 모든 라이브러리를 <code>xframework</code>패키지로 통합</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="플러터에서-사용하기">플러터에서 사용하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%94%8C%EB%9F%AC%ED%84%B0%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="플러터에서 사용하기에 대한 직접 링크" title="플러터에서 사용하기에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="ffigen을-사용해서-바인딩-만들기">FFIgen을 사용해서 바인딩 만들기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ffigen%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%A7%8C%EB%93%A4%EA%B8%B0" class="hash-link" aria-label="FFIgen을 사용해서 바인딩 만들기에 대한 직접 링크" title="FFIgen을 사용해서 바인딩 만들기에 대한 직접 링크">​</a></h4>
<p><code>C</code>라이브러리를 <code>Dart</code> 코드에서 사용할 수 있게 하는 바인딩을 <code>ffigen</code>이라는 도구를 이용해서 자동생성. <code>ffigen</code>을 돌리기 위해 <code>ffigen yaml</code> 작성</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># Run with `flutter pub run ffigen --config ffigen.yaml`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> NativeLibrary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Bindings to `src/sum.h`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">output</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> `lib/generated_bindings.dart`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">headers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">entry-points</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">`src/libsum.h`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">preamble</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">  // ignore_for_file: always_specify_types</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">  // ignore_for_file: camel_case_types</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">  // ignore_for_file: non_constant_identifier_names</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">  // ignore_for_file: unused_field</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">  // ignore_for_file: unused_element</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">comments</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">style</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> any</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">lenght</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> full</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="다트코드에서-사용하기">다트코드에서 사용하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%8B%A4%ED%8A%B8%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="다트코드에서 사용하기에 대한 직접 링크" title="다트코드에서 사용하기에 대한 직접 링크">​</a></h4>
<p>이제 라이브러리를 다트에서 로드하고 <code>generated_bindings.dart</code> 파일에 <code>C</code> 함수로 바인딩된 다트 함수를 호출 가능</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// lib/native_add.dart</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:ffi'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:io'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'generated_bindings.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> int b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> _bindings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> _libName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'native_add'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// The dynamic library in which the symbols for {NativeAddBindings} can be found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">DynamicLibrary</span><span class="token plain"> _dylib </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isAndroid </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isLinux</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">DynamicLibrary</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'libsum.so'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token class-name">UnsupportedError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Unknown platform: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression class-name">Platform</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">.</span><span class="token string-literal interpolation expression">operatingSystem</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// The bindings to the native functions in [_dylib].</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">NativeLibrary</span><span class="token plain"> _bindings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NativeLibrary</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_dylib</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="정리에 대한 직접 링크" title="정리에 대한 직접 링크">​</a></h3>
<ul>
<li><code>C</code> 인터페이스를 제공하는 언어라면 <code>Dart</code>에서 <strong>FFI</strong>를 통해 사용 가능함</li>
<li><code>ffigen</code>을 이용하면 <code>.h</code>를 읽어 자동으로 바인딩 코드를 생성해줌</li>
<li><code>Go</code> 언어의 크로스 컴파일러를 이용해 쉽게 크로스 플랫폼 라이브러리 생성 가능</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>title="Next Step"</div><div class="admonitionContent_BuS1"><ul>
<li>IOS / macOS / Windows / Linux 등 안드로이드 외 다른 플랫폼 빌드<!-- -->
<ul>
<li>예시는 Android / IOS / macOS 까지만 동작</li>
</ul>
</li>
<li>웹에서도 동작하도록 빌드 (힌트: WebAssembly)</li>
<li>메모리 공유나 비동기 처리등의 고급 사용예제</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-webrtc">Flutter WebRTC<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-webrtc" class="hash-link" aria-label="Flutter WebRTC에 대한 직접 링크" title="Flutter WebRTC에 대한 직접 링크">​</a></h2>
<p>Flutter에서 WebRTC를 어떻게 다루는지에 대한 내용을 기대하였지만, 기대했던 내용과는 달리 단순히 WebRTC에 대한 설명만 진행하였다. WebRTC에 대해 잘 알지 못하여 이 내용 또한 유익한 시간이었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="서론">서론<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%84%9C%EB%A1%A0" class="hash-link" aria-label="서론에 대한 직접 링크" title="서론에 대한 직접 링크">​</a></h3>
<p>발표자분께서 현재 회사에 영상통화 솔루션을 개발하며 얻은 Flutter WebRTC 지식을 공유해주셨다. WebRTC에 대한 기본 개념과 Flutter 환경에서 WebRTC로 화상 통화를 어떻게 구현하였는지를 공유해주셨다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webrtc의-주요-개념">WebRTC의 주요 개념<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#webrtc%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90" class="hash-link" aria-label="WebRTC의 주요 개념에 대한 직접 링크" title="WebRTC의 주요 개념에 대한 직접 링크">​</a></h3>
<p>WebRTC의 <strong>RTC</strong>는 <strong>Real-Time Communication</strong>의 약자이다. 웹 애플리케이션과 사이트가 <strong>중간자 없이</strong> 브라우저간에 <strong>오디오/비디오 스트리밍</strong> 및 데이터 교환을 가능하도록 하는 기술이다.</p>
<p>웹에서 실시간 미디어 스트리밍을 하기위한 <strong>유일한 표준</strong>으로 2010년 Google에 의해 오픈소스화 되었다. 이후 Chrome 등 <strong>모든 브라우저</strong>에 탑재 되었다. (물론 IE에서는 제외 되었지만, IE는 이제 보내주도록 하자 😭) Flutter에서 사용하는 WebRTC도 당연히 동일한 원리로 실행된다.</p>
<p>클라이언트 간의 <strong>직접 연결</strong>로 구현 가능하지만, 클라이언트들이 완전히 같은 네트워크에 있는게 아닌 이상 직접 연결하는 것은 어렵다. 따라서 <strong>시그널링 서버</strong>와 <strong>릴레이 서버</strong> 같은 기술들이 생겨난다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="시그널링signaling-서버">시그널링(Signaling) 서버<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%8B%9C%EA%B7%B8%EB%84%90%EB%A7%81signaling-%EC%84%9C%EB%B2%84" class="hash-link" aria-label="시그널링(Signaling) 서버에 대한 직접 링크" title="시그널링(Signaling) 서버에 대한 직접 링크">​</a></h4>
<p><img decoding="async" loading="lazy" alt="webRTC Signaling server" src="https://mooyeon-choi.github.io/assets/images/webrtc_signaling_server-676d437f552d2b8a1632e9401f7087a4.png" width="582" height="402" class="img_ev3q"></p>
<p>각각의 기기가 <strong>서버의 도움 없이 연결</strong>하는 것을 도와주는 서버로, 뒤에서 다룰 <strong>SDP(Session Description Protocol)</strong> 교환에 관련된 서버이다. 실제 데이터가 시그널링 서버를 통해서 오가는 것이 아니라는 점을 유의하자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="릴레이relay-서버">릴레이(Relay) 서버<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%A6%B4%EB%A0%88%EC%9D%B4relay-%EC%84%9C%EB%B2%84" class="hash-link" aria-label="릴레이(Relay) 서버에 대한 직접 링크" title="릴레이(Relay) 서버에 대한 직접 링크">​</a></h4>
<p><img decoding="async" loading="lazy" alt="Relay server" src="https://mooyeon-choi.github.io/assets/images/webrtc_turn_server-fbc97609513ecd67a20566107682a090.png" width="891" height="279" class="img_ev3q"></p>
<p><strong>TURN 서버</strong>라고도 부른다. 방화벽이나 여러 제약으로 인해 <strong>P2P</strong> 연결이 불가능한 상황에서 <strong>클라이언트 간 중계</strong>를 해주는 서버이다. 구글은 개발자들을 위해 <strong>TURN 서버 코드</strong>를 제공하고 있다. TURN 서버를 구현해 놓으면 서로 다른 네트워크에 있어도 P2P처럼 통신이 가능하다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="stun-서버">STUN 서버<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#stun-%EC%84%9C%EB%B2%84" class="hash-link" aria-label="STUN 서버에 대한 직접 링크" title="STUN 서버에 대한 직접 링크">​</a></h4>
<p><strong>STUN 서버</strong>는 <strong>TURN 서버</strong>와 혼동하기 쉽다. <strong>STUN 서버</strong> 는 <strong>Session Traversal Utilities for NAT</strong>의 약자로 통신을 위해 <strong>자기 자신의 정보</strong>를 알아내기 위한 서버이다. 예를 들어, 공유기를 사용하는 환경에서 외부IP를 알아내기 위해 사용된다. 자기 자신을 비추는 거울로 생각하면 된다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="rtcpeerconnection-객체">RTCPeerConnection 객체<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#rtcpeerconnection-%EA%B0%9D%EC%B2%B4" class="hash-link" aria-label="RTCPeerConnection 객체에 대한 직접 링크" title="RTCPeerConnection 객체에 대한 직접 링크">​</a></h4>
<p>WebRTC를 위해 제공되는 Web API 객체이다. 웹 브라우저 또는 네이티브 앱에서 직접적인 통신 연결을 생성 및 관리하고, 데이터 스트림을 교환하는 역할을 수행한다. 이를 잘 이해하고 활용한다면 WebRTC 구현을 위해 개발자가 할 일이 크게 줄어들 것이다.</p>
<p><strong>RTCPeerConnection</strong>이 하는 역할은 다음과 같다</p>
<ul>
<li>offer, answer, ice-candidate 등 WebRTC를 위한 <strong>신호처리</strong></li>
<li>STUN 및 TURN 서버를 사용한 <strong>NAT 및 방화벽 통과</strong></li>
<li>사용자의 디바이스(카메라, 마이크)에서 오는 <strong>미디어 스트림 관리</strong></li>
<li>클라이언트 간 데이터를 직접 교환하기 위한 <strong>데이터 채널 생성</strong></li>
<li>통신 세션이 초기화 되거나 변경될 때 <strong>세션 협상</strong> 및 <strong>재협상</strong></li>
<li>모든 통신을 자동으로 암호화하여 <strong>중간자 공격</strong>으로부터 보호</li>
<li>통계 및 네트워크 정보 제공</li>
</ul>
<p>WebRTC의 경우 Flutter만을 위한 자료가 거의 없으므로 <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection" target="_blank" rel="noopener noreferrer">MDN 사이트</a>를 통해 확인하는 것이 좋다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="sdp-session-description-protocol">SDP (Session Description Protocol)<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#sdp-session-description-protocol" class="hash-link" aria-label="SDP (Session Description Protocol)에 대한 직접 링크" title="SDP (Session Description Protocol)에 대한 직접 링크">​</a></h4>
<p>발신자와 수신자는 모두 <strong>클라이언트</strong>이므로 통신 환경이 다른 경우가 대부분이다. 따라서 SDP를 통해 서로의 <strong>미디어 능력</strong> 및 <strong>연결 정보</strong>를 공유해야 한다.</p>
<p>SDP에는 오디오 및 비디오 코덱, 미디어 스트림의 방향, RTP(Real-time Transport Protocol) 엔드포인트 정보가 포함된다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="ice-interactive-connectivity-establishment">ICE (Interactive Connectivity Establishment)<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ice-interactive-connectivity-establishment" class="hash-link" aria-label="ICE (Interactive Connectivity Establishment)에 대한 직접 링크" title="ICE (Interactive Connectivity Establishment)에 대한 직접 링크">​</a></h4>
<p>일반적으로 발신자와 수신자는 <strong>서로 다른 네트워크</strong>를 사용하게 된다. 하지만 발신자에서 수신자로, 수신자에서 발신자로 가는 네트워크 경로는 다양하므로 다른 네트워크에 속한 클라이언트 간 통신 구현은 어렵다. ICE는 발신자 또는 수신자 입장에서 <strong>내게 오는 길</strong>을 알려준다.</p>
<p>ICE Candidate는 다음 내용을 포함한다. IP 주소, 포트 번호, 프로토콜(UDP 또는 TCP), Candidate 유형(host, srflx, prflx, relay 등 포함)</p>
<p>각 피어는 <strong>자신의 모든 후보를 수집</strong>한 후 이를 다른 피어와 교환한다. 양쪽 피어는 <strong>가능한 모든 후보 조합</strong>에 대해 연결성 검사를 수행하며 <strong>가장 높은 우선순위</strong>를 가진 후보 조합이 선택되어 미디어 통신에 사용된다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="websocket">WebSocket<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#websocket" class="hash-link" aria-label="WebSocket에 대한 직접 링크" title="WebSocket에 대한 직접 링크">​</a></h4>
<p>WebRTC에서 WebSocket이 반드시 필요하지는 않지만, <strong>실시간 양방향 통신</strong>에서의 이점 때문에 많이 활용된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webrtc-관련-flutter-패키지">WebRTC 관련 Flutter 패키지<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#webrtc-%EA%B4%80%EB%A0%A8-flutter-%ED%8C%A8%ED%82%A4%EC%A7%80" class="hash-link" aria-label="WebRTC 관련 Flutter 패키지에 대한 직접 링크" title="WebRTC 관련 Flutter 패키지에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="flutter_webrtc">flutter_webrtc<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter_webrtc" class="hash-link" aria-label="flutter_webrtc에 대한 직접 링크" title="flutter_webrtc에 대한 직접 링크">​</a></h4>
<p>Flutter에서 WebRTC 기능을 이용하기 위한 패키지로 기본적으로는 iOS, Android 등 다양한 플랫폼을 위해 제공되는 WebRTC 공식 <strong>네이티브 패키지</strong>를 <strong>메서드 채널</strong>로 묶어 놓은 구조이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="web_socket_channel">web_socket_channel<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#web_socket_channel" class="hash-link" aria-label="web_socket_channel에 대한 직접 링크" title="web_socket_channel에 대한 직접 링크">​</a></h4>
<p>Dart/Flutter에서 WebSocket 관련 기능을 제공한다. Web API에 비해 아직은 일부 기능을 지원하지 못하는 등 조금 미흡하다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="flutter_callkeep">flutter_callkeep<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter_callkeep" class="hash-link" aria-label="flutter_callkeep에 대한 직접 링크" title="flutter_callkeep에 대한 직접 링크">​</a></h4>
<p>Flutter에서 전화 수신 및 발신 UI를 처리하는 기능을 제공해준다. iOS는 CallKit을 사용하며, Android는 자체 UI를 띄워준다. iOS CallKit 구현을 위해서는 별도로 VoIP Push 구현이 필요하다</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webrtc--websocket-동작흐름">WebRTC &amp; WebSocket 동작흐름<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#webrtc--websocket-%EB%8F%99%EC%9E%91%ED%9D%90%EB%A6%84" class="hash-link" aria-label="WebRTC &amp; WebSocket 동작흐름에 대한 직접 링크" title="WebRTC &amp; WebSocket 동작흐름에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="WebRTC and WebSocket flow" src="https://mooyeon-choi.github.io/assets/images/webrtc_and_websocket_1-08dc88c139152196fe4bb30c60967e60.png" width="924" height="471" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="WebRTC and WebSocket flow 2" src="https://mooyeon-choi.github.io/assets/images/webrtc_and_websocket_2-9926859faf23275c41cd51017e986b1e.png" width="907" height="429" class="img_ev3q"></p>
<p>WebSocket이 연결되면 WebSocket을 통해 connect 데이터가 전송된다. (발신자, 수신자 모두)</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "type": "connect",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "callId": "string"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>connect 수신 시 발신자와 수신자는 다음 동작을 수행한다.</p>
<ol>
<li>RTCPeerConnection 객체 초기화</li>
<li>onIceCandidate 이벤트 리스너 추가(ice-candidate 전송)</li>
<li>onAddStream 이벤트 리스너 추가(Remote Stream 초기화, Remote Renderer를 Remote Stream과 연결, Local Renderer를 Local Stream 과 연결)</li>
<li>Local Stream 초기화</li>
<li>수신자는 offer 생성 및 발신</li>
</ol>
<p>offer와 answer는 <strong>SDP</strong>를 교환하기 위해 이루어진다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="offer">offer<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#offer" class="hash-link" aria-label="offer에 대한 직접 링크" title="offer에 대한 직접 링크">​</a></h4>
<p>수신자는 connect를 받으면 offer를 보낸다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "type": "offer",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "sdp": "string",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "callID": "string",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "restart": "boolean"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="answer">answer<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#answer" class="hash-link" aria-label="answer에 대한 직접 링크" title="answer에 대한 직접 링크">​</a></h4>
<p>발신자는 offer를 받았을 때 answer를 보낸다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "type": "answer",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "sdp": "string",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "callId": "string"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>
<p>수신자의 offer 발신 동작</p>
<ol>
<li>offer 생성</li>
<li>RTCPearConnection 객체를 다음과 같이 설정 - Local Description: offer</li>
<li>발신자에게 offer 전송</li>
</ol>
</li>
<li>
<p>발신자의 offer 수신 &amp; answer 발신 동작</p>
<ol>
<li>RTCPeerConnection 객체를 다음과 같이 설정 - Remote Description: offer</li>
<li>sdp 기반 answer 생성</li>
<li>RTCPeerConnection 객체를 다음과 같이 설정 - Local Description: answer</li>
<li>수신자에게 answer 전송</li>
<li>통화 시작을 위한 UI 처리</li>
</ol>
</li>
<li>
<p>수신자의 answer 수신 동작</p>
<ol>
<li>RTCPeerConnection 객체를 다음과 같이 설정 - Remote Description: answer</li>
<li>통화 시작을 위한 UI 처리</li>
</ol>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="ice-candidate">ice-candidate<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#ice-candidate" class="hash-link" aria-label="ice-candidate에 대한 직접 링�크" title="ice-candidate에 대한 직접 링크">​</a></h4>
<p>ICE Candidate를 수신하고 RTCPeerConnection 객체에 ICE Candidate를 <strong>모두 추가</strong></p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "type": "ice-candidate",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "candidate": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "candidate": "string",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "sdpMid": "string",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "sdpMLineIndex": "int"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "callId": "string"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>offer-answer 교환이 끝나기 전에 ICE Candidate 교환이 먼저 일어나는 경우도 있다. 이때는 <strong>별도의 리스트</strong>에 ICE Candidate를 모두 저장해 뒀다가 offer-answer가 발생 했을 때 <strong>Peer Connection</strong>에 ICE Candidate를 추가해주면 된다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="leave">leave<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#leave" class="hash-link" aria-label="leave에 대한 직접 링크" title="leave에 대한 직접 링크">​</a></h4>
<p>통화를 종료하기 위해 이루어진다. 수신자와 발신자 중 어느 한 쪽이 leaave를 전송하면 즉시 <strong>통화 종료</strong> 된다.(서로 leave를 교환할 필요가 없다.)</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "type": "leave",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "callId": "string"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-webrtc를-위한-팁">Flutter WebRTC를 위한 팁<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-webrtc%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%81" class="hash-link" aria-label="Flutter WebRTC를 위한 팁에 대한 직접 링크" title="Flutter WebRTC를 위한 팁에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="수신자의-응답-이전-발신자의-통화-종료">수신자의 응답 이전 발신자의 통화 종료<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%88%98%EC%8B%A0%EC%9E%90%EC%9D%98-%EC%9D%91%EB%8B%B5-%EC%9D%B4%EC%A0%84-%EB%B0%9C%EC%8B%A0%EC%9E%90%EC%9D%98-%ED%86%B5%ED%99%94-%EC%A2%85%EB%A3%8C" class="hash-link" aria-label="수신자의 응답 이전 발신자의 통화 종료에 대한 직접 링크" title="수신자의 응답 이전 발신자의 통화 종료에 대한 직접 링크">​</a></h4>
<p>서버에서 수신자에게 <code>"HUNGUP"</code> Push 알림을 보내 전화 수신 화면, 소리, 진동이 뜨지 않도록 해야한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="수신자의-통화-거절">수신자의 통화 거절<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%88%98%EC%8B%A0%EC%9E%90%EC%9D%98-%ED%86%B5%ED%99%94-%EA%B1%B0%EC%A0%88" class="hash-link" aria-label="수신자의 통화 거절에 대한 직접 링크" title="수신자의 통화 거절에 대한 직접 링크">​</a></h4>
<p>서버에서 발신자에게 <code>"REJECTED"</code> Push 알림을 보내 video 화면에서 빠져나오도록 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="수신자가-여러-기기-중-하나의-기기에서-응답">수신자가 여러 기기 중 하나의 기기에서 응답<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%88%98%EC%8B%A0%EC%9E%90%EA%B0%80-%EC%97%AC%EB%9F%AC-%EA%B8%B0%EA%B8%B0-%EC%A4%91-%ED%95%98%EB%82%98%EC%9D%98-%EA%B8%B0%EA%B8%B0%EC%97%90%EC%84%9C-%EC%9D%91%EB%8B%B5" class="hash-link" aria-label="수신자가 여러 기기 중 하나의 기기에서 응답에 대한 직접 링크" title="수신자가 여러 기기 중 하나의 기기에서 응답에 대한 직접 링크">​</a></h4>
<p>서버에서 수신자의 다른 기기들에 <code>"RESPONDED"</code> Push 알림을 보내 전화 수신 화면, 소리, 진동이 뜨지 않도록 해야한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="통화-종료">통화 종료<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%86%B5%ED%99%94-%EC%A2%85%EB%A3%8C" class="hash-link" aria-label="통화 종료에 대한 직접 링크" title="통화 종료에 대한 직접 링크">​</a></h4>
<p>통화 종료 시에는, 한쪽이 <code>"leave"</code> 메시지를 상대편에 보내면 둘다 종료된다.
하지만 여러가지 이유로 이 동작이 정상적으로 진행되지 못하는 경우가 있는데, 이때는 signaling 서버에서 <code>"leave"</code> 메시지를 디바이스에 보내서 종료하도록 한다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shorebird-작동-방식">ShoreBird 작동 방식<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#shorebird-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D" class="hash-link" aria-label="ShoreBird 작동 방식에 대한 직접 링크" title="ShoreBird 작동 방식에 대한 직접 링크">​</a></h2>
<p>멀티 플랫폼 모바일 애플리케이션 개발을 위해 많이 사용되는 프레임워크 하면 ReactNative, Flutter 와 같은 프레임워크들이 생각날 것이다. RN(ReactNative) 하면 여러 기능중 단연 <strong>Code Push</strong> 를 먼저 떠올릴 수 있는데, <code>Flutter</code> 에서 <code>Code push</code> 를 적용하기 위해 만들어진 서비스인 <code>Shorebird</code>에 대해 알아보자.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="code-push란">Code push란?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#code-push%EB%9E%80" class="hash-link" aria-label="Code push란?에 대한 직접 링크" title="Code push란?에 대한 직접 링크">​</a></h3>
<ul>
<li>
<p>코드 수정 시 디바이스에서 업데이트를 하지 않아도 지속적으로 사용자가 변경사항을 가져올 수 있다</p>
</li>
<li>
<p>대부분의 큰 애플리케이션들은 <code>Code push</code>를 사용중이다.</p>
<ul>
<li><em>Large install base = long store update time</em> 이므로</li>
</ul>
</li>
<li>
<p>비즈니스에서 현실적인 문제들</p>
<ul>
<li>Downtime = lost revenue</li>
<li>Code push = insurance you can fix things quickly if they go wrong</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="풍성한-디자인-요청사항에-대응하기">풍성한 디자인 요청사항에 대응하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%92%8D%EC%84%B1%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9A%94%EC%B2%AD%EC%82%AC%ED%95%AD%EC%97%90-%EB%8C%80%EC%9D%91%ED%95%98%EA%B8%B0" class="hash-link" aria-label="풍성한 디자인 요청사항에 대응하기에 대한 직접 링크" title="풍성한 디자인 요청사항에 대응하기에 대한 직접 링크">​</a></h2>
<p>LINE 2년차 주니어 개발자로 일하면서 플러터를 사용하여 여러 디자인 요구사항들을 해결한 경험들을 공유한 시간이었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="custompaint를-활용한-container">CustomPaint를 활용한 Container<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#custompaint%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-container" class="hash-link" aria-label="CustomPaint를 활용한 Container에 대한 직접 링크" title="CustomPaint를 활용한 Container에 대한 직접 링크">​</a></h3>
<p>다양한 모양의 컨테이너를 생성하기 위해 CustomPaint를 사용하여 오각형의 도형을 만들며 동적으로 수정할 수 있도록 변경한 방법들에 대해 공유해주셨다.</p>
<p><code>CustomPaint</code> 의 경우 Flutter 에서 매우 중요하게 활용된다. 특히 Interactive 한 화면을 디자인하기 위해 Animation 효과를 적용할 때 Svg 파일을 CustomPaint로 변환하면서 특히 많이 활용이 되는데, 현재 회사에서 apple의 <a href="https://developer.apple.com/sf-symbols/" target="_blank" rel="noopener noreferrer">SF Symbols</a>와 유사하게 아이콘들을 커스텀 가능하게 수정하는 작업을 하며 보고있던 부분이라 반가운 주제였다.</p>
<p>발표내용은 간단한 path 를 생성하는 방법을 공유해주는 조금 쉬운 내용이었지만, <code>Flutter</code>를 처음 접하며 겪었던 고민들과 같은 고민을 해봤던 개발자 동료를 만나 반가웠다.</p>
<p>추가로 <code>CustomPaint</code> 의 경우 <code>Flutter</code> 팀에서 <code>SVG</code> 를 대체하기 위해 최적화를 신경써서 좋은 성능으로 화면에 아이콘이나 벡터이미지를 생성할 수 있게 해주었는데, 이와 관련하여 <a href="https://www.youtube.com/watch?v=w9lD35D78N8" target="_blank" rel="noopener noreferrer">Youtube</a>에서 설명한 내용도 참고하자</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="loading-skeleton">Loading Skeleton<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#loading-skeleton" class="hash-link" aria-label="Loading Skeleton에 대한 직접 링크" title="Loading Skeleton에 대한 직접 링크">​</a></h3>
<p>최근 로딩화면을 단순히 Circular Loader로 구현하지 않고 사용자로 하여금 어떤 자료들이 보여질지 예측이 가능하도록 디자인하는 Skeleton Design을 많이 적용하고 있는 것으로 알고있다. 현재 회사에서도 이러한 점 때문에 팀원분들과 디자이너분께 강력하게 어필하여 Loading Skeleton을 모두 적용하였었는데, 마찬가지로 적용했던 내용과 같은 것을 듣게되어 놀랐다.</p>
<p>발표 내용은 두개의 컨테이너를 교차하여 빛반사가 움직이는 효과를 적용한 과정에 대해 간략하게 설명해 주셨고 <code>Shimmer</code> 라는 Package를 사용하면 보다 간편하게 적용할 수 있음을 공유해주셨다.</p>
<p>하지만, 두개의 컨테이너를 교차하지 않아도 CustomPaint를 활용하면 같은 효과를 낼 수 있다. Gradient 범위를 설정해주면 범위 밖의 색상은 가장 바깥에 설정해준 색상으로 표시되기 때문에 동일한 효과를 낼 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customscrollview--dropdown">CustomScrollView + Dropdown<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#customscrollview--dropdown" class="hash-link" aria-label="CustomScrollView + Dropdown에 대한 직접 링크" title="CustomScrollView + Dropdown에 대한 직접 링크">​</a></h3>
<p>마지막 발표내용까지도 이전에 Help 페이지를 적용하며 구현했던 Scroller 의 위치를 가져와 UI에 적용하는, 이번 회사에 들어오고 한달동안 뜯어 고쳤던 UI들에 대한 내용들이 모두 나와서 깜짝 놀랐다.. 역시 어느회사나 하는 일들은 비슷한 것 같다.</p>
<p>발표자분의 경우 화면 스크롤 시 CustomScrollView 위에 표시해준 Overlay가 화면이 스크롤될 때 같이 올라가는 문제가 있었고 이를 Scrollbar offset을 가져와 높이를 계속 추가해주어 해결한 내용에 대해 공유해 주었다.</p>
<p>이 부분에 있어서도 <code>Flutter</code> 의 Overlay 위젯을 활용하면 <code>Main</code> 위젯을 부모요소로 가지므로 해결가능한 문제였지만, 스크롤바의 offset을 가져와서 다양한 Interaction을 구현하는 방식은 많이 활용되므로 어떻게 코드를 작성하였는지 흥미롭게 들었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="디자이너와-소통하기">디자이너와 소통하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%94%94%EC%9E%90%EC%9D%B4%EB%84%88%EC%99%80-%EC%86%8C%ED%86%B5%ED%95%98%EA%B8%B0" class="hash-link" aria-label="디자이너와 소통하기에 대한 직접 링크" title="디자이너와 소통하기에 대한 직접 링크">​</a></h3>
<p>디자이너분들과 메신저를 통해서 소통한 방법들과 내용들에 대해 공유해주셨다. 명확하게 의견을 주고받을 수 있도록 다양한 방법을 제공해주셨는데 해당 방법들은 다음과 같다.</p>
<ul>
<li>내가 이해한 바를 정확하게 공유하기</li>
<li>질문할 때는 이해가 쉽게 시각 자료를 첨부하기</li>
<li>선택이 필요할 때는 가능한 옵션을 먼저 제공하기</li>
<li>디자이너의 의도와 동일하게 구현하기 위해 최선을 다하기</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="플러터-렌더링-해부학">플러터 렌더링 해부학<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%ED%94%8C%EB%9F%AC%ED%84%B0-%EB%A0%8C%EB%8D%94%EB%A7%81-%ED%95%B4%EB%B6%80%ED%95%99" class="hash-link" aria-label="플러터 렌더링 해부학에 대한 직접 링크" title="플러터 렌더링 해부학에 대한 직접 링크">​</a></h2>
<p>Flutter Seoul의 오거나이저로 활동 중이신 에이든님의 발표로 플로터 위젯이 화면에 표시될 때 어떠한 방식으로 렌더링이 되는지, Dart 코드를 뜯어보며 확인해보도록 자료를 준비해주셨다. 에이든님의 경우 Flutter 월간 세미나에서도 Flutter Web의 Image 렌더링에 대한 발표를 들었었는데, 두 내용 모두 찾아보기 귀찮고 생각만해도 피곤한 내용들을 꼼꼼히 잘 설명해주셔서 많은 도움이 되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="랜더링-과정">랜더링 과정<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%9E%9C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95" class="hash-link" aria-label="랜더링 과정에 대한 직접 링크" title="랜더링 과정에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="widget">Widget<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#widget" class="hash-link" aria-label="Widget에 대한 직접 링크" title="Widget에 대한 직접 링크">​</a></h4>
<p>위젯은 플러터를 시작할 때 가장 먼저 접하는 클래스이자, 개발 과정에서 가장 자주 사용하는 클래스이다. 플러터 개발자에게 있어 위젯은 앱 개발의 가장 핵심적인 요소라고 할 수 있을 것이다.</p>
<p>플러터 공식 문서를 보면 <strong>Widget</strong>은 <code>"Describes the configuration for an Element"</code> "Widget은 Element의 구성을 표현하는 객체" 라고 설명한다. 하지만 플러터 개발자들 사이에 위젯에 대한 설명으로 이보다 더 널리 알려진 설명이 있는데 바로 <code>"In Flutter, almost everything is a widget"</code>이다. 여기서 흥미로운 점은 <code>'almost everything'</code> '거의 모든 것'이라는 표현인데 위젯을 **'거의 모든 것'**이라 설명하는 이유는 무엇일까? 또 그렇다면 거의 모든 것에 포함되지 않는 것들은 어떤 것들이 있을까</p>
<p>**'Almost everything'**인 Widget 너머, 화면을 그리는 자세한 과정을 살펴보며 이를 알아보자</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="coloredbox">ColoredBox<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#coloredbox" class="hash-link" aria-label="ColoredBox에 대한 직접 링크" title="ColoredBox에 대한 직접 링크">​</a></h4>
<p>화면에 색을 칠하는 간단한 프로젝트를 구현하려 한다. 색을 칠하는데 흔히 사용되는 <code>Container</code>가 아닌 <code>ColoredBox</code>위젯을 사용하여 이를 구현해보자.</p>
<p>아래는 <code>ColoredBox</code> 위젯을 이용해 사각형의 Box 공간을 녹색으로 칠하는 간단한 코드이다. 렌더링 과정을 살펴보기 위해 <code>MaterialApp</code>이나 <code>Scafford</code>를 사용하지 않고 위젯트리를 간단히 구성하였다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">ColoredBox</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:flutter/material.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">runApp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">ColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      color</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Colors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">green</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" alt="ColoredBox" src="https://mooyeon-choi.github.io/assets/images/flutter_rendering_1-44c8585ca13aec3e7c7478b7958eb4f3.png" width="855" height="482" class="img_ev3q"></p>
<p>ColoredBox 위젯의 생성자로 녹색을 전달했기 때문에 실행하면 녹색으로 가득찬 화면을 볼 수 있을 것이다.</p>
<p>widget에 대한 설명을 다시 한번 떠올려보자 <code>"Describes the configuration for an Element"</code>, Widget은 Element의 구성을 표현하는 객체일 뿐이다.</p>
<p>다음으로 Widget인 ColoredBox가 Element를 어떻게 구성하는지, ColoredBox를 뜯어보며 확인해보자</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">ColoredBox</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ColoredBox</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">SingleChildrenderObjectWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderObject</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_RenderColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SingleChildRenderObjectWidget</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">RenderObjectWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">SingleChildRenderObjectElement</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">SingleChildRenderObjectElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RenderObjectWidget</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Widget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 코드를 통해 <code>ColoredBox</code> 위젯을 확인해보면 <code>ColoredBox</code> 위젯은 <code>SingleChildRenderObjectWidget</code>을 확장하고 있다. 또 <code>SingleChildRenderObjectWidget</code>은 <code>RenderObjectWidget</code>을 확장하고 있고, <code>RenderObjectWidget</code>은 <code>Widget</code>을 확장하고 있다. 이러한 클래스 계층을 따라가보면 알 수 있듯 <code>ColoredBox</code>는 <code>Widget</code>의 구현체이다.</p>
<p>이를 표로 그려보면 다음과 같이 표현할 수 있다.</p>
<p><img decoding="async" loading="lazy" alt="ColoredBox Diagram" src="https://mooyeon-choi.github.io/assets/images/flutter_rendering_2-25b4b507d352fd0fa7c2711f9b156550.png" width="825" height="464" class="img_ev3q"></p>
<p><code>ColoredBox</code>가 렌더링되는 자세한 과정을 살펴보려면 <code>RenderObject</code>를 반환하는 <code>createRenderObject</code>와 <code>SingleChildRenderObjectElement</code>를 반환하는 <code>createElement</code>를 살펴봐야한다.</p>
<p>아직은 두 메소드가 어떻게 호출되는지 알기 어렵겠지만, 이 내용을 모두 본 후에는 두 메소드가 렌더링에 어떻게 관여하는지 모두 알게될테니 지금은 <code>createRenderObject</code>와 <code>createElement</code>를 <code>Widget</code>에서 오버라이드하고 있다는 사실만 기억한체 넘어가자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="element">Element<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#element" class="hash-link" aria-label="Element에 대한 직접 링크" title="Element에 대한 직접 링크">​</a></h4>
<p>이번에는 <code>SingleChildRenderObjectWidget</code>이 오버라이드하고 있는 <code>createElement</code>가 생성하는 <code>Element</code>에 대해 살펴보자.</p>
<p>플러터 공식문서를 보면 <code>Element</code> 클래스에 대해 이렇게 설명한다. <code>"an instantiation of Widget at a particular location in the tree"</code>, <code>Element</code>는 트리의 특정 위치에 있는 위젯을 인스턴스이다.</p>
<p><code>Element</code>의 동작을 확인하기 위해 <code>SingleChildRenderObjectWidget</code>의 클래스 계층 구조를 살펴보자.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">SingleChildRenderObjectWidget</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SingleChildRenderObjectWidget</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">RenderObjectWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">SingleChildRenderObjectElement</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">SingleChildRenderObjectElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SingleChildRenderObjectElement</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">RenderObjectElement</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RenderObjectElement</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderObject</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> _renderObject</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Element</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _renderObject </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget </span><span class="token operator" style="color:#393A34">as</span><span class="token plain"> </span><span class="token class-name">RenderObjectWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">attachRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">performRebuilde</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">DiagnosticableTree</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">BuildContext</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Widget</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> _widget</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>앞서 <code>ColoredBox</code> Widget이 확장한 <code>SingleChildRenderObjectWidget</code>은 <code>createElement</code> 메소드를 통해서 <code>SingleChildRenderObjectElement</code>를 생성하는걸 살펴보았다. <code>SingleChildRenderObjectElement</code>는 <code>RenderObjectElement</code>를 확장하고 있고, <code>RenderObjectElement</code>는 <code>Element</code>를 확장하고 있다.</p>
<p><code>Element</code>는 <code>BuildContext</code>를 구현한 추상클래스로 <code>Widget</code>을 프로퍼티로 들고, 필요한 시점에 <code>build</code> 메소드를 호출하게 된다. 이를 표에 추가하면 다음과 같이 표현할 수 있다.</p>
<p><img decoding="async" loading="lazy" alt="Widget Diagram" src="https://mooyeon-choi.github.io/assets/images/flutter_rendering_3-8d51bff35c523ec83d1684e36b769cb9.png" width="840" height="474" class="img_ev3q"></p>
<p><code>Element</code> 클래스의 계층 중 렌더링과 관련해서 주의깊게 살펴볼 부분은 <code>RenderObjectElement</code> 클래스의 <code>RenderObject</code> 프로퍼티와 <code>mount</code> 메소드이다.</p>
<p><code>mount</code>가 호출되면 <code>Widget</code>의 <code>createRenderObject</code> 메소드를 호출해 화면을 그리는데 직접적으로 사용될 <code>RenderObject</code>를 생성한다. 생성된 <code>RenderObject</code>는 <code>attachRenderObject</code>에 전달해 렌더오브젝트의 트리를 구성한다. 그렇다면 이 <code>mount</code> 메소드는 어떻게 호출되는 걸까?</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="runapp">runApp<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#runapp" class="hash-link" aria-label="runApp에 대한 직접 링크" title="runApp에 대한 직접 링크">​</a></h4>
<p><code>mount</code>가 호출되는 과정을 살펴보려면 먼저, Widget 만큼 익숙한 <code>runApp</code> 함수를 살펴봐야한다. 플러터 프로젝트를 생성하면 <code>main</code> 함수에서 <code>runApp</code> 함수를 호출하는 코드가 생성되는데, 이 <code>runApp</code>을 따라가면 <code>mount</code>에 다다를 수 있다.</p>
<p>플러터 공식 문서에서는 <code>runApp</code> 함수에 대해 이렇게 이야기한다. <code>"Inflate the given widget and attach it to the view"</code> <code>runApp</code> 함수는 함수의 인자로 전달한 위젯을 <code>inflate</code>하고 <code>view</code>에 추가한다. 그렇다면 <code>Widget</code>을 어떻게 <code>inflate</code>하고, <code>view</code>에 추가하는지 <code>runApp</code> 함수의 내부 동작을 뜯어보며 확인해보자.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">runApp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">runApp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Widget</span><span class="token plain"> app</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">WidgetsBinding</span><span class="token plain"> binding </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ensureInitialized</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">_runWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">binding</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">wrapWithDefaultView</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> binding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'runApp'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mixin</span><span class="token plain"> </span><span class="token class-name">WidgetsBinding</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token class-name">BindingBase</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ServicesBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SchedulerBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">GestureBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RendererBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SemanticsBinding</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Widget</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">wrapWithDefaultView</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Widget</span><span class="token plain"> rootWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      view</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> platformDispatcher</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">implicitView</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      deprecatedDoNotUseWillBeRemovedWithoutNoticePipelineOwner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pipelineOwner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      deprecatedDoNotUseWillBeRemovedWithoutNoticeRenderViw</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> renderView</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      child</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> rootWidget</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>runApp</code> 함수의 내부에서는 <code>WidgetsFlutterBinding</code>의 <code>ensureInitialized</code>를 호출하여 플러터 어플리케이션 동작을 위한 초기화를 한다. <code>ensureInitialized</code>가 반환한 <code>WidgetsBinding</code>객체의 <code>wrapWithDefaultView</code> 메소드를 호출하면 <code>runApp</code> 함수에 전달된 위젯이 <code>View</code>의 <code>child</code>로 추가되는데 이를 통해 <code>wrapWithDefaultView</code>가 view에 위젯을 추가하는 역하를 하는 것을 알 수 있다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_runWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Widget</span><span class="token plain"> app</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">WidgetsBinding</span><span class="token plain"> binding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> debugEntryPoint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  binding</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">scheduleAttachRootWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이번에는 <code>"Inflate the ginen widget"</code>를 확인해보자 <code>runApp</code> 함수는 <code>private</code> 함수인 <code>_runWidget</code> 함수의 <code>scheduleAttachRootWidget</code>을 호출하며
<code>wrapWithDefaultView</code>가 생성한 view를 전달한다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">mixin</span><span class="token plain"> </span><span class="token class-name">WidgetsBinding</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token class-name">BindingBase</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ServicesBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ScheduleBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">GestureBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RendererBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SementicsBinding</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token metadata function" style="color:#d73a49">@protect</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">scheduleAttachRootWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Widget</span><span class="token plain"> rootWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Timer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">attachRootWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rootWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>scheduleAttachRootWidget</code>은 <code>attachRootWidget</code>을 호출하고,</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">mixin</span><span class="token plain"> </span><span class="token class-name">WidgetsBinding</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token class-name">BindingBase</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ServicesBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ScheduleBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">GestureBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RendererBinding</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SementicsBinding</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">attachRootWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Widget</span><span class="token plain"> rootWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">attachToBuildOwner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">RootWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      debugShortDescription</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'[root]'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      child</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> rootWidget</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">attachToBuildOwner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">RootWidget</span><span class="token plain"> widget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _rootElement </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> widget</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">attach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buildOwner</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rootElement </span><span class="token operator" style="color:#393A34">as</span><span class="token plain"> </span><span class="token class-name">RootElement</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>attachRootWidget</code>은 <code>RootWidget</code>을 생성해 <code>attachToBuildOwner</code>에 전달한다. <code>attachToBuildOwner</code> 메소드에서는 인자로 전달된 <code>RootWidget</code>의 <code>attach</code>를 호출하는데, <code>attach</code>의 두 번째 인자에는 <code>rootElement</code>가 <code>null</code>인 상태로 호출된다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RootWidget</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Widget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RootElement</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">attach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildOwner</span><span class="token plain"> owner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token class-name">RootElement</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> element </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">element </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      owner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">lockState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        element </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        element</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">assignOwner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">owner</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      owner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">buildScope</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">element</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        element</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token comment" style="color:#999988;font-style:italic">/* parent */</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* slot */</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>RootWidget</code>의 <code>attach</code>에서는 <code>createElement</code>를 호출해 <code>RootElement</code>를 생성하고, 생성된 <code>RootElement</code>의 <code>mount</code>를 호출한다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RootElement</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token class-name">RootElementMixin</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Element</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">_rebuild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_rebuild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _child </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateChild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_child</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget </span><span class="token operator" style="color:#393A34">as</span><span class="token plain"> </span><span class="token class-name">RootWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* slot */</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">DiagnosticableTree</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">BuildContext</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Element</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateChild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Element</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> child</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Widget</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> newWidget</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> newChild </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">inflateWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newWidget</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> newChild</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>RootElement</code>의 <code>mount</code>는 <code>_rebuild</code>, <code>updateChild</code>를 거쳐 <code>inflateWidget</code>을 호출하는데 <code>runApp</code> 함수가 위젯을 <code>inflate</code>하는 역할을 <code>RootElement</code>에서 수행한다.</p>
<p>정리하자면 <code>runApp</code> 함수는 <code>RootWidget</code>, <code>RootElement</code>를 생성해 위젯트리와 엘리먼트 트리의 루트를 생성하고, <code>widget</code>의 <code>build</code> 메소드를 계층적으로 호출하기 위한 트리를 구성하는 역할을 한다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RenderObjectElement</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderObject</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> _renderObject</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Element</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">mount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _renderObject </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget </span><span class="token operator" style="color:#393A34">as</span><span class="token plain"> </span><span class="token class-name">RenderObjectWidget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">attachRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newSlot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">performRebuild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위젯이 계층적으로 생성되는 과정에서 렌더링에 관여하는 <code>RenderObjectElement</code>의 <code>mount</code>가 호출되는데 이때 렌더링에 사용되는 <code>RenderObject</code> 객체가 생성되고, 렌더트리에 추가되는 것이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="renderobject">RenderObject<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#renderobject" class="hash-link" aria-label="RenderObject에 대한 직접 링크" title="RenderObject에 대한 직접 링크">​</a></h4>
<p>렌더링에 직접적으로 관여하는 <code>RenderObject</code>에 도달하기까지 기나긴 여정이었다. 실제 렌더링은 비교적 단순하다. <code>RenderObject</code>는 공식 문서에서 <strong>렌더트리</strong>를 구성하는 오브젝트라 설명한다. 렌더트리를 구성하는 다양한 <code>RenderObject</code>가 렌더링을 처리하는 것이다. <code>RenderObject</code>는 직접적인 페인팅 외에도 레이아웃과 유저 입력에 대한 영역 검사, 접근성 등을 처리하는데, 이번 시간에는 <code>RenderObject</code>의 다양한 역할 중 페인팅에 대해 자세히 알아보자.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ColoredBox</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">SingleChildrenderObjectWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderObject</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_RenderColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _RenderColoredBox </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">RenderProxyBoxWithHitTestBehavior</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">_RenderColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> required </span><span class="token class-name">Color</span><span class="token plain"> color </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">behavior</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">HitTestBehavior</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">opaque</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">PaintingContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Offset</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">Size</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">zero</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">offset </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">paintChild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>다시 <code>ColoredBox</code> 위젯을 확인하자 <code>ColoredBox</code> 위젯의 <code>createRenderObject</code>에서는 <code>_RenderColoredBox</code>를 생성한다. <code>_RenderColoredBox</code> 클래스의 계층을 정리하면 <code>RenderProxyBoxWithHitTestBehavior</code>를 확장하고 있는걸 볼 수 있는데, <code>RenderProxyBox</code>, <code>RenderBox</code>를 거쳐 <code>RenderObject</code> 계층을 구성하는 것을 볼 수 있다.</p>
<p><img decoding="async" loading="lazy" alt="RenderObject diagram" src="https://mooyeon-choi.github.io/assets/images/flutter_rendering_4-c136bc14152917b1131200229229dd32.png" width="884" height="489" class="img_ev3q"></p>
<p>이로써 드디어 <code>Widget</code>, <code>Element</code>, <code>RenderObject</code>의 계층과 의존 관계가 완성되었다.</p>
<p><code>Widget</code>, <code>Element</code>, <code>RenderObject</code>를 거치는 과정을 통해 최종적으로 페인팅 될 때는 <code>RenderObject</code>의 <code>paint</code> 메소드가 호출된다. <code>paint</code> 메소드가 호출되면 메소드의 인자로 전달된 <code>PaintingContext</code>의 <code>canvas</code>로 <code>drawRect</code> 메소드를 호출한다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">base </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _NativeCanvas </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">NativeFieldWrapperClass1</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">Canvas</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Rect</span><span class="token plain"> rect</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token plain"> paint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">_drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">bottom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> paint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">_objects</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> paint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@Native</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Void</span><span class="token plain"> </span><span class="token class-name">Function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Pointer</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Double</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Handle</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">symbol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'Canvass::drawRect'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">external</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    double left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> double top</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> double right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> double bottom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Object</span><span class="token generics operator" style="color:#393A34">?</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> paintObjects</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ByteData</span><span class="token plain"> paintData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>canvas</code>는 <code>_NativeCanvas</code>의 객체로 <code>drawRect</code>를 따라가면 <code>c++</code>로 구현된 플러터 렌더일 엔진이 최종적으로 페인팅을 하며 길고 긴 렌더링 여정을 마치게 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="위젯-커스터마이징과-쉐이더를-활용한-렌더링">위젯 커스터마이징과 쉐이더를 활용한 렌더링<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%9C%84%EC%A0%AF-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%89%90%EC%9D%B4%EB%8D%94%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A0%8C%EB%8D%94%EB%A7%81" class="hash-link" aria-label="위젯 커스터마이징과 쉐이더를 활용한 렌더링에 대한 직접 링크" title="위젯 커스터마이징과 쉐이더를 활용한 렌더링에 대한 직접 링크">​</a></h3>
<p>이번에는 <code>ColoredBox</code>가 아닌 위젯을 커스터마이징과 쉐이더 2가지 방식을 활용해 화면을 녹색으로 칠하도록 만들며 앞서 살펴본 플러터 렌더링 과정을 되새겨보자.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="widget과-renderobject-커스터마이징">Widget과 RenderObject 커스터마이징<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#widget%EA%B3%BC-renderobject-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95" class="hash-link" aria-label="Widget과 RenderObject 커스터마이징에 대한 직접 링크" title="Widget과 RenderObject 커스터마이징에 대한 직접 링크">​</a></h4>
<p>자식 위젯을 가질 수 없는 간단한 위젯을 <code>Widget</code>과 <code>RenderObject</code>의 커스터마이징을 통해 구현해보자</p>
<p>먼저 <code>drawRect</code>로 주어진 영역과 색으로 화면을 칠하는 <code>RenderObject</code>를 구현해보자</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RenderNoChildColoredBox</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">RenderBox</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token plain"> _paint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Color</span><span class="token plain"> _color</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderNoChildColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">required </span><span class="token class-name">Color</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> _color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">color</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Color</span><span class="token plain"> newColor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_color </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> newColor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      _color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newColor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">markNeedsPaint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">PaintingContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Offset</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">offset </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> _paint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> _color</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>유저의 입력을 처리할 필요도 없고, 자식 위젯을 통해 자식 렌더오브젝트를 렌더링할 필요도 없기 때문에 단순히 자신의 위치와 크기만 계산해 렌더링하는 <code>RenderBox</code>를 확장해 <code>RenderNoChildColoredBox</code>라는 클래스를 선언하였다.</p>
<p><code>RenderNoChildColoredBox</code> 클래스는 색상을 생성자로 받아 프로퍼티를 초기화 한다. <code>color</code>에 대한 <code>setter</code>도 구현해 외부에서 전달된 <code>color</code> 값이 프로퍼디의 값과 같은지 검사한 후, 다른 경우에만 <code>repaint</code>를 위해 <code>markNeedsPaint</code> 메소드를 호출하도록 구현한다. 이는 플러터 렌더링 최적화의 핵심 매커니즘 중 하나이므로 <code>RenderObject</code>를 직접 확장할 때 <code>martNeedsPaint</code>가 불필요하게 호출되지 않도록 해야한다.</p>
<p><code>RenderNoChildColoredBox</code>가 위젯 트리에 <code>attach</code> 되거나 <code>markNeedsPaint</code>에 의해 <code>repaint</code>할 <code>render object</code>로 등록된다면 다음 프레임에 <code>paint</code> 메소드가 호출되는데, 앞서 살펴본 <code>ColoredBox</code>의 <code>paint</code>와 마찬가지로 <code>canvas</code>의 <code>drawRect</code> 메소드를 호출해 <code>offset</code>과 <code>size</code>, <code>color</code> 속성을 이용해 화면을 칠한다.</p>
<p>이제 <code>RenderNoChildColoredBox</code>를 렌더링에 사용하는 커스텀 <code>NoChildColoredBox</code> 위젯도 구현해보자.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">NoChildColoredBox</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">LeafRenderObjectWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Color</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">NoChildColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> required </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">RenderNoChildColoredBox</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">RenderNoChildColoredBox</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">color</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateRenderObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">RenderNoChildColoredBox</span><span class="token plain"> renderObject</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    renderObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>자식 위젯을 사용하지 않는 위젯을 만들기 위해 <code>SingleChildRenderObjectWidget</code> 대신 <code>LeafRenderObjectWidget</code>을 확장한 후, 화면에 칠할 <code>Color</code> 속성을 생성자로 전달 받는다.</p>
<p><code>createRenderObject</code>를 오버라이드해 렌더링에 사용할 <code>RenderObject</code>인 <code>RenderNoChildColoredBox</code>를 생성해 반환한다.</p>
<p><code>updateRenderObject</code> 메소드를 오버라이드하며, <code>updateRenderObject</code>의 두 번째 인자는 렌더링에 사용할 <code>RenderNoChildColoredBox</code> 타입으로 선언한다. 플러터는 widget이 <code>rebuild</code> 되어도 <code>Element</code> 트리에 대한 변경이 없다면 <code>RenderObject</code>를 재사용한다.</p>
<p>이렇게 만들어진 <code>NoChildcoloredBox</code> 위젯은 <code>ColoredBox</code> 위젯과 달리 자식 위젯에 레이아웃이나 유저 입력 처리를 위한 영역 검사 등을 할 필요가 없어 화면을 칠하는데 특화된 경량 위젯이 생성되는 것이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="custompaint와-custompainter-그리고-fragment-shader">CustomPaint와 CustomPainter 그리고 Fragment Shader<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#custompaint%EC%99%80-custompainter-%EA%B7%B8%EB%A6%AC%EA%B3%A0-fragment-shader" class="hash-link" aria-label="CustomPaint와 CustomPainter 그리고 Fragment Shader에 대한 직접 링크" title="CustomPaint와 CustomPainter 그리고 Fragment Shader에 대한 직접 링크">​</a></h4>
<p>다음으로 프래그먼트 쉐이더를 알아보자 프래그먼트 쉐이더는 <strong>GPU</strong>로 렌더링한다. 다음은 <strong>Nvidia</strong>가 2008년도에 <strong>Nvision</strong>이라는 행사에서 CPU와 GPU의 차이를 보여주기 위한 영상이다.</p>
<table><thead><tr><th>CPU</th><th>GPU</th></tr></thead><tbody><tr><td><img decoding="async" loading="lazy" alt="cpu rendering" src="https://mooyeon-choi.github.io/assets/images/cpu_image_rendering-1a69a1840a417ace828c3557d13301f3.gif" width="432" height="242" class="img_ev3q"></td><td><img decoding="async" loading="lazy" alt="gpu rendering" src="https://mooyeon-choi.github.io/assets/images/gpu_image_rendering-30a4ffd2c8aef2ce77f214ffe57714ec.gif" width="458" height="258" class="img_ev3q"></td></tr></tbody></table>
<p>영상에서 보는 방식을 프래그먼트 쉐이더의 동작방식을 잘 보여준다. 프래그먼트 쉐이더는 픽셀 쉐이더라 하는데, 화면을 구성하는 각 픽셀이 출력할 RGBA 값을 GPU를 통해 <strong>병렬</strong> 처리한다. 이러한 <code>FragmentShader</code>를 플러터에서는 <code>CustomPainter</code>로 간단히 활용할 수 있다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ShaderPainter</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">CustomPainter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Color</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">FragmentShader</span><span class="token plain"> shader</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token plain"> _paint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">ShaderPainter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">required </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> required </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shader</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Canvas</span><span class="token plain"> canvas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Size</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">red</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">green</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">blue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">drawRedt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fromLTWH</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">width</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      _paint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shader </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> shader</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  bool </span><span class="token function" style="color:#d73a49">shouldRepaint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">ShaderPainter</span><span class="token plain"> oldDelegate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    color </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> olddelegate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">color </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> shader </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> oldDelegate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shader</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>CustomPainter</code>를 확장해 <code>_ShaderPainter</code> 클래스를 선언한다. <code>Color</code>와 <code>FragmentShader</code>를 선언하고 생성자로 전달받아 초기화한다. <code>FragmentShader</code> 객체를 생성하는 과정은 잠시 뒤에 살펴보자.</p>
<p><code>CustomPainter</code>의 <code>paint</code> 메소드를 오버라이드 한다. <code>paint</code> 메소드에는 <code>FragmentShader</code>의 <code>setFloat</code> <code>0, 1, 2</code> 인덱스로 <code>color</code> 속성의 <code>red, green, blue</code> 값을 전달한다. 여기에서 사용된 인덱스는 <code>FragmentShader</code> 스크립트에 매핑될 값의 인덱스를 의미하는데 이 역시 잠시 후 <code>Fragment Shader</code> 스크립트를 자세히 살펴볼 때 알아보자.</p>
<p>이제 화면을 칠하기 위해 <code>paint</code> 메소드로 전달된 <code>canvas</code> 객체로 <code>drawRect</code> 메소드를 호출하고, <code>Paint</code> 객체의 <code>shader</code>에 화면을 칠할 때 사용할 <code>fragment shader</code> 객체를 전달한다.</p>
<p><code>shouldRepaint</code>도 오버라이드 한다. <code>CustomPainter</code> 사용 시 최적화를 위해 중요한 메소드로 <code>rebuild</code>에 의해 새롭게 생성된 <code>CustomPainter</code>의 속성과 <code>shouldRepaint</code>의 인자로 전달된 이전 <code>CustomPainter</code>의 속성을 비교해 상태가 변경된 경우에만 <code>repaint</code>가 되도록 이전 상태와 비교 후 <code>true</code> 혹은 <code>false</code>를 반환하도록 구현한다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">FutureBuilder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  future</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">FragmentProgram</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fromAsset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'assets/shaders/helloworld.frag'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  builder</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> snapshot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> fragmentProgram </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> snapshot</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fragmentProgram </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">CustomPaint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        painter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ShaderPainter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          color</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          shader</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> fragmentProgram</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fragmentShader</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">Center</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">CircularProgressIndicator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>CustomPainter</code>를 확장한 <code>ShaderPainter</code> 객체를 <code>CustomPaint</code>의 <code>painter</code>로 전달한다.</p>
<p><code>helloworld.frag</code>라는 쉐이더 파일을 <code>FragmentProgram.fromAsset</code>으로 쉐이더 파일을 비동기로 로드한 뒤, 로드가 완료되면 <code>fragmentShader</code> 메소드를 호출해 <code>fragmentProgram</code>으로 변환한 뒤 <code>ShaderPainter</code>에 전달한다.</p>
<p><code>helloworld.frag</code>를 살펴보자</p>
<div class="language-frag codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-frag codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#version 460 core                       // OpenGL 버전(4.6)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#include &lt;flutter/runtime_effect.glsl&gt;  // 플러터 사전 구현된 코드 추가</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">uniform float r;                        // 쉐이더 외부에 전달 받을 값</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">uniform float g;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">uniform float b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">out vec4 FragColor;                     // 쉐이더 출력값</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">void main() {                           // 프래그먼트 쉐이더 함수</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  FragColor = vec4(r, g, b, 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>```helloworld.frag<code>쉐이더는 확장자에서 알 수 있듯 프래그먼트 쉐이더이다. 프래그먼트 쉐이더 상단에는 **OpenGL** 버전을 명시하고</code>include<code>로 플러터 엔진에 사전 구현된 코드를 사용하기 위해 추가한다. </code>include`를 통해 다양한 픽셀 색상 연산에 다양한 유틸 함수나 상수를 사용할 수 있게된다.</p>
<p><code>uniform</code>으로 3개의 <code>float</code> 변수 <code>r, g, b</code>를 선언 했는데 <code>uniform</code>으로 변수를 선언하면 쉐이더 외부에서 인덱스를 통해 값을 전달할 수 있게된다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">paint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Canvas</span><span class="token plain"> canvas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Size</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">red</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">green</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  shader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFloat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> color</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">blue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toDouble</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">255</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">drawRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Rect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fromLTWH</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">width</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _paint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shader </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> shader</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>앞서 쉐이더를 사용한 <code>paint</code> 메소드에서 <code>setFloat</code>를 호출하며 <code>0, 1, 2</code> 인덱스와 함께 전달한 값이 프래그먼트 쉐이더의 <code>uniform</code> 변수에 전달되는 것이다.</p>
<p><code>out</code>으로 선언한 변수는 <code>uniform</code>과 반대로 출력값이며, <code>vec4</code>로 <code>rgba</code> 색상을 표현한다.</p>
<p><code>main</code>은 프래그먼트 쉐이더 함수의 진입점이다. <code>main</code> 함수에서는 <code>uniform</code>으로 전달된 값을 <code>vec4</code>에 담아 출력값을 만드는 간단한 쉐이더로 구성된 것을 볼 수 있다. 이상 단순히 외부에서 전달한 값을 출력값으로 만드는 예제였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="렌더링-최적화">렌더링 최적화<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94" class="hash-link" aria-label="렌더링 최적화에 대한 직접 링크" title="렌더링 최적화에 대한 직접 링크">​</a></h3>
<p><code>widget</code>, <code>element</code>, <code>renderobject</code>를 통해 랜더링되는 과정을 살펴보았고, <code>widget</code>과 <code>renderObject</code>를 커스터마이징해보기도 하고 custom paint, painter, fragment shader를 활용해 화면을 칠하는 방법을 살펴보았다.</p>
<p>플러터팀에서는 16ms 이내 build, 16ms paint를 처리하도록 가이드한다. 단일 위젯의 build와 paint가 아닌 한 프레임에 처리하는 모든 위젯과 렌더오브젝트의 build와 paint를 각 각 16ms에 처리해야한다는 것이다. 영상이나 게임, 모바일 운영체제의 fps가 60프레임을 지원하며 유저의 눈높이는 보다 높아졌다. 랙이 없는 부드러운 애니메이션을 위해서는 60fps를 유지해야하는데, 이를 위해서는 상태 변경에 따라 rebuild, repaint 되는 모든 위젯과 렌더오브젝트가 매 프레임마다 각 각 8ms 이내 처리되어야함을 의미한다.</p>
<p>8ms의 paint를 위해 <code>shouldRepaint</code>에서 화면을 다시 그릴지 여부를 반환하고 <code>markNeedsPaint</code>에서 화면을 다시 그리도록 예약하는 로직의 어떤 공통점이 렌더링을 최적화해줄까? 공통점은 단순하다 <strong>그리지 않기</strong> 컴포넌트를 분리하고 리빌드 되는 컴포넌트를 격리해 리빌드 되는 위젯을 최소화하고 위젯 트리에 단순하게 구성하고 필요에 따라 컴포지션이 아닌 위젯을 직접 만들고 렌더링 과정에서 살펴본 상태 비교 조건 처리 후 <code>repaint</code> 여부 검사를 하는 등의 모든 과정들이 모두 그리지 않기 위한 전략을 통해 최적화를 하고 있는 것 이다.</p>
<p>그리지 않는 단순한 전략을 기억하고, 우리 모두가 고품질의 렌더링을 제공하는 앱을 개발하는 플러터 전문가로 나아가자.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-web을-활용하여-제품-개발-환경-개선하기">Flutter web을 활용하여 제품 개발 환경 개선하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-web%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%9C%ED%92%88-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Flutter web을 활용하여 제품 개발 환경 개선하기에 대한 직접 링크" title="Flutter web을 활용하여 제품 개발 환경 개선하기에 대한 직접 링크">​</a></h2>
<p>라인 데마에칸 서비스를 플러터 환경으로 전환하며 겪었던 문제점들 중 테스트 환경과 관련하여 고민해본 내용을 공유해주었다. 동료들이 테스트 환경에 더 적극적으로 찹여할 수 있도록 하기위해 테스트 -&gt; 피드백 -&gt; 개선 사이클을 최소화 하기위한 방안을 고민하였으며, 이를 웹 배포를 통해 어떻게 해결하였는지 공유해주는 시간이었다.</p>
<p>이를 참고하여 Web FrontEnd에서 많이 활용중인 Storybook과 유사한 Widgetbook과 Static Web 사이트 배포를 통해 현재 회사에서도 테스트 환경을 개선하여 디자이너와 기획자 동료분들로 부터 지속적이고 즉각적인 피드백을 받을 수 있는 환경을 구성할 수 있는 계기가 되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="왜-flutter-web인가">왜 Flutter Web인가?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%99%9C-flutter-web%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="왜 Flutter Web인가?에 대한 직접 링크" title="왜 Flutter Web인가?에 대한 직접 링크">​</a></h3>
<p>테스트 환경을 제공해주기 위해서는 여러 방법이 있을 것이다. 기존에는 SDK 파일로 컴파일하여 실제 디바이스에 실행가능한 상태로 제공해주는 방법을 많이 활용하였다. 하지만 이렇게 제공해주게 된다면 사람들은 본능적으로 최대한 한번에 보여주기 위해 노력하므로, 기능들이 어느정도 누적되었을 때 공유하기를 원한다. 따라서 디자이너나 기획자가 수정사항을 확인할 때에도 너무 많은 기능들이 포함 되어있어, 꼼꼼하게 기능들을 모두 확인하기는 어렵다.</p>
<p>프로그래밍에 있어서도 이러한 문제점을 개선하기 위해 현재 많은 기업들에서 지속적인 배포를 지향하고 있다. 테스트에도 이러한 문제점을 개선하기 위해 지속적으로 테스트 환경을 업데이트해줄 필요가 있다.</p>
<p>이번 발표에서 말하는 Web 배포의 핵심 요소는 아래의 3가지이다.</p>
<ul>
<li>앱 제품 개선 과정 효율화</li>
<li>물리적 제약사항 극복</li>
<li>프로덕션 수준으로 서비스를 출시하려 노력하지 않아도 됨</li>
</ul>
<p>우선, 앱 제품을 개선하기 위해 의사소통 과정을 효율화 하여야 한다. 이는 처음에 말했듯 지속적 개발과 연관되어 있다. 다음으로는 물리적 제약사항을 극복하기 위함이다. 라인의 경우 일본, 동남아 등 여러 나라에서 기획자들과 디자이너들이 근무하고 있어 디바이스에 프로그램을 직접 배포하여 전달해주기에는 물리적으로 힘들다. 따라서 특정 디바이스가 필요 없는 웹을 통해 공유하는 방법을 생각했다. 마지막으로 테스트 환경은 실제 프로덕션 수준으로 서비스를 출시하지 않아도 된다. 테스트 환경은 말그대로 테스트를 위한 환경, 우리의 서비스가 정상적으로 동작하는지를 확인하기 위한 것으로 실제 서비스와 동일한 수준으로 만들지 않아도 된다. 이 부분을 핵심 요소로 꼽은 이유는 모바일 디바이스 환경과 Web 브라우저 환경의 차이 때문이다. 대표적으로 모바일 디바이스의 경우 세션 스토리지, 쿠키를 설정할 수 없으므로 모두 디바이스 로컬 메모리에 저장하거나 Secure memory에 저장해주게 된다. 이러한 코드를 웹에서 그대로 실행하려면 문제가 발생하므로 만약, 웹에서도 프로덕션 수준으로 배포를 하여야한다면 문제가 된다. 하지만 우리는 테스트 환경을 화면이 어떻게 구성되는지, 기능들이 정상적으로 상호작용 하는지만 보기 위함이므로 이러한 요소들은 우회하여도 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="web-빌드-및-배포-시도-사례">Web 빌드 및 배포 시도 사례<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#web-%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EB%8F%84-%EC%82%AC%EB%A1%80" class="hash-link" aria-label="Web 빌드 및 배포 시도 사례에 대한 직접 링크" title="Web 빌드 및 배포 시도 사례에 대한 직접 링크">​</a></h3>
<p>그렇다면 Web 빌드 시 발생하는 문제점들과 이를 해결하는 방법에는 어떤 것들이 있을까? 라인 데마에칸 시스템에서 실제로 시도한 과정에서 발생한 문제점들과 이를 해결한 방법들을 통해 대표적인 문제점들을 살펴보자</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unsupported-operation-platform_operatingsystem">Unsupported operation: Platform._operatingSystem<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#unsupported-operation-platform_operatingsystem" class="hash-link" aria-label="Unsupported operation: Platform._operatingSystem에 대한 직접 링크" title="Unsupported operation: Platform._operatingSystem에 대한 직접 링크">​</a></h4>
<p>플랫폼 분기를 위해 사용중인 <code>Platform.isAndroid, Platform.isIOS</code> 코드에서 발생하는 오류이다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Error: Unsupported operation: Platform._operatingSystem</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Andoid, iOS 등 멀티플랫폼 환경을 제공하는 서비스라면 플랫폼 분기가 반드시 필요하다. 하지만 이렇게 특정 플랫폼만을 위한 코드를 작성하게 되면 어떤 플랫폼에도 속하지 않는 웹 브라우저 환경에서는 에러가 발생한다. 이를 해결하기 위해 해당 팀에서는 <code>defaultTargetPlatform</code>을 활용하여 플랫폼 분기 코드에 대응하도록 수정하였다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:io'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:flutter/foundation.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">PlatformUtils</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> bool </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> isWeb </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> kIsWeb</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> bool </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> isAndroid </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> defaultTargetPlatform </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token class-name">TargetPlatform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">android</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> bool </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> isIOS </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> defaultTargetPlatForm </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token class-name">TargetPlatform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">iOS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> localeName </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> isWeb </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"ja_JP"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">localeName</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="as-is">AS-IS<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#as-is" class="hash-link" aria-label="AS-IS에 대한 직접 링크" title="AS-IS에 대한 ��직접 링크">​</a></h5>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">showInfoDialog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isIOS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">showActionSheet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">showSystemDialog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="to-be">TO-BE<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#to-be" class="hash-link" aria-label="TO-BE에 대한 직접 링크" title="TO-BE에 대한 직접 링크">​</a></h5>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">showInfoDialog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">PlatformUtils</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isIOS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">showActionSheet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">showSystemDialog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위와 같이 <code>PlatformUtils</code> 라는 클래스를 생성하여 <code>Platform</code>을 래핑하고 <code>DefaultPlatform</code>을 추가하여 <code>Platform</code>이 예상하는 값과 다를 때 처리하는 구문을 추가해주었다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="h3_flutter-package-update">h3_flutter package update<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#h3_flutter-package-update" class="hash-link" aria-label="h3_flutter package update에 대한 직접 링크" title="h3_flutter package update에 대한 직접 링크">​</a></h4>
<p>특정 패키지들의 경우 버전이나 종속성으로 인한 문제로 에러가 발생할 수 있을 것이다. 발표자료에서는 Uber에서 개발한 지구 계층을 육각형 그리드로 매핑해놓은 패키지에서 에러가 발생하여 설명해주었다.
h3_flutter 0.4.2를 사용할 때 에러가 발생하였고 0.6.6 버전 이후부터 웹을 지원하였지만 Android에서 빌드 오류가 발생하여 이슈 리포트를 통해 이를 수정하도록 요청하여 문제를 해결하였다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unsupported-operation-trying-to-use-the-default-webview">Unsupported operation: Trying to use the default webview<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#unsupported-operation-trying-to-use-the-default-webview" class="hash-link" aria-label="Unsupported operation: Trying to use the default webview에 대한 직접 링크" title="Unsupported operation: Trying to use the default webview에 대한 직접 링크">​</a></h4>
<p>개인정보 취급방침, 이용약관, 공지사항 등 WebView 화면에서 오류가 발생하였다. <code>webview_flutter: ^3.0.4</code> 를 사용 시 웹에서 빌드를 하면 에러가 발생한다. 이를 <code>webview_flutter_web: ^0.1.0+4</code>를 추가하여 해결하였다. 웹뷰 위젯 구현부를 <strong>조건부 임포트</strong>를 활용하여 실행가능한 패키지로 실행되도록 해준 것이다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:flutter/material.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:driver_app/ui/lib/widget/webview_app.dart'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dart</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">library</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">html</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:driver_app/ui/lib/widget/webview_web.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SimpleWebView</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">StatelessWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Widget</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">WebViewImpl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="flutter_secure_storage---domexception">flutter_secure_storage - DomException<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter_secure_storage---domexception" class="hash-link" aria-label="flutter_secure_storage - DomException에 대한 직접 링크" title="flutter_secure_storage - DomException에 대한 직접 링크">​</a></h4>
<p>데이터를 암호화하여 저장하기 위해 사용하는 패키지이다. 특정 데이터를 읽어오는 경우 <strong>DomException</strong>이 발생한다.</p>
<p>키가 <code>{category}::{keyName}</code> 형식인 경우 이슈가 발행하여 <code>{keyName}</code> 형식으로 수정해주면 해결된다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Encrypts and saves the [key] with the given [value].</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// If the key was aleady in the storage, its associated value is changed.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// If the value is null, deletes associated value for the given [key].</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics operator" style="color:#393A34">?</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  required </span><span class="token class-name">String</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  required </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> web</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">localStorage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression">options</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">[</span><span class="token string-literal interpolation expression">_publicKey</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">]</span><span class="token string-literal interpolation expression operator" style="color:#393A34">!</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">.</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">key</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_decryptValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="xmlhttprequest-error">XMLHttpRequest error<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#xmlhttprequest-error" class="hash-link" aria-label="XMLHttpRequest error에 대한 직접 링크" title="XMLHttpRequest error에 대한 직접 링크">​</a></h4>
<p>웹에서 API 통신을 시도할 경우 오류가 발생한다. <strong>CORS (Cross-Origin Resource Sharing) issue</strong></p>
<p><strong>로컬 개발 환경</strong>에서 chrome 실행 시 <code>--disable-web-security</code>를 설정하여 대응하였다.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="set---disable-web-security-options">Set <code>--disable-web-security</code> options<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#set---disable-web-security-options" class="hash-link" aria-label="set---disable-web-security-options에 대한 직접 링크" title="set---disable-web-security-options에 대한 직접 링크">​</a></h5>
<ol>
<li><code>flutter/bin/cache</code> 이동 후 <code>flutter_tools.stamp</code>를 제거한다.</li>
<li><code>flutter/package/flutter_tools/lib/src/web/chrome.dart</code> 파일을 연다.</li>
<li><code>--disable-web-security</code> 옵션을 추가한다.</li>
</ol>
<p><strong>로컬 개발 환경</strong>에서 chrome 실행 시 보안 설정을 수정한다. 실제 배포 환경에서 수정하지 않도록 주의 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="cross-origin-resource-sharing-cors">Cross-Origin Resource Sharing (CORS)<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#cross-origin-resource-sharing-cors" class="hash-link" aria-label="Cross-Origin Resource Sharing (CORS)에 대한 직접 링크" title="Cross-Origin Resource Sharing (CORS)에 대한 직접 링크">​</a></h4>
<p>Cross-Origin Resource Sharing (CORS) 란? <strong>브라우저</strong>가 <strong>자신의 출처(Origin)가 아닌 다른 출처로부터 자원 로드를 허용</strong>하도록 서버가 허가해주는 HTTP 헤더 기반의 메커니즘으로 출처가 다른 서버간의 리소스 공유를 허용하는 것이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Origin(출처)란?</div><div class="admonitionContent_BuS1"><p>URL (Uniform Resource Location) 구조에서 <strong>Protocol + Host + Port</strong> 부분을 의미한다.</p><p><code>https://future-flutter.dev:8080/sessions/detail?page=3#flutter_web</code></p><p><code>https://</code>: Protocol</p><p><code>future-flutter.dev</code>: Host</p><p><code>:8080</code>: Port</p><p><code>/sessions/detail</code>: Path</p><p><code>?page=3</code> Query String</p><p><code>#flutter_web</code>: Fragment</p></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="cors---flow-of-preflight-request-case">CORS - flow of preflight request case<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#cors---flow-of-preflight-request-case" class="hash-link" aria-label="CORS - flow of preflight request case에 대한 직접 링크" title="CORS - flow of preflight request case에 대한 직접 링크">​</a></h5>
<p><img decoding="async" loading="lazy" alt="CORS flow" src="https://mooyeon-choi.github.io/assets/images/flutter_web_1-3a5a752257a924b65aa0179a4098aa98.png" width="1207" height="433" class="img_ev3q"></p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="enabling---disable-web-secure">Enabling --disable-web-secure<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#enabling---disable-web-secure" class="hash-link" aria-label="Enabling --disable-web-secure에 대한 직접 링크" title="Enabling --disable-web-secure에 대한 직접 링크">​</a></h5>
<p><img decoding="async" loading="lazy" alt="Enabling" src="https://mooyeon-choi.github.io/assets/images/flutter_web_2-dd29c3588a210a53597bbba93fe16d57.png" width="1231" height="489" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tip-use-flutter_cors-tools">(Tip) use <code>flutter_cors</code> tools<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#tip-use-flutter_cors-tools" class="hash-link" aria-label="tip-use-flutter_cors-tools에 대한 직접 링크" title="tip-use-flutter_cors-tools에 대한 직접 링크">​</a></h4>
<p>여러 버전의 flutter SDK 를 사용할 경우 유용하다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// install 'flutter_cors'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ dart pub global activate flutter_cors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// disable chrome web security option</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ fluttercors -d -p {flutter_sdk_path}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// enable chrome web security option</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ fluttercors -e -p {flutter_sdk_path}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="permission-acquisition-scenario-reviewing">Permission acquisition scenario (reviewing)<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#permission-acquisition-scenario-reviewing" class="hash-link" aria-label="Permission acquisition scenario (reviewing)에 대한 직접 링크" title="Permission acquisition scenario (reviewing)에 대한 직접 링크">​</a></h4>
<p>권한획득 시나리오의 경우도 너무 복잡하여 웹에서 대응하기 어려웠다고 한다.</p>
<table><thead><tr><th>Android</th><th>iOS</th></tr></thead><tbody><tr><td><img decoding="async" loading="lazy" alt="Android Permission" src="https://mooyeon-choi.github.io/assets/images/flutter_web_3-9349b37fcb63a5de4cd58f57d1c6f630.png" width="567" height="322" class="img_ev3q"></td><td><img decoding="async" loading="lazy" alt="iOS Permission" src="https://mooyeon-choi.github.io/assets/images/flutter_web_4-3de01abe193a6d9e89e77494e7583bf3.png" width="568" height="324" class="img_ev3q"></td></tr></tbody></table>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="web-support-platform-not-available-reviewing">Web support platform not available (reviewing)<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#web-support-platform-not-available-reviewing" class="hash-link" aria-label="Web support platform not available (reviewing)에 대한 직접 링크" title="Web support platform not available (reviewing)에 대한 직접 링크">​</a></h4>
<p>웹을 미지원 하는 패키지로 인한 이슈도 있다.</p>
<p>해당 팀에서 개발 당시 기기 의존적인 기능들이 많았는데 당시에는 그러한 패키지들이 거의 없어 특히 <strong>웹에서 지도를 표현</strong> 하는 문제가 가장 컸다고 한다.</p>
<p>이러한 부분들은 최근 많은 패키지들이 웹에서도 지원되도록 개선되어 어느정도 해소되었다.</p>
<p><img decoding="async" loading="lazy" alt="Web Update" src="https://mooyeon-choi.github.io/assets/images/flutter_web_5-5f1df9dab8f1c7aec5a0da8cefd4f6b6.png" width="1201" height="510" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="드라이버-앱의-웹-시도-결과">드라이버 앱의 웹 시도 결과<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%95%B1%EC%9D%98-%EC%9B%B9-%EC%8B%9C%EB%8F%84-%EA%B2%B0%EA%B3%BC" class="hash-link" aria-label="드라이버 앱의 웹 시도 결과에 대한 직접 링크" title="드라이버 앱의 웹 시도 결과에 대한 직접 링크">​</a></h4>
<p>Flutter web 빌드 및 로컬 개발환경까지 준비가 되었지만 웹 환경에서 드라이버 앱을 사용 가능한 수준까지 진행하는 못하였다.</p>
<p>하지만 이 때의 경험을 살려 추후 Flutter Web 과제를 진행하는데 큰 도움이 되었다고 한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="두-번째-flutter-web-시도">두 번째 Flutter web 시도<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EB%91%90-%EB%B2%88%EC%A7%B8-flutter-web-%EC%8B%9C%EB%8F%84" class="hash-link" aria-label="두 번째 Flutter web 시도에 대한 직접 링크" title="두 번째 Flutter web 시도에 대한 직접 링크">​</a></h3>
<p>Recode &amp; UI/UX 리뉴얼 과제를 진행하며 다시 Flutter web을 시도하였다.</p>
<p>UI/UX를 리뉴얼 하는 과정에서 제품 개선과정의 동기화가 쉽지 않다고 느꼈는데 재택근무로 인한 물리적 제약사항, 기획자 및 관계자들을 위한 앱의 동작 테스트 수단 필요 등을 이유로 Flutter Web 활용을 다시 시도한다.</p>
<p>이전의 Flutter Web 시도 경험을 바탕으로 PoC를 진행하고 컨슈머 앱을 웹에서 확인 가능한 환경을 제공하여 앱 동작을 확인할 수 있는 수단을 제공하려 하였다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="consumerapp-웹-버전의-목표가-아닌-것">ConsumerApp 웹 버전의 목표가 아닌 것<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#consumerapp-%EC%9B%B9-%EB%B2%84%EC%A0%84%EC%9D%98-%EB%AA%A9%ED%91%9C%EA%B0%80-%EC%95%84%EB%8B%8C-%EA%B2%83" class="hash-link" aria-label="ConsumerApp 웹 버전의 목표가 아닌 것에 대한 직접 링크" title="ConsumerApp 웹 버전의 목표가 아닌 것에 대한 직접 링크">​</a></h4>
<p>위 과정에서 불필요한 부분은 배제하고 필요한 기능만을 개발하는 것이 가장 중요하였는데 이때 선정한 불필요한 항목은 다음과 같다.</p>
<ul>
<li>기존 웹 서비스를 대체하는 것</li>
<li>모바일 기기와 완전히 동일하게 동작하는 것</li>
<li>업무 프로세스에 최적화 하는 것</li>
</ul>
<p>이러한 요소들을 제외하고 해당 팀에서 Flutter 를 활용한 웹 개발 시 겪었던 문제들과 해결 방법을 공유해주었다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unsupported-operation-platform_operatingsystem-1">Unsupported operation: Platform._operatingSystem<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#unsupported-operation-platform_operatingsystem-1" class="hash-link" aria-label="Unsupported operation: Platform._operatingSystem에 대한 직접 링크" title="Unsupported operation: Platform._operatingSystem에 대한 직접 링크">​</a></h4>
<p>플랫폼 분기를 위해 사용중인 <code>Platform.isAndroid</code>, <code>Platform.isIOS</code> 코드에서 오류가 발생한다.</p>
<p>이전과 같이 <code>defaultTargetPlatform</code>을 사용하여 플랫폼 분기 코드에 대응한다. 이 때 추가로 <code>CustomLint</code>를 추가해주어 기본 분기코드를 사용하지 않도록 방지하는 방법도 공유해주었다.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="use-custom_lint-package">Use custom_lint package<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#use-custom_lint-package" class="hash-link" aria-label="Use custom_lint package에 대한 직접 링크" title="Use custom_lint package에 대한 직접 링크">​</a></h5>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _UsePlatformHelperLintRules </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">DartLintRule</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_UsePlatformHelperLintRules</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">code</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> _code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/// Metadata about the warning that will show-up in the IDE.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/// This is used for `// ignore: code` and enabling/disabing the lint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> _code </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">LintCode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'use_platformhelper_instead'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    problemMessage</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"'Platform.{0}' should not be used"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    correctionMessage</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Use 'PlatformHelper.{0}' instead"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    errorSeverity</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ErrorSeverity</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ERROR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">CustomLintResolver</span><span class="token plain"> resolver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">ErrorReporter</span><span class="token plain"> reporter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">CustomLintContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// The addPrefixedIdentifier checks the grammar of the [xxx].[xxx] format to forward the callback as node.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">registry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addPrefixedIdentifier</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> beginToken </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">beginToken</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> endToken </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">endToken</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">beginToken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'Platform'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> endToken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'isAndroid'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> beginToken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'Platform'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> endToken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'isIOS'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/// Report a lint error.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        reporter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">reportErrorForNode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">endToken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="update-packages">Update packages<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#update-packages" class="hash-link" aria-label="Update packages에 대한 직접 링크" title="Update packages에 대한 직접 링크">​</a></h4>
<p>웹 빌드 시 패키지 내부에서도 오류가 발생한다. 참조 패키지에서 <code>dart:ffi</code> import 중 오류가 발생하여 확인하자 이후 해당 오류를 수정한 버전이 올라와 있었다고 한다.</p>
<p>Flutter Web 도 출시된지 어느정도 시간이 지나 대부분의 패키지에서는 수정된듯 하다.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="newrelic_mobile-101">newrelic_mobile: 1.0.1<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#newrelic_mobile-101" class="hash-link" aria-label="newrelic_mobile: 1.0.1에 대한 직접 링크" title="newrelic_mobile: 1.0.1에 대한 직접 링크">​</a></h5>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Launching lib/main.dart on Chrome in debug mode...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">main.dart:1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">: Error: Dart library 'dart:ffi' is not available on this platform.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">newrelic_mobile.dart:7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import 'dart:ffi';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// highlight-start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Context: The unavailable library 'dart:ffi' is imported through these packages:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">web_entrypoint.dart =&gt; package:consumer_app =&gt; package:newrelic_mobile =&gt; dart:ffi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// highlight-end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Detailed import paths for (some of) the these imports:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Failed to compile application.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Exited</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>dart:ffi</code> 패키지의 경우 웹에서는 사용할 수 없다. 따라서 해당 패키지를 사용하는 <code>newrelic_mobile</code> 1.0.1 버전을 사용하면 위 에러가 발생하는데, 다음과 같이 1.0.3 버전 이후 해당 부분이 수정된 것을 볼 수 있다.</p>
<p><a href="https://github.com/newrelic/newrelic-flutter-agent/commit/2690bc968ba1833bbf80618f19bafc1bc70840c4" target="_blank" rel="noopener noreferrer">Commit log</a></p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Added 'import dart:ffi' at (1.0.1)</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:async'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:ffi'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:io'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">show</span><span class="token plain"> </span><span class="token class-name">HttpOverrides</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:flutter/foundation.dart'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://github.com/newrelic/newrelic-flutter-agent/commit/017416eb6bede3de86319807ab52568a91223063" target="_blank" rel="noopener noreferrer">Commit log</a></p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Removed 'import dart:ffi' at (1.0.3)</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:async'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:ffi'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:io'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">show</span><span class="token plain"> </span><span class="token class-name">HttpOverrides</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'package:flutter/foundation.dart'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="support-web-platform">Support web platform<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#support-web-platform" class="hash-link" aria-label="Support web platform에 대한 직접 링크" title="Support web platform에 대한 직접 링크">​</a></h4>
<ul>
<li><strong>flutter_inappwebview: 6.0.0</strong>: 웹 실행 시 오류 발생</li>
<li><strong>fpjs_pro_flugin: ^3.0.0</strong>: 전화번호 인증 flow 에서 오류 발생</li>
</ul>
<p>위 두 패키지의 경우 웹에서 실행 시 오류가 발생하였고 각각 <code>index.html</code>에 <code>web_support.js</code>, <code>index.js</code>를 추가해주어 해결했다.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- ... --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">application/javascript</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">src</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">/assets/packages/flutter_inappwebview_web/web_support.js</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">defer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">src</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">assets/packages/fpjs_pro_plugin/web/index.js</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">defer</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="do-not-use-package-when-run-on-web">Do not use package when run on web<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#do-not-use-package-when-run-on-web" class="hash-link" aria-label="Do not use package when run on web에 대한 직접 링크" title="Do not use package when run on web에 대한 직접 링크">​</a></h4>
<p>웹 환경에서는 앱의 기능을 제공할 수 없는 패키지들도 있다. 이러한 패키지들은 의도적으로 웹 환경에서는 미지원 하도록 처리가 필요하다.</p>
<p>해당 기능을 위해 플랫폼 별 다른 구현체를 반환하는 패턴으로 수정하여 패키지 인터페이스를 직접 사용하지 못하도록 Custom Lint 를 추가하여 해결하였다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">main.dart 문제 2개 중 1개</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">'FlutterAppBadger.***' should not be used</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Use '$appBadger.***' instead dart(use_app_badger)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="case-of-fluuter_app_badger-usage">Case of fluuter_app_badger usage<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#case-of-fluuter_app_badger-usage" class="hash-link" aria-label="Case of fluuter_app_badger usage에 대한 직접 링크" title="Case of fluuter_app_badger usage에 대한 직접 링크">​</a></h5>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">app_badger.dart</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">AppBadger</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> $appBadger </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">PlatformHelper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isWeb </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_AppBadgerWeb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_AppBadgerImpl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">abstract</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">AppBadger</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeBadge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// AS-IS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">FlutterAppBadger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// TO-BE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$appBadger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">app_badger_impl.dart</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">part</span><span class="token plain"> of </span><span class="token string-literal string" style="color:#e3116c">'app_badger.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _AppBadgerImpl </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">AppBadger</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeBadge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">FlutterAppBadger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">removeBadge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token class-name">FlutterAppBadger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">app_badger_web.dart</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">part</span><span class="token plain"> of </span><span class="token string-literal string" style="color:#e3116c">'app_badger.dart'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _AppBadgerWeb </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">AppBadger</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeBadge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">debugPrint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'AppBadger &gt;&gt; removeBadge'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateBadgeCount</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">debugPrint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'AppBadger &gt;&gt; updateBadgeCount(</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">count</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="-getter-pattern">$ getter pattern<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#-getter-pattern" class="hash-link" aria-label="$ getter pattern에 대한 직접 링크" title="$ getter pattern에 대한 직접 링크">​</a></h5>
<p>플랫폼 별 다른 기능을 제공하는 경우 $ getter 형식을 사용하는 것으로 정리하였다.</p>
<table><thead><tr><th>Package Name</th><th>AS-IS</th><th>TO-BE</th><th>Support Custom Lint</th></tr></thead><tbody><tr><td>adjust_sdk</td><td>Adjust.***</td><td>$adjustUtil.***</td><td>O</td></tr><tr><td>newrelic_mobile</td><td>NewrelicMobile.***</td><td>$newrelicUtil.***</td><td>O</td></tr><tr><td>flutter_inappwebview</td><td>ChromeSafariBrowser()</td><td>$chromeSafariBrowser</td><td>O</td></tr><tr><td>flutter_app_badger</td><td>FlutterAppBadger.***</td><td>$appBadger.***</td><td>O</td></tr><tr><td>firebase_core</td><td>Firebase.***</td><td>FirebaseUtil.***</td><td>X</td></tr><tr><td>firebase_analytics</td><td>FirebaseAnalytics.instance.***</td><td>$firebaseAnalytics.***</td><td>O</td></tr><tr><td>firebase_auth</td><td>FirebaseAuth.instance.***</td><td>$firebaseAuth.***</td><td>O</td></tr><tr><td>firebase_crashlytics</td><td>FirebaseCrashlytics.instance.***</td><td>$firebaseCrashlytics.***</td><td>O</td></tr><tr><td>firebase_messaging</td><td>FirebaseMessaging.instance.***</td><td>$firebaseMessaging.***</td><td>O</td></tr><tr><td>firebase_remote_config</td><td>FirebaseRemoteConfig.instance.***</td><td>$firebaseRemoteConfig.***</td><td>O</td></tr><tr><td>rokt_sdk</td><td>RoktSdk.***</td><td>$roktSdkUtil.***</td><td>X</td></tr></tbody></table>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="support-mapview">Support MapView<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#support-mapview" class="hash-link" aria-label="Support MapView에 대한 직접 링크" title="Support MapView에 대한 직접 링크">​</a></h5>
<p><strong>platform_maps_flutter: ^1.0.2</strong> 패키지를 사용하여 지도를 표시하여 주었는데, 해당 패키지의 경우 <code>iOS - AppleMapView / Android - GoogleMapView</code>를 사용하도록 개발되었기 때문에 웹에서는 별도의 처리가 필요하다.</p>
<p>이를 웹에서는 <code>google_maps_flutter</code>를 이용해 맵뷰가 표시되도록 개선하였다.</p>
<p><strong>In platform_maps_flutter</strong></p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> _PlatformMapState </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">State</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">PlatformMap</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Widget</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BuildContext</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isAndroid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Platform</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">isIOS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Refactor MapView</strong></p>
<p>앱에서는 <code>platform_maps_flutter</code> / 웹에서는 <code>google_maps_flutter</code> 로 맵뷰</p>
<p><img decoding="async" loading="lazy" alt="Refactor MapView" src="https://mooyeon-choi.github.io/assets/images/flutter_web_6-6462593457a015dbe56ab399c79e7a94.png" width="1654" height="462" class="img_ev3q"></p>
<p><strong>Add Google Maps JavaScript API</strong></p>
<p><code>index.html</code>에 <strong>Google Maps JavaScript API</strong> 추가</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">head</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">&lt;!-- Other stuff --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">src</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">head</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 방법대로 적용을 하면 로컬 개발환경에서는 <code>ReferrerNotAllowedMapError</code>가 발생한다. 하지만 배포 환경에서는 정상적으로 동작한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="build-web">Build web<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#build-web" class="hash-link" aria-label="Build web에 대한 직접 링크" title="Build web에 대한 직접 링크">​</a></h4>
<p><code>--base-href</code> 설정을 할 경우 <code>web_support.js</code> 경로 오류가 발생한다. 빌드 완료 후 <code>index.html</code> 파일을 수정하는 스크립트를 작성하여 이를 해결하였다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Work-around: `flutter_inappwebview_web` doesn't support `--base-href` option.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Therefore, the script replaces a javascript path in `index.html`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// If the library supports that, we can remove below work-around.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> htmlPath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'./build/web/index.html'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> originalHtml </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Deno</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">readTextFileSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">htmlPath</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> replacedHtml </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> originalHtml</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">replaceAll</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-literal string" style="color:#e3116c">'/assets/packages/flutter_inappwebview_web/assets/web/web_support.js'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-literal string" style="color:#e3116c">'assets/packages/flutter_inappwebview_web/assets/web/web_support.js'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Deno</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">writeTextFileSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">htmlPath</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> replacedHtml</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="web-rendering-option-changed">Web rendering option changed<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#web-rendering-option-changed" class="hash-link" aria-label="Web rendering option changed에 대한 직접 링크" title="Web rendering option changed에 대한 직접 링크">​</a></h4>
<p>build web <strong>--web-renderer</strong> 기본값이 <code>auto</code>에서 <code>canvaskit</code>로 변경되었다. 또 <code>SDK 3.22</code> 부터는 <code>--wasm</code>도 사용가능하다(chrome만 지원). 이에 맞춰서 <code>build</code> 옵션을 설정해줄 수 있다.</p>
<table><thead><tr><th>AS-IS</th><th>TO-BE</th></tr></thead><tbody><tr><td><strong>--web-renderer {value}</strong><br><br><code>auto</code> - 모바일 브라우저에서는 <code>html</code>, 데스크탑 브라우저에서는 <code>canvaskit</code>으로 동작<br><code>html</code> - 경량적, 웹 표준기술을 사용(하지만 제대로 동작하지 않는 기능이 많음)<br><code>canvaskit</code> - 고품질 그래픽, 일관된 렌더링</td><td><strong>--wasm</strong><br><br>브라우저가 <code>wasm</code>을 지원할 경우 <code>wasm</code>, 아닐 경우 <code>canvaski</code>으로 동작<br>이 옵션을 설정하지 않을 경우 <code>canvaskit</code>으로 동작<br><br><code>flutter build web -help</code> 로 옵션 지원여부 확인 가능</td></tr></tbody></table>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-to-web">Deploy to web<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#deploy-to-web" class="hash-link" aria-label="Deploy to web에 대한 직접 링크" title="Deploy to web에 대한 직접 링크">​</a></h4>
<p>AWS S3로 static page 배포를 진행하였다. 배포 진행시 아래와 같이 CORS issue가 발생하는데, 해당 발표자분은 인프라팀에 요청을 하여 이슈를 해결하였지만 현재 회사에서 유사하게 <code>Widgetbook</code>을 활용한 <code>Widget visual test</code> 환경을 구축 중에 동일한 이슈를 해결중이라. 추후 이에 대한 글도 작성할 예정이다.</p>
<p><strong>CORS issue</strong></p>
<ul>
<li>BFF (API Server)</li>
<li>Image Server</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="컨슈머-앱의-웹-시도-결과">컨슈머 앱의 웹 시도 결과<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%BB%A8%EC%8A%88%EB%A8%B8-%EC%95%B1%EC%9D%98-%EC%9B%B9-%EC%8B%9C%EB%8F%84-%EA%B2%B0%EA%B3%BC" class="hash-link" aria-label="컨슈머 앱의 웹 시도 결과에 대한 직접 링크" title="컨슈머 앱의 웹 시도 결과에 대한 직접 링크">​</a></h3>
<p>라인에서는 이렇게 웹 배포를 적용하여 다음과 같이 팀 내부에서 활용 중이다.</p>
<ul>
<li>과제별 개발 진행상황 확인</li>
<li>앱 제품에 대한 접근성 대폭 개선</li>
<li>주문 ~ 배달 완료 주문 흐름 테스트가 편해짐</li>
</ul>
<p>위 경험들을 통해 <strong>동료를 유저로 확장하는 경험</strong>을 할 수 있었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="세-번째-flutter-web-시도">세 번째 Flutter web 시도<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%84%B8-%EB%B2%88%EC%A7%B8-flutter-web-%EC%8B%9C%EB%8F%84" class="hash-link" aria-label="세 번째 Flutter web 시도에 대한 직접 링크" title="세 번째 Flutter web 시도에 대한 직접 링크">​</a></h3>
<p>위 경험을 바탕으로 리테일 앱도 웹 빌드 및 배포를 진행하게 된다. 리테일 앱이란 <strong>Y!Shopping (LINEヤフー &amp; Demae-can)</strong> 서비스로 매장에서 주문을 수주하고 주문을 배달로 연계하는 서비스이다.</p>
<p>QA 팀에서 웹으로 배포를 요청하여 진행하게 되었고 개발 과정에서 어떻게 활용하였는지 사례를 소개해주었다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="web-build--deploy-when-pull-request-created">Web build &amp; deploy when Pull-Request created.<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#web-build--deploy-when-pull-request-created" class="hash-link" aria-label="Web build &amp; deploy when Pull-Request created.에 대한 직접 링크" title="Web build &amp; deploy when Pull-Request created.에 대한 직접 링크">​</a></h4>
<p>PR 생성 시, 작업 내용을 실제로 확인하기 위해 Flutter Web 내부 배포를 실행하였다.</p>
<ul>
<li><code>flutter analyze</code>, <code>flutter test</code>, <code>spell check</code> 등 실행</li>
<li>플랫폼 별 빌드 실행 &lt; <strong>Web 빌드 시 배포 수행</strong></li>
<li>테스트 실행 결과 및 Web 빌드 결과 확인 URL을 PR Comment 추가</li>
<li>매일 업로드된 버킷 목록과 PR 목록을 확인하여 자동으로 클라우드 저장소에 업로드된 웹 빌드물 삭제</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-to-web-1">Deploy to web<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#deploy-to-web-1" class="hash-link" aria-label="Deploy to web에 대한 직접 링크" title="Deploy to web에 대한 직접 링크">​</a></h4>
<p>Verda cloud로 배포해주었고 마찬가지로 CORS 이슈가 발생하여 이를 인프라팀에 요청하여 해결한다.</p>
<p><strong>CORS issue</strong></p>
<ul>
<li>CORS header issue</li>
<li>CORS preflight issue</li>
</ul>
<p>BFF (API Server) 이슈 수정으로 대응</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-app-을-web-으로-활용-시-고려할-사항">Flutter app 을 web 으로 활용 시 고려할 사항<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-app-%EC%9D%84-web-%EC%9C%BC%EB%A1%9C-%ED%99%9C%EC%9A%A9-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%82%AC%ED%95%AD" class="hash-link" aria-label="Flutter app 을 web 으로 활용 시 고려할 사항에 대한 직접 링크" title="Flutter app 을 web 으로 활용 시 고려할 사항에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="do-not-use-platform">Do not use Platform.***<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#do-not-use-platform" class="hash-link" aria-label="Do not use Platform.***에 대한 직접 링크" title="Do not use Platform.***에 대한 직접 링크">​</a></h4>
<p><code>Platform.isAndroid</code>, <code>Platform.isIOS</code>를 사용하지 않기</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Error: Unsupported operation: Platform._operatingSystem</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#unsupported-operation-platform_operatingsystem">Unsupported operation: Platform._operatingSystem</a>에서 본 것과 같이 <strong>defaultTargetPlatform</strong> class를 생성하여 추가적인이 필요합니다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="consider-each-package-using-within-the-app">Consider each package using within the app<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#consider-each-package-using-within-the-app" class="hash-link" aria-label="Consider each package using within the app에 대한 직접 링크" title="Consider each package using within the app에 대한 직접 링크">​</a></h4>
<ol>
<li>
<p>웹에서 오류가 발생하는 지 확인한다.</p>
<p>로컬 개발환경에서 우선 확인</p>
<p>패키지 추가 시, 웹 환경 설정을 누락했을 가능성이 높다.</p>
</li>
<li>
<p>관련 <strong>기능이 반드시 필요한지 확인</strong>한다.</p>
<p>패키지가 웹을 지원하는지 확인하고, 가급적 지원하도록 대응하자.</p>
<p>(생각보다 많은) 패키지가 웹 환경을 지원한다.</p>
<p>만약 웹을 지원하지 않을 경우, <strong>Mock 활용을 고려</strong>하자.</p>
<p>패키지를 업데이트 했으면, 모바일 환경에서 한번 더 체크한다.</p>
</li>
<li>
<p>반대로, <strong>굳이 필요하지 않은지 판단</strong>한다.</p>
<p>관련 기능을 웹환경에서 의도적으로 제공하지 않는다.</p>
<p>인터페이스 호출 시 플랫폼별로 다르게 동작하도록 구성한다.</p>
<p>앱과 웹의 실행 환경은 다르다는 것을 항상 염두한다.</p>
</li>
<li>
<p>웹에서 <strong>제약사항을 잘 공유</strong>한다.</p>
<p>기술적으로 지원이 불가능한 경우가 있을 수 있다.</p>
<p>앱과 동작이 완벽히 동일하지 않을 수 있다.</p>
<p>브라우저 쿠키 &amp; 캐시 제거 방법을 공유하자</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="cross-origin-resource-sharing-cors-">Cross-Origin Resource Sharing (CORS) ?<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#cross-origin-resource-sharing-cors-" class="hash-link" aria-label="Cross-Origin Resource Sharing (CORS) ?에 대한 직접 링크" title="Cross-Origin Resource Sharing (CORS) ?에 대한 직접 링크">​</a></h4>
<p><strong>브라우저</strong>가 <strong>자신의 출처(Origin)가 아닌 다른 출처로부터 자원 로드를 허용</strong>하도록 서버가 허가해주는 HTTP 헤더 기반의 메커니즘 <code>출처가 다른 서버간의 리소스 공유를 허용하는 것</code></p>
<table><thead><tr><th>Origin(출처)?</th><th>-</th></tr></thead><tbody><tr><td>URL (Uniform Resource Location) 구조에서<br> <strong>Protocol + Host + Port</strong></td><td><img decoding="async" loading="lazy" alt="URL 구조" src="https://mooyeon-choi.github.io/assets/images/flutter_web_7-c6b1a0264ae3ab30c4ae9ade127e02a8.png" width="1149" height="202" class="img_ev3q"></td></tr></tbody></table>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="enabling---disable-web-secure-1">Enabling --disable-web-secure<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#enabling---disable-web-secure-1" class="hash-link" aria-label="Enabling --disable-web-secure에 대한 직접 링크" title="Enabling --disable-web-secure에 대한 직접 링크">​</a></h5>
<p><img decoding="async" loading="lazy" alt="disable web secure" src="https://mooyeon-choi.github.io/assets/images/flutter_web_2-dd29c3588a210a53597bbba93fe16d57.png" width="1231" height="489" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="server-side-configuration">Server-Side configuration<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#server-side-configuration" class="hash-link" aria-label="Server-Side configuration에 대한 직접 링크" title="Server-Side configuration에 대한 직접 링크">​</a></h4>
<p><strong>XMLHttpRequest, unauthorized 200 응답과 함께 데이터가 없는 현상 등</strong></p>
<p>배포된 웹에서의 접근 허용 작업 요청</p>
<ul>
<li>DevOps Engineer</li>
<li>Server Engineer</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-proxy-server">Use Proxy Server<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#use-proxy-server" class="hash-link" aria-label="Use Proxy Server에 대한 직접 링크" title="Use Proxy Server에 대한 직접 링크">​</a></h4>
<p>만약 웹 서비스도 운영 중이면, proxy server 가 존재할 가능성이 높다</p>
<p><img decoding="async" loading="lazy" alt="with proxy server" src="https://mooyeon-choi.github.io/assets/images/flutter_web_8-feb38fddc82aa111d24719514d2aa21a.png" width="1786" height="495" class="img_ev3q"></p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>참고 자료</div><div class="admonitionContent_BuS1"><p>Flutter Web 을 활용해 제품 개발 환경 개선하기 with Future Flutter 2024</p><p><a href="https://youtu.be/By9k4vZ__Mk" target="_blank" rel="noopener noreferrer">Flutter 엔지니어로 직무 전환한 이야기</a></p><p><a href="https://engineering.linecorp.com/ko/blog/demaecan-2nd-recode-kmm-to-flutter" target="_blank" rel="noopener noreferrer">멀쩡한 앱을 Flutter 앱으로 다시 짠이유– 일본 1위 배달앱, 두 번째 Recode</a></p><p><a href="https://www.uber.com/en-KR/blog/h3/" target="_blank" rel="noopener noreferrer">H3: Uber-s Hexagonal Hierarchical Spatial Index</a></p><p><a href="https://medium.com/flutter-community/conditional-imports-across-flutter-and-web-4b88885a886e" target="_blank" rel="noopener noreferrer">Conditional imports across Flutter and Web</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage" target="_blank" rel="noopener noreferrer">Window.localStorage</a></p><p><a href="https://github.com/cfug/dio/issues/750" target="_blank" rel="noopener noreferrer">Flutter Web – XMLHttpRequest error</a></p><p><a href="https://stackoverflow.com/questions/65630743/how-to-solve-flutter-web-api-cors-error-onlywith-dart-code/66879350#66879350" target="_blank" rel="noopener noreferrer">How to solve flutter web api cors error only with dart code?</a></p><p><a href="https://pub.dev/packages/flutter_cors" target="_blank" rel="noopener noreferrer">flutter_cors</a></p><p><a href="https://techblog.lycorp.co.jp/ko/demaecan-3rd-recode-react-native-to-flutter" target="_blank" rel="noopener noreferrer">Flutter 전환의 마침표 – 일본 1위 배달 앱, 세 번째 Recode</a></p><p><a href="https://www.expertappdevs.com/blog/flutter-web-vs-react-native-web" target="_blank" rel="noopener noreferrer">Flutter Web or React Native Web: Who Will Win the Battle?</a></p><p><a href="https://techblog.lycorp.co.jp/ko/using-custom-lint-in-flutter" target="_blank" rel="noopener noreferrer">Flutter에서 커스텀 린트 활용하기</a></p><p><a href="https://inappwebview.dev/blog/flutter-inappwebview-6#web-support" target="_blank" rel="noopener noreferrer">Flutter InAppWebView 6 &gt; Web Support</a></p><p><a href="https://pub.dev/packages/fpjs_pro_plugin#web-platform" target="_blank" rel="noopener noreferrer">Fingerprint Pro Flutter &gt; web support</a></p><p><a href="https://pub.dev/packages/google_maps_flutter_web#usage" target="_blank" rel="noopener noreferrer">google_maps_flutter_web &gt; usage</a></p><p><a href="https://developers.google.com/maps/documentation/javascript/error-messages#referer-not-allowed-map-error" target="_blank" rel="noopener noreferrer">Google Maps Platform &gt; RefererNotAllowedMapError</a></p><p><a href="https://docs.google.com/document/d/1DGamHsa2lz_Qtgfrfa3j3fRaEopJXc7tCFVM1TQlck8" target="_blank" rel="noopener noreferrer">Intent to deprecate and remove the HTML renderer in Flutter Web</a></p><p><a href="https://techblog.lycorp.co.jp/ko/improve-development-experience-with-flutter-web" target="_blank" rel="noopener noreferrer">Flutter Web을 활용해 제품 개발 환경 개선하기</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/CORS" target="_blank" rel="noopener noreferrer">교차 출처 리소스 공유 (CORS)</a></p><p><a href="https://www.popit.kr/cors-preflight-%EC%9D%B8%EC%A6%9D-%EC%B2%98%EB%A6%AC%EA%B4%80%EB%A0%A8-%EC%82%BD%EC%A7%88/" target="_blank" rel="noopener noreferrer">CORS, Preflight, 인증 처리 관련 삽질</a></p><p><a href="https://velog.io/@ojwman/spring-boot-cors-header-preflight" target="_blank" rel="noopener noreferrer">SpringBoot에서 CORS할 때 header, preflight 이슈 해결하기</a></p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="어느날-갑자기-앱이-터졌을-때">어느날 갑자기 앱이 터졌을 때<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#%EC%96%B4%EB%8A%90%EB%82%A0-%EA%B0%91%EC%9E%90%EA%B8%B0-%EC%95%B1%EC%9D%B4-%ED%84%B0%EC%A1%8C%EC%9D%84-%EB%95%8C" class="hash-link" aria-label="어느날 갑자기 앱이 터졌을 때에 대한 직접 링크" title="어느날 갑자기 앱이 터졌을 때에 대한 직접 링크">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flutter-bloc을-제품-개발에-야무지게-적용하기">Flutter Bloc을 제품 개발에 야무지게 적용하기<a href="https://mooyeon-choi.github.io/blog/future-flutter-conf#flutter-bloc%EC%9D%84-%EC%A0%9C%ED%92%88-%EA%B0%9C%EB%B0%9C%EC%97%90-%EC%95%BC%EB%AC%B4%EC%A7%80%EA%B2%8C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Flutter Bloc을 제품 개발에 야무지게 적용하기에 대한 직접 링크" title="Flutter Bloc을 제품 개발에 야무지게 적용하기에 대한 직접 링크">​</a></h2>]]></content:encoded>
            <category>Dart</category>
            <category>Flutter</category>
            <category>app</category>
        </item>
        <item>
            <title><![CDATA[스토리북 적용기]]></title>
            <link>https://mooyeon-choi.github.io/blog/apply-storybook</link>
            <guid>https://mooyeon-choi.github.io/blog/apply-storybook</guid>
            <pubDate>Tue, 15 Oct 2024 12:47:00 GMT</pubDate>
            <description><![CDATA[소개]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>UI Component를 문서화하여 보기 쉽게 정리하고 각 컴포넌트별로 변경사항을 따로 확인하도록 하여 디자이너와 좀 더 빠르고 명확하게 커뮤니케이션 하기 위해 회사 FrontEnd에 Storybook을 도입하였다. 이번 내용은 Storybook의 적용 방법을 간단히 작성하고 아직 해결되지 않은 문제를 정리한 내용이다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#storybook%EC%9D%B4%EB%9E%80">Storybook이란?</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EA%B8%B0%EC%A1%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-storybook-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">기존 프로젝트에 Storybook 설치하기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#components-%EB%8D%B0%EB%AA%A8-%EB%A7%8C%EB%93%A4%EA%B8%B0">Components 데모 만들기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#ui-%EC%88%98%EC%A0%95-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0">UI 수정 미리보기</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#mocking-data">Mocking data</a></li>
<li><a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EC%95%84%EC%A7%81-%ED%95%B4%EA%B2%B0%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%AC%B8%EC%A0%9C%EB%93%A4">아직 해결되지 않은 문제들</a></li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="storybook이란">Storybook이란?<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storybook%EC%9D%B4%EB%9E%80" class="hash-link" aria-label="Storybook이란?에 대한 직접 링크" title="Storybook이란?에 대한 직접 링크">​</a></h2>
<p>Storybook은 Frontend UI를 컴포넌트/페이지 별로 분리하여 빌드할 수 있는 툴이다. 전체 앱을 다시 빌드하거나 실행하지 않아도 화면에 대한 변경사항을 분리하여 보거나 테스트할 수 있고 문서화 기능도 제공해준다. 무료 오픈소스로 제공되어 많은 회사에서 사용중이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="기존-프로젝트에-storybook-설치하기">기존 프로젝트에 Storybook 설치하기<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EA%B8%B0%EC%A1%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-storybook-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0" class="hash-link" aria-label="기존 프로젝트에 Storybook 설치하기에 대한 직접 링크" title="기존 프로젝트에 Storybook 설치하기에 대한 직접 링크">​</a></h2>
<blockquote>
<p>Next.js 프로젝트에 Storybook 적용하기</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="init-storybook">init Storybook<a href="https://mooyeon-choi.github.io/blog/apply-storybook#init-storybook" class="hash-link" aria-label="init Storybook에 대한 직접 링크" title="init Storybook에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="프로젝트에-스토리북이-없을-경우">프로젝트에 스토리북이 없을 경우<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EF%BF%BD%EF%BF%BD%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81%EC%9D%B4-%EC%97%86%EC%9D%84-%EA%B2%BD%EC%9A%B0" class="hash-link" aria-label="프로젝트에 스토리북이 없을 경우에 대한 직접 링크" title="프로젝트에 스토리북이 없을 경우에 대한 직접 링크">​</a></h4>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx storybook@latest init</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="프로젝트에-이미-스토리북이-추가되어-있는-경우">프로젝트에 이미 스토리북이 추가되어 있는 경우<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81%EC%9D%B4-%EC%B6%94%EA%B0%80%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0" class="hash-link" aria-label="프로젝트에 이미 스토리북이 추가되어 있는 경우에 대한 직접 링크" title="프로젝트에 이미 스토리북이 추가되어 있는 경우에 대한 직접 링크">​</a></h4>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx storybook@latest upgrade</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="migration">Migration<a href="https://mooyeon-choi.github.io/blog/apply-storybook#migration" class="hash-link" aria-label="Migration에 대한 직접 링크" title="Migration에 대한 직접 링크">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="framework-설치">Framework 설치<a href="https://mooyeon-choi.github.io/blog/apply-storybook#framework-%EC%84%A4%EC%B9%98" class="hash-link" aria-label="Framework 설치에 대한 직접 링크" title="Framework 설치에 대한 직접 링크">​</a></h4>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install --save-dev @storybook/nextjs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="storybookmaints-파일-변경">.storybook/main.ts 파일 변경<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storybookmaints-%ED%8C%8C%EC%9D%BC-%EB%B3%80%EA%B2%BD" class="hash-link" aria-label=".storybook/main.ts 파일 변경에 대한 직접 링크" title=".storybook/main.ts 파일 변경에 대한 직접 링크">​</a></h4>
<p>위 command를 입력하면 <code>.storybook/</code>, <code>storybook/</code> 폴더가 생성된다. <code>.storybook/main.js|ts</code> 파일을 확인해보자</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> StorybookConfig </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#storybook/nextjs"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StorybookConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// framework: '@storybook/react-webpack5', 👈 Remove this</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  framework</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/nextjs"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 👈 Add this</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> config</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이전에는 아래의 애드온들을 필수로 추가해주어야 했지만 최신 버전에서는 아래 애드온들을 따로 추가해주지 않아도 기본적으로 적용된다.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> StorybookConfig </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/nextjs"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> StorybookConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  addons</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 👇 These can both be removed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 'storybook-addon-next',</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 'storybook-addon-next-router',</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> config</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tailwind-적용하기">Tailwind 적용하기<a href="https://mooyeon-choi.github.io/blog/apply-storybook#tailwind-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Tailwind 적용하기에 대한 직접 링크" title="Tailwind 적용하기에 대한 직접 링크">​</a></h3>
<p>Tailwind를 사용해 css를 적용한 경우 storybook 화면이 깨지는 것을 볼 수 있다. tailwind를 적용하려면 아래의 단계를 따라 적용하여야 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="import-globalscss">import globals.css<a href="https://mooyeon-choi.github.io/blog/apply-storybook#import-globalscss" class="hash-link" aria-label="import globals.css에 대한 직접 링크" title="import globals.css에 대한 직접 링크">​</a></h4>
<p>tailwind 지시문이 추가된 css 파일을 불러온다. <code>Next.js</code> yarn cli 를 통해 프로젝트를 생성한 경우 <code>@/app/globals.css</code>에 작성 되어있다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.storybook/previews.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../app/globals.css'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Import tailwindcss styles</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> preview</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Preview</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="components-데모-만들기">Components 데모 만들기<a href="https://mooyeon-choi.github.io/blog/apply-storybook#components-%EB%8D%B0%EB%AA%A8-%EB%A7%8C%EB%93%A4%EA%B8%B0" class="hash-link" aria-label="Components 데모 만들기에 대한 직접 링크" title="Components 데모 만들기에 대한 직접 링크">​</a></h2>
<p>데모를 생성할 Component를 불러와 <code>ComponentName.Stories.tsx</code> 파일을 생성해준다. <code>stories</code> 파일에는 <code>default export</code>와 <code>named exports</code>가 포함되어야 한다. <code>default export</code>의 경우 Storybook 목록과 애드온에 사용될 정보를 제공하고 <code>named exports</code>의 경우 Components의 데모가 될 stories를 정의한다. <code>args</code>, <code>parameters</code>, <code>decorators</code> 등의 옵션 값들을 통해 필요한 속성을 설정할 수 있다.</p>
<p>아래는 <code>LoginForm</code>을 통해 input field가 비어있는 경우, 채워져 있는 경우 두가지 데모를 생성하는 예시이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="loginform-component">LoginForm Component<a href="https://mooyeon-choi.github.io/blog/apply-storybook#loginform-component" class="hash-link" aria-label="LoginForm Component에 대한 직접 링크" title="LoginForm Component에 대한 직접 링크">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">@/app/LoginForm.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">LoginForm</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">handleSubmit</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">event</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">FormEvent</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">HTMLFormElement</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onSubmit</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">handleSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">h1</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">로그인</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">h1</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">          이메일</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">data-testid</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">email</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">email</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">placeholder</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">이메일을 입력하세요</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">          </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">          비밀번호</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">data-testid</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">password</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">password</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">            </span><span class="token tag attr-name" style="color:#00a4db">placeholder</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">비밀번호를 입력하세요</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">          </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">SignupButton</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">section</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">submit</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">로그인</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">form</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="storiestsx">Stories.tsx<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storiestsx" class="hash-link" aria-label="Stories.tsx에 대한 직접 링크" title="Stories.tsx에 대한 직접 링크">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">LoginForm.stories.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">Meta</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> userEvent</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> within </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">LoginForm</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@/app/login/components/LoginForm"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> meta</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Meta</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">LoginForm</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  component</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">LoginForm</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> meta</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">LoginForm</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">EmptyForm</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">FilledForm</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function-variable function" style="color:#d73a49">play</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> canvasElement </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> canvas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">within</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">canvasElement</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 👇 Simulate interactions with the component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> userEvent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getByTestId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"email"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"email@provider.com"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> userEvent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">canvas</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getByTestId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"password"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"a-random-password"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ui-수정-미리보기">UI 수정 미리보기<a href="https://mooyeon-choi.github.io/blog/apply-storybook#ui-%EC%88%98%EC%A0%95-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0" class="hash-link" aria-label="UI 수정 미리보기에 대한 직접 링크" title="UI 수정 미리보기에 대한 직접 링크">​</a></h2>
<p>Storybook을 도입하게 된 이유 중 가장 큰 부분을 차지한게 이 기능이었다. 현재 회사는 Mouse Hover, Active 등 여러 UI에 Interaction에 대한 디자인이 없고, 기획 단계에서도 화면에 필요한 요소들을 두루뭉실하게 말로만 설명해서 이후 다시 수정하는 일이 빈번했다.</p>
<p>이에 각 요소들의 크기나 애니메이션 효과들을 직접 수정해보며 확인할 수 있는 데모를 만들어 즉각적인 피드백을 받을 수 있는 Component demo 를 도입하게 되었다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="args를-통한-controller-설정">Args를 통한 Controller 설정<a href="https://mooyeon-choi.github.io/blog/apply-storybook#args%EB%A5%BC-%ED%86%B5%ED%95%9C-controller-%EC%84%A4%EC%A0%95" class="hash-link" aria-label="Args를 통한 Controller 설정에 대한 직접 링크" title="Args를 통한 Controller 설정에 대한 직접 링크">​</a></h3>
<p>반응형으로 수정 가능한 UI를 구성하기 위해 가장 간단한 방법으로 <code>Pros</code>를 통해 추가해주는 방법이 있다. React Components의 property로 수정 가능한 요소들을 입력받고 <code>Stories</code>의 <code>Args</code>에서 해당 요소들에 대한 컨트롤러를 설정해주어 UI를 변경 해볼 수 있는 데모 화면을 생성할 수 있다.</p>
<p>아래는 storybook init을 통해 생성되는 기본 <code>Button</code>으로 보는 예시이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="button-component">Button Component<a href="https://mooyeon-choi.github.io/blog/apply-storybook#button-component" class="hash-link" aria-label="Button Component에 대한 직접 링크" title="Button Component에 대한 직접 링크">​</a></h4>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">./Button.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./button.css"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">ButtonProps</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/** Is this the principal call to action on the page? */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  primary</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">boolean</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/** What background color to use */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backgroundColor</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/** How large should the button be? */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  size</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"small"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"medium"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"large"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/** Button contents */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/** Optional click handler */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  onClick</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/** Primary UI component for user interaction */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  primary </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"medium"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backgroundColor</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  label</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">props</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ButtonProps</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> primary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"storybook-button--primary"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"storybook-button--secondary"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">      </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">button</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">      </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">[</span><span class="token tag script language-javascript string" style="color:#e3116c">"storybook-button"</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript template-string template-punctuation string" style="color:#e3116c">`</span><span class="token tag script language-javascript template-string string" style="color:#e3116c">storybook-button--</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token tag script language-javascript template-string interpolation" style="color:#00009f">size</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:#e3116c">`</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"> mode</span><span class="token tag script language-javascript punctuation" style="color:#393A34">]</span><span class="token tag script language-javascript punctuation" style="color:#393A34">.</span><span class="token tag script language-javascript method function property-access" style="color:#d73a49">join</span><span class="token tag script language-javascript punctuation" style="color:#393A34">(</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">        </span><span class="token tag script language-javascript string" style="color:#e3116c">" "</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">      </span><span class="token tag script language-javascript punctuation" style="color:#393A34">)</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">      </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread" style="color:#00009f">props</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">    </span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">label</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">style</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">jsx</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">{`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        button {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">          background-color: ${backgroundColor};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      `}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">style</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="storiestsx-1">Stories.tsx<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storiestsx-1" class="hash-link" aria-label="Stories.tsx에 대한 직접 링크" title="Stories.tsx에 대한 직접 링크">​</a></h4>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Button.stories.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">Meta</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> fn </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./Button"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> meta </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Example/Button"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  component</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  parameters</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    layout</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"centered"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tags</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"autodocs"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// More on argTypes: https://storybook.js.org/docs/api/argtypes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  argTypes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    backgroundColor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> control</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"color"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> onClick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> satisfies </span><span class="token maybe-class-name">Meta</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> meta</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> meta</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Primary</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    primary</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Button"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Secondary</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Button"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Large</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"large"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Button"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Small</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  args</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"small"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Button"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="실행-화면">실행 화면<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EC%8B%A4%ED%96%89-%ED%99%94%EB%A9%B4" class="hash-link" aria-label="실행 화면에 대한 직접 링크" title="실행 화면에 대한 직접 링크">​</a></h4>
<p><img decoding="async" loading="lazy" alt="ui control demo" src="https://mooyeon-choi.github.io/assets/images/ui-control-4d4faed9ff1420d2be69a282c6a48205.png" width="1075" height="727" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mocking-data">Mocking data<a href="https://mooyeon-choi.github.io/blog/apply-storybook#mocking-data" class="hash-link" aria-label="Mocking data에 대한 직접 링크" title="Mocking data에 대한 직접 링크">​</a></h2>
<p>Next.js로 개발을 하면 Context Provider나 API Data 등 Component 외부에서 데이터를 받아와 표시해줘야 하는 경우가 많다.</p>
<p>이러한 데이터를 UI 테스트 환경에서는 가져올 수 없으므로 Mocking을 통해 대체해주어야 한다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_BuS1"><p><a href="https://cheeseb.github.io/testing/react-testing-mocking/" target="_blank" rel="noopener noreferrer">출처: 모킹(Moking) 이란? - 개발자맛 치즈볼 블로그</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="moking-이란">Moking 이란?<a href="https://mooyeon-choi.github.io/blog/apply-storybook#moking-%EC%9D%B4%EB%9E%80" class="hash-link" aria-label="Moking 이란?에 대한 직접 링크" title="Moking 이란?에 대한 직접 링크">​</a></h3><blockquote>
<p>단위 테스트를 작성할 때, 해당 코드가 의존하는 부분을 가짜(mock)로 대체하는 기법</p>
</blockquote><p>특정 컴포넌트를 테스트할 때, 테스팅 범위가 아니지만 의존성이 있는 다른 모듈이 있을 수 있다.
이를 실제 모듈로 불러와서 테스트 한다면 다음과 같은 문제가 생길 수 있다.</p><ul>
<li>
<p>아직 개발되지 않은 모듈에 의존한다면 테스팅/개발이 어려움</p>
</li>
<li>
<p>다른 모듈에 의해 테스트 결과가 바뀔 수 있어, 해당 컴포넌트에 대해서만 독립적인 테스트를 할 수 없음</p>
<ul>
<li>특정 기능만 분리해서 테스트한다는 ‘단위’ 테스트의 의미에 적합하지 않음</li>
</ul>
</li>
<li>
<p>테스트 실행 속도가 떨어지고, 이는 프로젝트 규모가 커져서 한번에 실행할 테스트 케이스가 많아지면 더 큰 이슈가 될 수 있음</p>
<ul>
<li>CI/CD 파이프라인의 일부로 테스트가 자동화되어 자주 실행되어야 한다면 더 큰 문제가 됨</li>
</ul>
</li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="context-provider-mocking">Context Provider Mocking<a href="https://mooyeon-choi.github.io/blog/apply-storybook#context-provider-mocking" class="hash-link" aria-label="Context Provider Mocking에 대한 직접 링크" title="Context Provider Mocking에 대한 직접 링크">​</a></h3>
<p>현재 회사 코드의 경우 데이터 구조가 복잡하지 않아 Context Provider를 통해 공통 state의 상태를 관리하고 있다. 이러한 데이터들은 아래와 같은 방법으로 대체한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="전역-provider">전역 Provider<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EC%A0%84%EC%97%AD-provider" class="hash-link" aria-label="전역 Provider에 대한 직접 링크" title="전역 Provider에 대한 직접 링크">​</a></h4>
<p>Theme 과 같은 <code>stories</code>에 공통으로 사용되는 공급자를 제공해주는 방식이다. <code>preview.tsx</code>에 <code>decorators</code> 옵션을 추가해 <code>&lt;Story /&gt;</code>를 부모요소로 생성해준다. 아래는 공식문서에 작성된 기본 작성법이다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.storybook/preview.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Preview</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ThemeProvider</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"styled-components"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> preview</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Preview</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  decorators</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Story</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">ThemeProvider</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">theme</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">default</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token comment" style="color:#999988;font-style:italic">/* 👇 Decorators in Storybook also accept a function. Replace &lt;Story/&gt; with Story() to enable it  */</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Story</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">ThemeProvider</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> preview</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="개별-provider">개별 Provider<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EA%B0%9C%EB%B3%84-provider" class="hash-link" aria-label="개별 Provider에 대한 직접 링크" title="개별 Provider에 대한 직접 링크">​</a></h4>
<p>Component 개별로 각각 공급자를 추가해줘야하는 경우도 있다. 이러한 경우 해당 <code>Context</code>를 가져와서 initial state를 입력해주는 방식으로 작성할 수 있다.</p>
<p>아래는 직접 작성한 예시이다.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="context-provider">Context Provider<a href="https://mooyeon-choi.github.io/blog/apply-storybook#context-provider" class="hash-link" aria-label="Context Provider에 대한 직접 링크" title="Context Provider에 대한 직접 링크">​</a></h5>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">@/context/StateContext.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">"use client"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> createContext</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> useContext</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">SomeContextType</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">SomeContext</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">createContext</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">SomeContextType</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">useSomeContext</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useContext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">ApplyContext</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">SomeyStateProviderProps</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">ReactNode</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  initialState</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">SomeStateProvider</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">FC</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">SomeStateProviderProps</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  children</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  initialState </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">someState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setSomeState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">useState</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name builtin">string</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">initialState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">someState</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">SomeStateContext.Provider</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">      </span><span class="token tag attr-name" style="color:#00a4db">value</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">        someState</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">      </span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag" style="color:#00009f">    </span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">children</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">SomeStateContext.Provider</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:#393A34">{</span><span class="token exports"> </span><span class="token exports maybe-class-name">SomeStateProvider</span><span class="token exports punctuation" style="color:#393A34">,</span><span class="token exports"> useSomeStateContext </span><span class="token exports punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="storiestsx-2">Stories.tsx<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storiestsx-2" class="hash-link" aria-label="Stories.tsx에 대한 직접 링크" title="Stories.tsx에 대한 직접 링크">​</a></h5>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">@/stories/SomeComponent.stories.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">Meta</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">ReactRenderer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ApplyStateProvider</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@/context/ApplyContext"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">PartialStoryFn</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"storybook/internal/types"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">HttpHandler</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">HttpResponse</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"msw"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Component</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@/app/main/components/ApplyDetailHistory"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> meta</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Meta</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">Component</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  component</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Component</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> meta</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">StoryObj</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">Component</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">SomeStateProviderMock</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  someState</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  children</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">ReactNode</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">SomeStateProvider</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">initialState</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f"> someState </span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">children</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">SomeStateProvider</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">SomeStateDecorator</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token maybe-class-name">Story</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">PartialStoryFn</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">ReactRenderer</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  context</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> parameters</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> someState </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">parameters</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">SomeStateProviderMock</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">someState</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">someState</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Story</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">SomeStateProviderMock</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">EmptyForm</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * to learn more about using the canvasElement to query the DOM</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">FilledForm</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  decorators</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token maybe-class-name">SomeStateDecorator</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  parameters</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    someState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"any data"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="network-mocking">Network Mocking<a href="https://mooyeon-choi.github.io/blog/apply-storybook#network-mocking" class="hash-link" aria-label="Network Mocking에 대한 직접 링크" title="Network Mocking에 대한 직접 링크">​</a></h3>
<p>네트워크 요청이 제대로 동작했을때와 에러가 발생했을 때 화면상에 어떻게 표시되는지 보여주는 것도 중요하다. 따라서 네트워크 요청을 대체하여 일정 시간 후 데이터를 입력해주거나 에러가 발생하는 경우도 적용해줄 필요가 있다.</p>
<p>이를 위해 <code>msw</code> 라이브러리와 <code>msw</code> 애드온을 추가하여 데모를 작성할 수 있다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="install-msw">Install MSW<a href="https://mooyeon-choi.github.io/blog/apply-storybook#install-msw" class="hash-link" aria-label="Install MSW에 대한 직접 링크" title="Install MSW에 대한 직접 링크">​</a></h4>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="package-추가">Package 추가<a href="https://mooyeon-choi.github.io/blog/apply-storybook#package-%EC%B6%94%EA%B0%80" class="hash-link" aria-label="Package 추가에 대한 직접 링크" title="Package 추가에 대한 직접 링크">​</a></h5>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Install MSW</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn add msw msw-storybook-addon --save-dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="storybookmaints-수정">.storybook/main.ts 수정<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storybookmaints-%EC%88%98%EC%A0%95" class="hash-link" aria-label=".storybook/main.ts 수정에 대한 직접 링크" title=".storybook/main.ts 수정에 대한 직접 링크">​</a></h5>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.storybook/main.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">StorybookConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/your-framework"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">StorybookConfig</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  framework</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/your-framework"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  stories</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"../src/**/*.mdx"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  staticDirs</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"../public"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"../static"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> config</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="storybookpreviewts-수정">.storybook/preview.ts 수정<a href="https://mooyeon-choi.github.io/blog/apply-storybook#storybookpreviewts-%EC%88%98%EC%A0%95" class="hash-link" aria-label=".storybook/preview.ts 수정에 대한 직접 링크" title=".storybook/preview.ts 수정에 대한 직접 링크">​</a></h5>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.storybook/preview.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Replace your-renderer with the renderer you are using (e.g., react, vue, etc.)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Preview</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@storybook/your-renderer"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> initialize</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> mswLoader </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"msw-storybook-addon"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Initializes MSW</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * See https://github.com/mswjs/msw-storybook-addon#configuring-msw</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * to learn how to customize it</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> preview</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Preview</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ... rest of preview configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  loaders</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mswLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 👈 Add the MSW loader to all stories</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> preview</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="msw-moking-적용">MSW Moking 적용<a href="https://mooyeon-choi.github.io/blog/apply-storybook#msw-moking-%EC%A0%81%EC%9A%A9" class="hash-link" aria-label="MSW Moking 적용에 대한 직접 링크" title="MSW Moking 적용에 대한 직접 링크">​</a></h4>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">SomeComponent.stories.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">HttpHandler</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">HttpResponse</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"msw"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">SomeComponent</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@/app/SomeComponent"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">MockingForm</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Story</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  msw</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    handlers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"API_url"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token maybe-class-name">HttpResponse</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> returnData </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="아직-해결되지-않은-문제들">아직 해결되지 않은 문제들<a href="https://mooyeon-choi.github.io/blog/apply-storybook#%EC%95%84%EC%A7%81-%ED%95%B4%EA%B2%B0%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%AC%B8%EC%A0%9C%EB%93%A4" class="hash-link" aria-label="아직 해결되지 않은 문제들에 대한 직접 링크" title="아직 해결되지 않은 문제들에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swr-cashing">SWR Cashing<a href="https://mooyeon-choi.github.io/blog/apply-storybook#swr-cashing" class="hash-link" aria-label="SWR Cashing에 대한 직접 링크" title="SWR Cashing에 대한 직접 링크">​</a></h3>
<p>API 요청을 캐싱하고 API 요청과 관련된 상태를 캐싱하기 위해 현재 SWR을 이용하고 있다. 이로인해 몇가지 문제가 발생하였고 해결 방안을 모색중이다.</p>
<ol>
<li>
<p>네트워크 재요청을 하지 않는 문제</p>
<p>SWR의 경우 API 요청시 <code>url</code>을 key값으로 사용해 브라우저 세션에 요청 정보를 캐싱해두고 동일한 키값으로 요청이 발생했을 때 캐싱된 데이터를 반환하는 방식으로 동작한다.</p>
<p>이로 인해 네트워크 응답상태별 데모를 생성하는데 있어 원하는대로 응답이 발생하지 않는 문제가 있다.</p>
<p>-&gt; 글을 작성하며 생각해보니 swrConfig를 통해 각각의 컴포넌트별로 <code>Provider</code>를 따로 제공해준다면 해결 될 것 같다. 이 부분은 확인 후 수정할 예정</p>
</li>
</ol>]]></content:encoded>
            <category>Next.js</category>
            <category>React</category>
            <category>Storybook</category>
            <category>SWR</category>
        </item>
        <item>
            <title><![CDATA[리액트가 컴파일될 예정입니다]]></title>
            <link>https://mooyeon-choi.github.io/blog/react-19-will-be-compiled</link>
            <guid>https://mooyeon-choi.github.io/blog/react-19-will-be-compiled</guid>
            <pubDate>Mon, 18 Mar 2024 22:26:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://reacttraining.com/blog/react-19-will-be-compiled" target="_blank" rel="noopener noreferrer">https://reacttraining.com/blog/react-19-will-be-compiled</a></li>
<li>번역글: <a href="https://substack.com/redirect/aad98d01-4d75-4355-956a-074e85d384a5?j=eyJ1IjoiMnFrMnA0In0.QVVOJaKabmmX5ASbNU2omf9CA-dCFAH4QXVPLzr-_K4" target="_blank" rel="noopener noreferrer">https://substack.com/redirect/aad98d01-4d75-4355-956a-074e85d384a5?j=eyJ1IjoiMnFrMnA0In0.QVVOJaKabmmX5ASbNU2omf9CA-dCFAH4QXVPLzr-_K4</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>최근 리액트 팀은 리액트 19의 릴리즈를 발표한 블로그 게시물에서 리액트 컴파일러를 함께 발표하여 현재 리액트 컴파일러는 프론트엔드 개발자들의 뜨거운 관심을 받고 있습니다.</p>
<p>이 글에서는 리액트 컴파일러가 나오기 전까지의 과정과 컴파일에 대한 의미를 소개하고 있습니다. 리액트 컴파일러가 나오기 전과 후의 과정들에 대해 관심을 가지고 계시다면 가볍게 읽어보시길 추천드립니다. 🙂</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>컴파일된 리액트는 hooks의 주요 문제를 해결합니다</li>
<li>메모된 리액트</li>
<li>메모이제이션에 의존</li>
<li>우리는 항상 리액트를 컴파일 해왔습니다</li>
<li>컴파일은 스펙트럼입니다</li>
<li>자동 메모이제이션을 위한 컴파일</li>
</ol></div></div>
<blockquote>
<p>어떤 면에서는 항상 그랬습니다. 하지만 이제 메모이제이션을 몰라도 됩니다.</p>
</blockquote>
<p>어제 리액트 팀은 <a href="https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024" target="_blank" rel="noopener noreferrer">해당 블로그 게시글</a>을 통해서 리액트를 위해 작업해 온 내용을 발표했습니다. 리액트 팀의 Andrew Clark이 변경 사항을 자세히 설명해 주었습니다.</p>
<div></div>
<p>[정정] 이전에 컴파일될 버전은 v19가 될 것이라고 말씀드린 바 있습니다. 리액트 팀은 발표에서 컴파일된 리액트에 대해 언급했고, 저는 다른 사람들과 동일하게 이것이 v19를 의미한다고 생각했습니다. 게시글에 언급된 많은 기능이 v19에 포함될 것으로 보이지만, 컴파일되는 버전은 아마도 그 다음 버전이 될 것입니다(Andrew가 언급한 대로 올해 2024년 말 쯤).</p>
<div></div>
<p>버전이야 어찌됐건, 이 글이 리액트가 "컴파일"된다는 것이 무엇을 의미하는지에 대해 혼란스러워하는 모든 분들에게 도움이 되기를 바랍니다. 이 주제는 많이 논의되어 왔고, 특히 리액트의 전체 스토리를 보지 못했다면 따라가기 어려울 수 있기 때문에 여기까지 오게 된 과정의 예시와 역사적 맥락을 보여드리고자 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="컴파일된-리액트는-hooks의-주요-문제를-해결합니다">컴파일된 리액트는 hooks의 주요 문제를 해결합니다<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%90%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8A%94-hooks%EC%9D%98-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%A9%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="컴파일된 리액트는 hooks의 주요 문제를 해결합니다에 대한 직접 링크" title="컴파일된 리액트는 hooks의 주요 문제를 해결합니다에 대한 직접 링크">​</a></h2>
<p>계속해서, 다음의 리액트 원칙들이 리액트를 컴파일할 때도 변치 않음을 명심하세요.</p>
<ul>
<li>리액트 상태는 불변입니다</li>
<li>UI는 상태의 함수입니다</li>
<li>상태가 변경되면 리렌더링하여 새로운 UI를 생성합니다</li>
</ul>
<p>버전 번호를 제외하면, 리액트는 뚜렷한 세 가지 시대가 있다고 생각합니다.</p>
<ul>
<li><strong>클래스 컴포넌트 시대</strong>(추상화를 위한 원시성이 없음)</li>
<li><strong>훅의 시대</strong>(메모 필요)</li>
<li><strong>컴파일 시대</strong>(자동 메모이제이션)</li>
</ul>
<p>이제 곧 컴파일 시대로 접어드는데, 어떻게 여기까지 왔을까요?</p>
<p>클래스 컴포넌트로 프로젝트를 만들어본 사람이라면 코드를 추상화하고 재사용하려고 할 때 클래스가 주는 문제를 기억할 것입니다. 리액트에는 코드를 재사용할 수 있는 "원시성"이 없었기 때문에 커뮤니티에서 Hoc 및 Render Props와 같은 패턴을 만들었는데, 이는 <a href="https://gist.github.com/bradwestfall/4fa683c8f4fcd781a38a8d623bec20e7" target="_blank" rel="noopener noreferrer">이상적이지 않았습니다.</a> 원시성을 만들 때의 문제점은 클래스 자체가 필요한 수준의 합성을 제공하지 못한다는 것이었습니다. 그래서 리액트 팀은 클래스에서 벗어나 함수형 컴포넌트에 관심을 갖기 시작했습니다.</p>
<p>당시에는 함수형 컴포넌트가 존재했지만 클래스처럼 상태나 다른 생명주기를 가질 수 없었기 때문에 무상태 함수형 컴포넌트라고 불렀습니다. 리액트 팀은 함수형 컴포넌트가 우리에게 필요한 원시성을 제공하는 방법이라고 생각했습니다. 함수형 컴포넌트를 리액트 생명주기에 "연결(hook)"할 수 있는 방법을 알아낼 수만 있다면요 😉</p>
<p>네, "hooks"라는 용어는 바로 여기서 유래했습니다.</p>
<p>저는 2018년 hooks가 발표된 컨퍼런스 자리에 있었습니다. 발표 직후 Ryan Florence가 <a href="https://www.youtube.com/watch?v=wXLf18DsV-I" target="_blank" rel="noopener noreferrer">모두가 보는 앞에서 "render-props를 hooks로" 리팩터링</a> 했던 것이 기억에 남습니다. Hooks, 특히 커스텀 훅은 우리가 놓치고 있던 원시성을 되찾을 수 있었습니다.</p>
<p>당시에는 모든 코드를 하나의 함수로 통합하면 합성이 쉬워질 수 있지만 모든 코드를 메모해야 한다는 단점이 있다는 사실을 깨닫지 못했습니다. 리렌더링의 특성을 고려할 때, 본질적으로 클래스가 메모이제이션으로 부터 우리를 보호해준다는 사실을 깨닫지 못했습니다.</p>
<p>클래스 컴포넌트에서 render 메서드는 해당 코드를 다른 <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener noreferrer">생명주기 메서드</a>로부터 격리하므로 리렌더링해도 렌더링 단계와 격리되지 않은 코드에 부정적인 영향을 미치지 않습니다. 이것은 아마도 디자인적인 결정이라기보다 클래스가 작동하는 방식의 특징에 가깝습니다. 🧐 이 이야기를 꺼내는 것 자체가 불필요해 보이지만, 앞으로 다가올 진화에서 중요한 역할을 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="메모된-리액트">메모된 리액트<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EB%A9%94%EB%AA%A8%EB%90%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8" class="hash-link" aria-label="메모된 리액트에 대한 직접 링크" title="메모된 리액트에 대한 직접 링크">​</a></h2>
<p>클래스 컴포넌트는 솔직히 끔찍했습니다. 이틀간의 워크샵 커리큘럼을 hooks로 바꿨을 때 절반 이상의 주제가 증발했던 것을 기억합니다. 왜냐하면 클래스 컴포넌트는 더 이상 가르칠 필요가 없을 정도로 앱에 너무 많은 복잡성을 가져왔기 때문입니다.</p>
<p>제출 시 처리할 메서드가 있는 클래스 컴포넌트를 만들면 해당 메서드를 "메모화"할 필요가 없습니다. 함수형 컴포넌트로 비슷한 작업을 수행하면 어떻게 되는지 살펴보겠습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">App</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">onSubmit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Submit 로직</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onSubmit</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">onSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">form</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>바로 알아차리지 못했을 수도 있지만, 이 함수는 리렌더링이 있을 때마다 다시 생성될 것입니다. 즉, 메모리에서 완전히 새로운 함수가 될 것입니다. 함수가 스스로 다시 생성되는 것은 일반적으로 문제가 되지 않으며 이 예시에서는 문제가 발생하지 않습니다. 하지만 렌더 단계와는 별개의 메서드였기 때문에 클래스에서는 이런 일이 발생하지 않는다는 점에 주목할 필요가 있습니다.</p>
<p>또한 자바스크립트에서 무언가를 다시 만들어야 한다는 일반적인 개념이 리액트에만 국한되지 않는다는 점도 주목할 필요가 있습니다. 함수와 객체를 다시 생성하는 2008년의 jQuery 코드를 보여드리겠습니다. 농담입니다. 2008년에 만든 코드가 어디 있는지 모르겠네요.</p>
<p>이제 코드를 약간 리팩터링해 보겠습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">App</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">onSubmit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Submit 로직</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onSubmit</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">onSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Form</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> onSubmit </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>렌더링할 때마다 <code>onSubmit</code>이 새로운 함수가 되는 것은 여전히 문제가 되지 않습니다.</p>
<p>이 경우, <code>App</code>이 리렌더링되면 <code>Form</code>이 리렌더링됩니다. 컴포넌트의 props가 변경되어야 컴포넌트가 리렌더링된다고 말하는 사람도 있습니다. 그건 사실이 아닙니다. <code>App</code>이 리렌더링될 때, <code>Form</code>은 props와 관계없이 리렌더링됩니다. 현재로서는, <code>onSubmit</code> prop이 변경되는지 여부는 중요하지 않습니다. 이 예시는 지나치게 단순하지만 <code>Form</code>을 메모화한다고 가정해 보겠습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 이제 Form은 App이 리렌더링되는 모든 경우에 리렌더링이 되는 것이 아닌</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 특정 props가 변경된 경우에만 리렌더링합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Form</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">memo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> onSubmit </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이제 문제가 생겼습니다.</p>
<p>리액트는 변수가 변경되었는지 확인하기 위해 <code>===</code>와 <code>Object.is()</code>를 사용하여 이전 항목과 새로운 항목을 비교하는 멋지고 <a href="https://reacttraining.com/blog/state-in-react-is-immutable" target="_blank" rel="noopener noreferrer">엄격한 동등성 검사</a> 방법에 크게 의존합니다. 문자열과 같은 자바스크립트 원시값을 <code>===</code>로 비교하면 자바스크립트는 값으로 비교합니다(이미 알고 계셨을 겁니다). 하지만 자바스크립트가 배열, 객체 또는 함수를 비교할 때, <code>===</code>를 사용하는 것은 이들의 아이덴티티, 즉, 메모리 할당을 비교하는 것입니다. 이것이 자바스크립트에서 <code>{} === {}</code>가 <code>false</code>인 이유입니다. 메모리에서 서로 다른 두 개의 객체 아이덴티티가 존재하기 때문입니다.</p>
<p><code>Form = React.memo(fn)</code>는 이렇게 말하는 것과 같습니다.</p>
<blockquote>
<p>리액트, 아이덴티티 확인을 통해 props가 실제로 변경된 경우에만 Form을 리렌더링해줘.</p>
</blockquote>
<p><code>App</code>이 리렌더링될 때마다 <code>onSubmit</code>이 변경되기 때문에 문제가 발생합니다. 이로 인해 <code>Form</code>은 항상 리렌더링하게 되므로 메모이제이션이 아무 소용 없습니다. 이 시점에서 이는 리액트에게는 무의미한 오버헤드입니다.</p>
<p>이제 다시 돌아가서 <code>App</code>이 리렌더링할 때 <code>onSubmit</code>의 아이덴티티가 변경되지 않도록 해야 합니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">App</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> onSubmit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useCallback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Submit 로직</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onSubmit</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">onSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>useCallback</code>을 사용하여 함수의 아이덴티티가 변경되지 않도록 함수를 고정합니다. 어떻게 보면 일종의 메모이제이션이라고 할 수 있습니다. 지나치게 단순한 용어로 메모이제이션은 함수의 응답을 "기억" 또는 "캐시"하는 것을 의미합니다.</p>
<p>이는 이렇게 말하는 것과 같습니다.</p>
<blockquote>
<p>리액트, 내가 useCallback에 전달하는 함수의 아이덴티티를 기억해. 리렌더링할 때마다 매번 새로운 함수를 제공하지만, 처음 호출했을 때의 원래 함수의 아이덴티티를 알려줘.</p>
</blockquote>
<p><code>onSubmit</code> 함수를 메모하는 것은 일반적으로 필요하지 않지만, <code>Form</code>이 메모되어 <code>onSubmit</code>을 prop으로 받게 되면서 필요해졌습니다. React Training에서는 이것을 "구현 출혈(implementation bleed)"라고 부릅니다.</p>
<p>문제는 여기서 끝나지 않습니다. 더 많은 코드를 추가해 보겠습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">App</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> settings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> onSubmit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useCallback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> settings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>settings</code> 객체는 <code>App</code>을 렌더링할 때마다 자체적으로 다시 생성됩니다. 이것은 그 자체로는 문제가 되지 않지만, 리액트를 잘 알고 있다면 이 경우, 린터가 <code>useCallback</code>의 의존성 배열에 <code>settings</code>을 넣으라고 요청할 것이라는 것을 알고 있을 것입니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> settings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> onSubmit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useCallback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> settings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">settings</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 하는 것은 아래처럼 말하는 것과 같습니다.</p>
<blockquote>
<p>렌더링할 때마다 변경되지 않고 안정적인 <code>onSubmit</code>를 원합니다. 하지만 이 의존성 배열의 항목 중 하나라도 변경되면 <code>onSubmit</code>을 다시 생성하기 위해 <code>useCallback</code>을 사용해야 합니다.</p>
</blockquote>
<p>"왜 <code>onSubmit</code>을 변경해야 할까?"라고 스스로에게 물어볼 수도 있습니다.</p>
<p>변경할 필요가 없을 것 같다고 동의하지만, 리액트에서는 <code>useCallback</code>이나 <code>useMemo</code>와 같이 의존성 배열이 변경될 때 반환값에 대한 새로운 아이덴티티를 다시 메모하고 생성해야 하는 상황이 많이 있습니다. 이 경우, 린터는 <code>onSubmit</code>이 <strong>절대 달라지기를 원하지 않는다</strong>는 것을 알지 못합니다.</p>
<p>린터는 거의 항상 옳지만, 린터가 원하는 것을 우리가 원하지 않을 수도 있다는 것을 보여주기 위해 이 예시를 직접 선택했습니다.</p>
<p>린터에 집중하고 의존성 배열에 <code>settings</code>를 넣으면 다음과 같은 일이 발생합니다.</p>
<ul>
<li><code>App</code>이 리렌더링할 때...</li>
<li><code>settings</code>는 새로운 객체가 되고 <code>===</code>로 이전 렌더링의 객체와 비교합니다.</li>
<li>의존성 배열은 값이 변경되지 않았는데도 <code>===</code>에 따라 <code>settings</code>가 다른 것으로 간주합니다.</li>
<li>의존성 배열의 변경은 <code>useCallback</code>이 <code>onSubmit</code>에 대한 새로운 아이덴티티를 반환한다는 것을 의미합니다.</li>
<li><code>onSubmit</code>의 변경으로 인해 <code>Form</code>이 리렌더링 됩니다.</li>
</ul>
<p>한마디로 <code>Form</code>의 메모이제이션은 쓸모가 없습니다. App이 리렌더링될 때마다 항상 다시 렌더링됩니다. 이제 <code>onSubmit</code>의 메모를 그대로 유지하기 위해 <code>useMemo</code>로 <code>settings</code>를 메모이제이션해야 하므로 구현 상의 더 많은 출혈이 발생합니다.</p>
<p>다시 한 번 이 질문으로 돌아가 보겠습니다.</p>
<blockquote>
<p>왜 <code>onSubmit</code>을 변경해야 할까요? 이 경우, 린터를 비활성화하면 안될까요?</p>
</blockquote>
<p>물론, 이 경우에는 의존성 배열에서 <code>settings</code>를 생략하거나 그냥 메모해 둘 수 있다고 생각합니다. 또는 애초에 메모된 Form이 필요 없었다면 이러한 혼란을 방지할 수 있었다는 주장을 할 수도 있습니다. 이것은 요점이 아니라 단지 예시일 뿐입니다. 요점은 리액트에서 메모를 하면 구현에서 종종 연쇄적인 출혈로 이어진다는 것입니다.</p>
<p>의존성 배열에 대한 주제와 린터가 그 안에 무언가를 넣기 원하는 이유는 이 게시글의 범위를 훨씬 벗어납니다. 이 주제는 많은 뉘앙스가 있는 방대한 주제이기 때문에 몇 시간 동안 이야기할 수 있을 것입니다. 사실, 린터는 일반적으로 옳고 좋은 의도를 가지고 있습니다. 문제는 많은 리액트 개발자들이 그 이유를 이해하지 못하고 린터가 단지 작은 제안일 뿐이라고 생각한다는 것입니다. 제 경험상, 린터를 무시하면 버그가 발생할 가능성이 높습니다.</p>
<p>여기에 완벽한 예시가 있습니다. 몇 년 전 트위터에서 어떤 사람과 이야기를 나누었는데, <code>useEffect</code> 의존성 배열이 때때로 무한 루프를 생성하는 경우가 있기 때문에 함수를 의존성 배열에 넣지 않는다고 말한 적이 있습니다. 저는 "해당 함수들에 useCallback을 사용하면 루프를 방지할 수 있습니다. 문제는 함수가 너무 자주 변경되는 것입니다."와 같이 말했습니다.</p>
<p>그 사람은 "useCallback이 뭐죠?"라고 물었습니다.</p>
<p>사람들이 메모이제이션이나 리액트를 충분히 이해하지 못해서 좌절하는 경우가 종종 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="메모이제이션에-의존">메모이제이션에 의존<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EC%97%90-%EC%9D%98%EC%A1%B4" class="hash-link" aria-label="메모이제이션에 의존에 대한 직접 링크" title="메모이제이션에 의존에 대한 직접 링크">​</a></h2>
<p>리액트에서 충분히 작업해 본 사람이라면 의존성 배열을 다루는 것이 어려울 수 있다는 것을 알고 있을 것입니다. 린터는 배열에 무언가를 넣으라고 지시하는데 결과가 마음에 들지 않을 수 있습니다(예시: 루프). 린터에게 화를 내기 쉽지만 린터가 옳았습니다. 물론 리액트가 무한 루프를 "원하기" 때문이 아니라, 그 순간 무언가를 메모해야 했기 때문입니다.</p>
<p>의존성 배열은 모든 코드가 리렌더링되는 함수형 컴포넌트에 함께 배치되어 있고, 시간에 따른 변수의 변경을 모니터링하기 위한 방법입니다. 때로는 의존성 배열에 객체, 배열 및 함수를 넣는 경우가 있으므로 메모이제이션을 통해 고정해야 합니다.여기에서 "고정적"이라는 설명의 의미는 "사용자가 원하지 않는 한 변경되지 않는 변수" 입니다.</p>
<p>코드를 통해 이를 시연해 보겠습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">App</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">misc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setMisc</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">darkMode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setDarkMode</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> options </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> darkMode </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">User</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">options</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">options</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">User</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> options </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// user 조회</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>App</code>의 <code>misc</code> 상태가 변경되면 연쇄적인 결과로 <code>options</code>가 변경되고 따라서 이펙트가 <code>misc</code>상태와 아무 관련이 없는데도 <code>useEffect</code>가 다시 실행되는 것을 볼 수 있습니다. 따라서 해당 <code>options</code> 변수를 <code>useMemo</code>로 감싸는 것이 좋습니다. 그렇게 하면 린터는 의존성 배열에 <code>darkMode</code>를 넣으라고 요청합니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">darkMode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setDarkMode</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> options </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useMemo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> darkMode </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">darkMode</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 하는 것은 아래처럼 말하는 것과 같습니다.</p>
<blockquote>
<p>다크모드가 변경될 때까지 options가 고정적으로 유지되기를 바랍니다. 그런 다음 새로운 아이덴티티로 다시 고정합니다. 하지만 misc 상태가 변경될 때는 배열에 없으므로 아무 작업도 하지 마세요(우리는 그것에 의존하지 않습니다).</p>
</blockquote>
<p>좋습니다. 리액트는 메모이제이션에 의존한다는 점을 이해하셨기를 바랍니다. 올바르게 설정하지 않으면 버그나 성능 문제가 발생할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="우리는-항상-리액트를-컴파일-해왔습니다">우리는 항상 리액트를 컴파일 해왔습니다<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EC%9A%B0%EB%A6%AC%EB%8A%94-%ED%95%AD%EC%83%81-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%95%B4%EC%99%94%EC%8A%B5%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="우리는 항상 리액트를 컴파일 해왔습니다에 대한 직접 링크" title="우리는 항상 리액트를 컴파일 해왔습니다에 대한 직접 링크">​</a></h2>
<p>용어에 대한 정의에 따라 리액트에는 항상 컴파일 단계(JSX)가 있었다고 주장할 수 있습니다. 제가 보기에는 기본적으로 작성하는 코드가 브라우저에서 실행되는 코드와 다르다는 것을 의미하는 자바스크립트의 느슨한 용어인 것 같습니다.</p>
<p>제가 리액트를 처음 경험한 것은 2015년이었습니다. 대부분의 개발자에게는 아직 바벨과 리액트가 상당히 생소했습니다. 어떻게 보면 그들의 인기는 서로 맞물려 성장했습니다. 리액트는 함수 호출로 JSX를 컴파일하는 것으로 유명합니다. 그래서 저는 리액트가 기술적으로는 컴파일되지만 항상 작은 문법적 설탕이라고 느꼈고 하나의 JSX 요소의 의미가 매우 예측 가능한 함수가 된다는 것은 저에게는 상당히 "가벼운" 컴파일이라고 생각했습니다.</p>
<p>오늘날에는 타입스크립트를 자바스크립트로 컴파일하기도 하는데, 이 경우에는 저장할 때 우리가 작성했던 모든 타입스크립트가 증발하고 남은 코드는 자바스크립트라는 의미이기 때문에 재미있습니다. 하지만 여전히 "쓰는 대로, 얻는 대로"라는 제 정의에 부합하는 것 같아요.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="컴파일은-스펙트럼입니다">컴파일은 스펙트럼입니다<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%80-%EC%8A%A4%ED%8E%99%ED%8A%B8%EB%9F%BC%EC%9E%85%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="컴파일은 스펙트럼입니다에 대한 직접 링크" title="컴파일은 스펙트럼입니다에 대한 직접 링크">​</a></h2>
<p>저에게 "컴파일된 프레임워크"는 일부는 조금 컴파일되고 일부는 많이 컴파일되는 스펙트럼중 어딘가에 있는 것이라고 느껴집니다.</p>
<p><img decoding="async" loading="lazy" alt="compile-spectrum" src="https://mooyeon-choi.github.io/assets/images/compile-spectrum-48fe4b2e86856bfa2b57b70847a211f0.svg" width="682" height="223" class="img_ev3q"></p>
<p>리액트는 다른 최신 자바스크립트 프레임워크에 비해 "그다지 많지 않은"편에 속하는 것처럼 느껴집니다. 저에게는 "보이는 것이 곧 얻는 것"이라는 규칙이 이 스펙트럼의 어느 지점에 있는지를 결정합니다. JSX는 리액트가 어느 정도 컴파일된다는 것을 의미하지만, 제가 작성한 다른 코드는 리액트에 의해 전혀 컴파일되지 않습니다.</p>
<p>반면, 스벨트는 제작자가 <a href="https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934" target="_blank" rel="noopener noreferrer">더 이상 자바스크립트가 아니라고 표현</a>할 정도로 많이 컴파일되어 있습니다. 스벨트는 실제로 프로그래밍 언어에 가깝습니다. 왜냐하면 작성하는 내용의 의미는 자바스크립트로 변환될 때 얻는 의미와는 거리가 멀기 때문입니다.</p>
<p>이 글을 비교 포스팅으로 만들거나 한 가지 방법이 다른 방법보다 낫다거나, 컴파일이 좋다 나쁘다를 말하려는 것이 아닙니다. 단순히 다른 자바스크립트 프레임워크가 더 적게 컴파일되거나, 더 많이 컴파일되거나, 더 이상 자바스크립트가 아닌 정도로 컴파일되는 스펙트럼처럼 느껴진다는 것을 말하는 것입니다.</p>
<p>리액트 팀의 발표에 따르면 리액트는 이전보다 더 많이 컴파일될 예정입니다. 다른 서비스보다 더 많이 될까요? 잘 모르겠습니다. 이 스펙트럼의 끝이 어디일지는 저에게 중요하지 않습니다. 더 중요한 것은 컴파일하는 이유입니다. 다른 것과는 다른 이유가 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="자동-메모이제이션을-위한-컴파일">자동 메모이제이션을 위한 컴파일<a href="https://mooyeon-choi.github.io/blog/react-19-will-be-compiled#%EC%9E%90%EB%8F%99-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC" class="hash-link" aria-label="자동 메모이제이션을 위한 컴파일에 대한 직접 링크" title="자동 메모이제이션을 위한 컴파일에 대한 직접 링크">​</a></h2>
<p>리액트가 불변성에서 벗어나 관찰 가능성을 향해 나아가고 있는 것은 아닙니다. 여전히 아이덴티티 확인과 의존성 배열이 있습니다. 따라서 컴파일된다는 것이 리액트가 다른 것들과 비슷하게 느껴지게 하지는 않습니다. 자동 메모이제이션이 가능하도록 컴파일될 것입니다. 리액트는 과거와 동일하지만, hooks와 함수형 컴포넌트의 주요 문제 중 하나였던 수동 메모이제이션의 단점이 없어지는거죠.</p>
<p>개인적으로 저는 JSX 상단의 로직이 그대로 유지되는 것에 익숙합니다. 이번 변화는 대부분 수동 메모이제이션 측면에서 생각하는 방법을 배우지 않는 것입니다. 컴파일러가 올바른 결정을 내릴 수 있도록 신뢰해야 하며, 컴파일러가 "It Just Works™"와 비교하여 어느 정도까지 안내해야 할지는 여전히 불확실합니다. 저는 낙관적이고 흥미롭게 생각하고 있습니다.</p>
<p>요약하자면, 이 아이디어가 갑자기 튀어나온 것이 아니라는 점에 주목할 필요가 있습니다. 우리는 <a href="https://www.youtube.com/watch?v=lGEMwh32soc" target="_blank" rel="noopener noreferrer">Xuan Huang이 React Conf 2021에서 이 아이디어를 소개</a>한 이후 3년 동안 리액트에서 이것이 실현 가능할지 논의해왔습니다. 몇 년 전부터 트위터의 리액트 커뮤니티에서 화제가 되었던 적도 있습니다.</p>
<p>여러분이 이러한 대화를 아직 알지 못했다면 이 게시글을 통해 우리가 어떻게 여기까지 왔는지에 대한 적절한 예시와 맥락을 파악할 수 있기를 바랍니다. 읽어주셔서 감사합니다!</p>]]></content:encoded>
            <category>React</category>
            <category>Javascript</category>
            <category>frontend</category>
            <category>memo</category>
            <category>hooks</category>
        </item>
        <item>
            <title><![CDATA[깜빡이는 UI를 거부하세요. useLayoutEffect, 페인팅 그리고 브라우저 이야기]]></title>
            <link>https://mooyeon-choi.github.io/blog/no-more-flickering-ui</link>
            <guid>https://mooyeon-choi.github.io/blog/no-more-flickering-ui</guid>
            <pubDate>Sat, 16 Mar 2024 21:51:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<p><img decoding="async" loading="lazy" alt="no-more-flickering-ui_welcome" src="https://mooyeon-choi.github.io/assets/images/no-more-flickering-ui_welcome-42d2eec3d044210f5979a1e8d58fe512.png" width="1000" height="640" class="img_ev3q"></p>
<ul>
<li>원문: <a href="https://www.developerway.com/posts/no-more-flickering-ui" target="_blank" rel="noopener noreferrer">https://www.developerway.com/posts/no-more-flickering-ui</a></li>
<li>번역글: <a href="https://velog.io/@tap_kim/no-more-flickering-ui?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">https://velog.io/@tap_kim/no-more-flickering-ui?utm_source=substack&amp;utm_medium=email</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>이번 글은 평소 사용하는 리액트의 useEffect를 사용할 때 발생하는 깜빡인 현상을 주제로 평소 사용하는 브라우저의 주요 개념인 동기/비동기 개념을 중심으로 useEffect와 useLayoutEffect에 대해 깊이 있게 설명하는 글입니다.</p>
<p>자바스크립트의 관점으로 리액트에선 두 effect를 통해 어떤 방식으로 사용되는지, 쓰임새와 성능, 더불어 SSR까지 흐름으로 두 effect 훅에 대해 딥 다이브하기 좋은 글이 될 것 같습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>useEffect의 문제점이 뭘까요?</li>
<li>useLayoutEffect로 수정하기</li>
<li>해결법이 효과적인 이유: 렌더링, 페인팅과 브라우저</li>
</ol><ul>
<li>useEffect와 useLayoutEffect 비교로 돌아가기</li>
<li>useEffect에 대해 좀 더 자세히 알아보기</li>
</ul><ol start="4">
<li>Next.js의 useLayoutEffect와 기타 SSR 프레임워크들</li>
</ol></div></div>
<p>DOM 측정값을 기반으로 요소를 변경하는 방법에 대해 살펴봅니다. useEffect의 문제는 무엇이며, 그 문제를 useLayoutEffect로 어떻게 해결하는지, 브라우저 페인팅이 무엇이며, 여기서 SSR은 어떤 역할을 하는지 알아보겠습니다.</p>
<p><a href="https://youtu.be/__tm1dyMi4A" target="_blank" rel="noopener noreferrer">이 게시글은 비디오 형식으로도 제공됩니다.</a></p>
<p>리액트의 DOM 접근에 관해 좀 더 이야기해 봅시다. 이전 글<a href="https://mooyeon-choi.github.io/blog/refs-from-dom-to-api">(리액트의 Refs: DOM 접근에서 명령형 API까지)</a>에서 Ref를 사용하는 법과 Ref와 관련된 모든 것을 배웠습니다. 그러나, DOM 처리에 관한 주제로 또 다른 중요한 주제가 있습니다. 바로, 요소의 크기나 위치 같은 DOM의 실제 측정 결과를 기반으로 요소를 변경하는 것입니다.</p>
<p>그래서, 정확히 무엇이 문제이고 왜 "일반적인" 방법으로는 충분하지 않을까요? 앞으로 코딩을 해보면서 알아보도록 하겠습니다. 이 과정에서 <code>useEffect</code> 대신에 <code>useLayoutEffect</code>를 언제, 왜 사용해야 하는지와 브라우저는 어떻게 리액트 코드를 렌더링하는지 그리고 페인팅이 무엇이고, 왜 이 모든 것들이 중요한지 및 SSR이 어떤 역할을 하는지 알아보겠습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="useeffect의-문제점이-뭘까요">useEffect의 문제점이 뭘까요?<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#useeffect%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C%EC%9A%94" class="hash-link" aria-label="useEffect의 문제점이 뭘까요?에 대한 직접 링크" title="useEffect의 문제점이 뭘까요?에 대한 직접 링크">​</a></h2>
<p>이제 코딩 시간입니다! 오늘은 반응형 네비게이션 컴포넌트를 멋지게 만들어보겠습니다. 네비게이션 컴포넌트는 링크의 행을 렌더링하고 컨테이너 크기에 따라 링크의 수를 조정할 수 있습니다.</p>
<p><img decoding="async" loading="lazy" alt="menu-full-screen" src="https://mooyeon-choi.github.io/assets/images/menu-full-screen-74bc74dace7b363dc96c41da7d308dcc.png" width="1522" height="240" class="img_ev3q"></p>
<p>그리고 만약 일부 링크가 화면에 맞게 나타나지 않는다면, 클릭하면 드롭다운 메뉴가 보이는 "더 보기" 버튼을 보여줍니다.</p>
<p><img decoding="async" loading="lazy" alt="menu-collapsed" src="https://mooyeon-choi.github.io/assets/images/menu-collapsed-c892f8a2e1621bf5492210f279e8eda2.png" width="832" height="654" class="img_ev3q"></p>
<p>이제 컴포넌트를 살펴보겠습니다. 아래 컴포넌트는 데이터를 배열로 받고 적절한 링크를 렌더링하는 컴포넌트입니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">navigation</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">items</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">a</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">item</span><span class="token tag script language-javascript punctuation" style="color:#393A34">.</span><span class="token tag script language-javascript property-access" style="color:#00009f">href</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">a</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그러면 어떻게 반응형으로 만들 수 있을까요? 여기서 문제는 사용 가능한 공간에 맞는 아이템의 수를 계산해야 한다는 것입니다. 그러기 위해선 렌더링 될 컨테이너의 너비와 모든 항목의 크기가 필요합니다. 예를 들어, 문자 수를 세는 것과 같이 여기서부턴 어떤 것도 미리 가정할 수 없습니다. 브라우저에서 텍스트가 렌더링 되는 것은 사용된 글꼴, 언어, 브라우저에 많은 영향을 받을 뿐만 아니라 그 밖에 다양한 이유로 예측할 수 없는 결과들이 발생할 수 있습니다.</p>
<p>여기서 실제 크기를 얻는 유일한 방법은 브라우저가 그 아이템들을 렌더링하게 한 다음, <code>getBoundingClientRect</code>와 같은 네이티브 자바스크립트 API를 통해 크기를 추출하는 것입니다.</p>
<p>이를 위해 몇 가지 단계를 거쳐야 합니다. 먼저 요소에 접근해서 Ref를 생성하고 항목들을 감싸는 div에 할당할 수 있습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> ref </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">navigation</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">ref</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Refs와 DOM이 어떻게 동작하는지 익숙하지 않다면 <a href="https://mooyeon-choi.github.io/blog/refs-from-dom-to-api">리액트의 Refs: DOM 접근부터 명령형 API까지</a>를 참고해 주세요.</p>
<p>두 번째로, <code>useEffect</code>에서 div 요소를 가져온 뒤 크기를 가져옵니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> div </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ref</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> width </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> div</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBoundingClientRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>세 번째로, div의 자식 컴포넌트를 순회하며 그 너비를 추출해 배열에 담습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 이전과 동일 한 코드</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// div의 하위 항목을 배열로 변환</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> children </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">div</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">childNodes</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 모든 너비 값들</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> childrenWidths </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> children</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">child</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getBoundingClientRect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">width</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이제 모든 배열을 순회하면서 하위 컴포넌트의 너비를 더한 뒤, 그 합계를 상위 div와 비교하여 결과적으로 마지막으로 표시되는 항목을 찾아야 합니다.</p>
<p>그러나 여기서 놓친 것이 하나 있습니다. 바로 "더 보기" 버튼과 그 너비도 고려해야 합니다. 그렇지 않으면 몇 가지 상황에선 괜찮지만 "더 보기" 버튼으로 인해 문제를 겪을 수 있습니다.</p>
<p><img decoding="async" loading="lazy" alt="more-button-should-fit" src="https://mooyeon-choi.github.io/assets/images/more-button-should-fit-ffaf6d630dd189eadaee34f2e1710387.png" width="632" height="236" class="img_ev3q"></p>
<p>다시 말하지만, 우리는 브라우저에서 렌더링된 경우에만 너비를 얻을 수 있습니다. 따라서, 초기 렌더링 동안 버튼을 명시적으로 추가해야 합니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">navigation</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">items</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">item</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">a</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">item</span><span class="token tag script language-javascript punctuation" style="color:#393A34">.</span><span class="token tag script language-javascript property-access" style="color:#00009f">href</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">a</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      &lt;!-- 링크 뒤에 "더 보기" 버튼을 명시적으로 추가해 주세요. --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">more</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">...</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>모든 너비 계산 로직을 함수로 추상화한다면 아래와 같은 <code>useEffect</code>를 갖게 됩니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> itemIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getLastVisibleItem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>getLastVisibleItem</code> 함수는 모든 계산을 수행하고 단일 숫자, 즉, 사용할 수 있는 공간에 맞는 마지막 링크의 인덱스를 반환합니다. 이번엔 로직 자체에 대해 깊게 다루지 않을 것입니다. 이를 수행하기 위한 수백만 가지의 방법이 있고, 추후에 최종 코드 예제에서 이를 볼 수 있습니다.</p>
<p>여기서 중요한 것은 마지막 링크의 인덱스를 가지고 있다는 것입니다. 리액트 관점에서 다음에 무엇을 해야 할까요? 이걸 그대로 둔다면, 모든 링크와 "더 보기" 버튼이 보일 것입니다. 여기에는 한 가지 해결책만 있습니다. 컴포넌트를 업데이트하고 존재하면 안 되는 컴포넌트들은 모두 제거해야 합니다.</p>
<p>그리고 이를 수행할 유일한 방법은 해당 인덱스를 얻었을 때 인덱스 상태를 저장하는 것입니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 초깃값을 -1로 설정하여, 아직 계산을 실행하지 않았음을 나타냅니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lastVisibleMenuItem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setLastVisibleMenuItem</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> itemIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getLastVisibleItem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 실제 인덱스 상태 업데이트합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">setLastVisibleMenuItem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">itemIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그런 다음 메뉴가 렌더링 될 때 다음 사항을 고려하세요.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 첫 번째 패스와 여전히 기본값인 경우 모든 것을 렌더링합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastVisibleMenuItem </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 이전과 동일하게 여기서 모두 렌더링합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 마지막으로 표시할 항목이 배열의 마지막 항목이 아닌 경우 "더 보기" 버튼을 표시합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isMoreVisible </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastVisibleMenuItem </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> items</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 인덱스가 마지막으로 표시된 항목보다 큰 항목을 필터링합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> filteredItems </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> items</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">item</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> index</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> lastVisibleMenuItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">navigation</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      &lt;!-- 보이는 항목만 렌더링 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">filteredItems</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">item</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">a</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">item</span><span class="token tag script language-javascript punctuation" style="color:#393A34">.</span><span class="token tag script language-javascript property-access" style="color:#00009f">href</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">a</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      &lt;!-- "더 보기"를 조건부 렌더링 --&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">isMoreVisible </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">more</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">...</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이게 다입니다! 이제 상태가 실제 인덱스로 업데이트된 후에는, 네비게이션이 다시 렌더링 되고 리액트가 항목들을 다시 렌더링하고 표시되지 않은 항목들을 제거할 것입니다. "적절한" 반응형 경험을 위해 resize 이벤트를 수신하고 인덱스를 다시 계산해야 하지만, 그것을 구현하는 것은 여러분에게 맡기겠습니다.</p>
<p>아래 코드 샌드박스에서 전체 작동 예제를 확인하세요. 크기를 조정해가면서요😊. 이상한 점을 발견하셨어도 너무 흥분하지 마세요. 여기에는 사용자 경험에 있어 한 가지 큰 결함이 있습니다.</p>
<iframe src="https://codesandbox.io/embed/pv93pp?view=Editor+%2B+Preview&amp;module=%2Fsrc%2Findex.tsx" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="simple-responsive-menu-example (forked)" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>
<p>특히 CPU 속도가 느려진 상태에서 새로고침을 몇 번 시도해 보세요. 불행하게도 여기엔 끔찍한 깜빡이는 동작이 있습니다. 모든 항목과 "더 보기" 버튼이 표시되는 초기 렌더링이 명확하게 보입니다. 운영에 들어가기 전 반드시 수정해야 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="uselayouteffect로-수정하기">useLayoutEffect로 수정하기<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#uselayouteffect%EB%A1%9C-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0" class="hash-link" aria-label="useLayoutEffect로 수정하기에 대한 직접 링크" title="useLayoutEffect로 수정하기에 대한 직접 링크">​</a></h2>
<p>깜빡이는 증상의 원인은 명백합니다. 불필요한 컴포넌트를 제거하기 전에 렌더링하고 표시하기 때문입니다. 그렇지 않으면 첫 렌더링 시 멋진 반응성이 작동하지 않습니다. 이를 수정할 방법의 하나는 여전히 첫 번째 패스를 렌더링하되 눈에 보이지 않게 하는 것입니다. 투명도를 0으로 설정하거나 눈에 보이지 않는 영역 어딘가에 있는 어떤 div에 렌더링하는 것입니다. 그리고 여러 영역과 매직 넘버를 추출한 후에만 그것들을 보이게 만듭니다. 이것은 과거에 이런 경우를 처리하던 방식입니다.</p>
<p>리액트 ~16.8 버전부터는(훅이 있는 버전) 모든 useEffect를 useLayoutEffect로 교체하기만 하면 됩니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> items </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 정확히 모든 것이 똑같고, 훅 이름만 다릅니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useLayoutEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 여기에 똑같이 코드를 작성하세요.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">ref</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이건 더 이상 초기 깜빡임이 없는 코드입니다. 확인해 보세요.</p>
<iframe src="https://codesandbox.io/embed/f66t6d?view=Editor+%2B+Preview&amp;module=%2Fsrc%2Findex.tsx" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="simple-responsive-menu-example-fixed (forked)" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>
<p>그렇다면 이것을 사용하는 것이 안전한가요? 왜 <code>useEffect</code> 대신에 그냥 모든 곳에서 <code>useLayoutEffect</code>를 사용하지 않는 걸까요? 문서에선 <code>useLayoutEffect</code>는 <a href="https://react.dev/reference/react/useLayoutEffect" target="_blank" rel="noopener noreferrer">성능 저하</a>를 일으킬 수 있으므로 피해야 한다고 명시적으로 나와 있습니다. 왜 그럴까요? 이는 "브라우저가 화면을 리페인팅하기 전"에 실행된다고 하는데 이는 <code>useEffect</code>가 이후에 실행된다는 의미입니다. 그러나 정확히 이게 무슨 의미일까요? 이제 간단한 드롭다운을 작성할 때도 브라우저 페인팅과 같은 저수준의 개념까지 생각해야 한다는 것을 의미할까요🤯?</p>
<p>이 질문에 답하자면, 잠시 리액트를 벗어나 브라우저와 오래된 자바스크립트에 관해 이야기해야 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결법이-효과적인-이유-렌더링-페인팅과-브라우저">해결법이 효과적인 이유: 렌더링, 페인팅과 브라우저<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#%ED%95%B4%EA%B2%B0%EB%B2%95%EC%9D%B4-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%9C%A0-%EB%A0%8C%EB%8D%94%EB%A7%81-%ED%8E%98%EC%9D%B8%ED%8C%85%EA%B3%BC-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80" class="hash-link" aria-label="해결법이 효과적인 이유: 렌더링, 페인팅과 브라우저에 대한 직접 링크" title="해결법이 효과적인 이유: 렌더링, 페인팅과 브라우저에 대한 직접 링크">​</a></h2>
<p>여기서 가장 필요한 것은 "브라우저 렌더링"입니다. 리액트 세계에서는 리액트의 렌더링과 구별하기 위해 "페인팅"이라고도 알려졌지만 그건 매우 다릅니다! 이 아이디어는 비교적 간단합니다. 브라우저는 화면에 실시간으로 표시되는 모든 것들을 지속해서 업데이트하지 않습니다. 화이트보드에 선을 긋고, 지우고, 글을 쓰거나 올빼미를 그리는 것과는 다릅니다.</p>
<p>대신에 사람들에게 슬라이드를 보여주는 것과 비슷합니다. 하나의 슬라이드를 보여주고, 사람들이 그 기발한 아이디어를 이해할 때까지 기다린 후 다음 슬라이드로 전환하는 방식입니다. 만약 아주 느린 브라우저가 올빼미를 그리도록 요청받았다면, 아주 형편없는 그림이 될 수 있습니다.</p>
<p><img decoding="async" loading="lazy" alt="owl" src="https://mooyeon-choi.github.io/assets/images/owl-4b3925858523a3fff8b844528423ded6.png" width="530" height="453" class="img_ev3q"></p>
<p>그들은 매우 매우 빠르게 해냅니다. 일반적으로 최신 브라우저에는 60FPS 속도, 초당 60프레임을 유지하려고 합니다. 한 슬라이드가 다음 슬라이드로 바뀌는 데는 약 13밀리초가 걸립니다. 이것이 리액트에서 "페인팅"이라고 부르는 것입니다.</p>
<p>슬라이드를 업데이트하는 정보는 "작업(task)"으로 나뉩니다. 해당 작업은 대기열에 추가됩니다. 브라우저는 대기열에 있는 작업을 가져와 실행합니다. 시간이 더 있다면 다음 작업을 실행하고 ~13ms 간격으로 더 이상 시간이 남지 않을 때까지 계속 실행한 다음 화면을 새로 고칩니다. 그리고 트위터에서 무의미하게 스크롤링과 같은 중요한 작업을 수행하는 데 드는 노력을 알지 못한 채 수행할 수 있도록 계속해서 쉬지 않고 작업합니다.</p>
<p>"작업"은 무엇일까요? 일반적인 자바스크립트인 경우, <code>script</code> 태그에 넣고 동기적으로 실행하는 모든 것을 말합니다. 다음 코드를 참고해 보세요.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"app"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> child </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"div"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">innerHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt;h1&gt;Heyo!&lt;/h1&gt;"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">appendChild</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 10px solid red"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 20px solid green"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 30px solid black"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>우선, id로 요소를 가져와 변수 app에 할당한 뒤 div를 생성합니다. 그런 다음 HTML을 업데이트하고 app의 div에 추가한 뒤 div의 테두리(border)를 세 번 변경합니다. 브라우저에서는 모든 작업을 하나의 작업으로 간주합니다. 모든 행을 실행하고, 최종 결과물로 검은 테두리(border)가 있는 div를 그립니다.</p>
<p>우리는 화면에서 빨강-초록-검정 전환을 보지 못합니다.</p>
<p>"작업"이 13ms보다 오래 걸리면 어떻게 될까요? 글쎄요, 안타깝네요 🤷🏻‍♀️. 브라우저는 이를 중지하거나 분리할 수 없습니다. 완료될 때까지 계속한 다음 최종 결과물을 그릴 것입니다. 테두리 업데이트 사이에서 1초간 동기 지연을 추가하는 경우는 아래와 같습니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">waitSync</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">ms</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    now </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">now </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ms</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    now </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 10px solid red"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">waitSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 20px solid green"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">waitSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 30px solid black"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">waitSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여전히 "중간" 결과를 볼 수 없습니다. 브라우저가 그것을 정렬할 때까지 빈 화면만 바라보다가 마지막에 검은색 테두리가 생기는 것을 볼 수 있습니다. 이것이 우리가 말하는 "렌더링 차단" 또는 "페인팅 차단" 코드라고 부르는 것입니다.</p>
<iframe src="https://codesandbox.io/embed/jky4pg?view=Editor+%2B+Preview&amp;module=%2Fsrc%2Findex.js" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="understanding-painting-sync-example (forked)" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>
<p>리액트는 단지 자바스크립트일 뿐이지만 단일 작업으로 실행되지는 않습니다. 만약 그렇다면 인터넷은 견딜 수 없을 것입니다. 그렇게 되면 우리는 모두 외부에 실행되고 직접 상호작용 해야 할 텐데, 누가 그것을 원할까요? 전체 앱을 렌더링하는 거대한 작업을 작은 작업으로 "분할"하는 방법은 콜백, 이벤트 핸들러, 프로미스 등 다양한 "비동기"적 방법을 사용하는 것입니다.</p>
<p>이러한 스타일 조정을 <code>setTimeout</code>으로 감싸기만 하면 됩니다. 지연 시간을 0으로 설정해도 됩니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 10px solid red"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 20px solid green"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"border: 30px solid black"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그럼 모든 timeout 로직은 새로운 "작업"으로 간주할 것입니다. 따라서 브라우저는 하나의 작업을 마친 후 다음 작업을 시작하기 전에 리페인팅할 수 있습니다. 그리고 3초 동안 하얀 화면에서 명상하는 것이 아니라, 느리지만 아름답게 빨간색에서 초록색으로, 다시 돌아오는 전환을 볼 수 있게 됩니다.</p>
<iframe src="https://codesandbox.io/embed/z5vlss?view=Editor+%2B+Preview&amp;module=%2Fsrc%2Findex.js" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="understanding-painting-async-example  (forked)" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>
<p>이건 리액트가 우리를 위해 하는 일입니다. 기본적으로 이 엔진은 엄청나게 복잡하고 매우 효율적인 엔진으로, 자체 코딩과 수백 개의 npm 종속성으로 구성된 거대한 덩어리를 브라우저가(이상적으로) 13ms 이내에 처리할 수 있는 가능한 가장 작은 덩이로 분할합니다.</p>
<p>물론, 지금까지의 설명은 매우 간략하고 단순화된 소개에 불과합니다. 이 모든 것을 다루려 한다면 글이 아니라 책으로 변할 것입니다. 브라우저의 이벤트 루프와 큐 주제에 대해 매우 훌륭하고 포괄적인 가이드는 여기 있습니다. <a href="https://blog.xnim.me/event-loop-and-render-queue" target="_blank" rel="noopener noreferrer">(브라우저 이벤트 루프: 마크로 및 마크로 테스크, 콜 스택, 렌더 큐: 레이아웃, 페인트, 합성)</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="useeffect와-uselayouteffect-비교로-돌아가기">useEffect와 useLayoutEffect 비교로 돌아가기<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#useeffect%EC%99%80-uselayouteffect-%EB%B9%84%EA%B5%90%EB%A1%9C-%EB%8F%8C%EC%95%84%EA%B0%80%EA%B8%B0" class="hash-link" aria-label="useEffect와 useLayoutEffect 비교로 돌아가기에 대한 직접 링크" title="useEffect와 useLayoutEffect 비교로 돌아가기에 대한 직접 링크">​</a></h2>
<p>마지막으로 <code>useEffect</code> vs <code>useLayoutEffect</code>로 돌아와 처음에 가졌던 질문에 답을 하겠습니다.</p>
<p><code>useLayoutEffect</code>는 리액트가 컴포넌트를 업데이트하는 동안 동기적으로 수행되는 것입니다. 다음 코드를 살펴보세요.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useLayoutEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 어떤 코드들</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>컴포넌트 내부에서 무엇을 렌더링하든 <code>useLayoutEffect</code>에선 동일한 "작업"으로 실행됩니다. 리액트는 이를 보장합니다. 비록 일반적으로 비동기 작업이라고 생각하는 <code>useLayoutEffect</code> 내부에서 상태를 업데이트 하더라도 리액트는 여전히 전체 흐름이 동기적으로 실행되도록합니다.</p>
<p>처음에 구현한 "네비게이션" 예제로 돌아가면 브라우저 관점에서 이는 단지 하나의 "작업"일 뿐입니다.</p>
<p><img decoding="async" loading="lazy" alt="use-layout-flow" src="https://mooyeon-choi.github.io/assets/images/use-layout-flow-c72cf5e0961a38805ebc5979971795fd.png" width="2082" height="532" class="img_ev3q"></p>
<p>이 상황은 우리가 볼 수 없었던 빨강-초록-검정 테두리 전환과 정확히 일치합니다!</p>
<p>반면에 <code>useEffect</code>의 흐름은 두 가지 작업으로 나뉩니다.</p>
<p><img decoding="async" loading="lazy" alt="use-effect-flow" src="https://mooyeon-choi.github.io/assets/images/use-effect-flow-1fd36b51d21347cdf2cbda65e1902789.png" width="2082" height="532" class="img_ev3q"></p>
<p>첫 번째는 모든 버튼에 있는 네비게이션의 "초기" 패스를 렌더링합니다. 두 번째는 필요 없는 하위 항목을 제거합니다. 그사이 리페인팅이 진행됩니다! timeout 내에서 테두리를 사용하는 상황과 정확히 일치하는 상황입니다.</p>
<p>그래서 처음에 가졌던 질문에 답을 하자면. <code>useLayoutEffect</code>를 사용해도 안전한가요? 네! 성능이 저하될 수 있나요? 물론이죠! 마지막으로 필요한 것은 전체 리액트 앱이 하나의 거대한 동기식 "작업"으로 바뀌는 것입니다.</p>
<p>요소의 실제 크기에 따라 UI를 조정해야하기 때문에 발생하는 시각적 "결함"을 제거해야하는 경우에만 <code>useLayoutEffect</code>를 사용하세요. 다른 모든 경우에는 <code>useEffect</code>를 사용하세요. 그리고 이펙트가 필요하지 않을 수 있습니다. <a href="https://react.dev/learn/you-might-not-need-an-effect" target="_blank" rel="noopener noreferrer">(당신은 이펙트가 필요하지 않을 수 있다 - 리액트)</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="useeffect에-대해-좀-더-자세히-알아보기">useEffect에 대해 좀 더 자세히 알아보기<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#useeffect%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A2%80-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%9E%88-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0" class="hash-link" aria-label="useEffect에 대해 좀 더 자세히 알아보기에 대한 직접 링크" title="useEffect에 대해 좀 더 자세히 알아보기에 대한 직접 링크">​</a></h2>
<p><code>setTimeout</code> 내부에 실행되는 <code>useEffect</code>의 멘탈 모델은 그 차이점을 이해하는데 편리하지만, 기술적으로는 옳지 않습니다. 우선 구현 세부 사항을 명확하게하기 위해 리액트는 <code>postMessage</code>와 <code>requestAnimationFrame</code> 트릭을 함께 사용합니다. 저도 이런 방법을 몰랐습니다. 세부 사항을 좋아하는 사람들은 여기 설명을 참고하세요. <a href="https://stackoverflow.com/questions/56727477/react-how-does-react-make-sure-that-useeffect-is-called-after-the-browser-has-h/56727837#56727837" target="_blank" rel="noopener noreferrer">리액트: 어떻게 리액트는 브라우저가 페인트할 기회를 얻은 후에 <code>useEffect</code>가 호출되는 것을 확인 할 수 있을까요?</a></p>
<p>두 번째, 실제로 비동기가 동작한다는 보장이 없습니다. 리액트는 가능한 한 최적화하려고 하지만 브라우저가 페인트 전에 동작하여 결과적으로는 차단될 수도 있습니다. 이러한 현상 중 하나는 <code>useLayoutEffect</code>가 이미 어딘가 업데이트 체인을 가지고 있는 경우입니다. 추론과 작동 방식을 이해해야 한다면 많은 세부 사항에 대한 아주 좋은 연구가 있습니다. <a href="https://blog.thoughtspile.tech/2021/11/15/unintentional-layout-effect/" target="_blank" rel="noopener noreferrer">useEffect는 가끔 페인트 전에 실행됩니다.</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs의-uselayouteffect와-기타-ssr-프레임워크들">Next.js의 useLayoutEffect와 기타 SSR 프레임워크들<a href="https://mooyeon-choi.github.io/blog/no-more-flickering-ui#nextjs%EC%9D%98-uselayouteffect%EC%99%80-%EA%B8%B0%ED%83%80-ssr-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EB%93%A4" class="hash-link" aria-label="Next.js의 useLayoutEffect와 기타 SSR 프레임워크들에 대한 직접 링크" title="Next.js의 useLayoutEffect와 기타 SSR 프레임워크들에 대한 직접 링크">​</a></h2>
<p>저수준의 자바스크립트와 브라우저에 대한 내용은 충분하고 운영 코드로 돌아갑시다. 왜냐하면 "실생활"에선 이런 것들이 자주 신경 쓸 필요가 없기 때문입니다. "실생활"에서 우리는 아름다운 반응형 네비게이션 코드를 작성하고 Next.js와 같은 아주 멋진 프레임워크를 통해 훌륭한 사용자 경험을 구축하길 원합니다.(또는 다른 프레워크, 이건 Next.js 프로모션 아티클이 아닙니다😅.)</p>
<p>그리고 우리가 시도할 때, 우리가 가장 먼저 알아차릴 것은 그것이 미친 듯이 동작하지 않은 것입니다. 여전히 결함은 존재하고, 더 이상 마법 같은 것은 없습니다. <a href="https://codesandbox.io/p/devbox/simple-nextjs-uselayout-example-forked-y26hsp?workspaceId=2a1e6848-71ef-4937-b540-01f02d417e4a" target="_blank" rel="noopener noreferrer">이 예제</a>를 보고 페이지를 몇 번 새로고침 해보세요. 또는 Next.js 앱이 있는 경우 이전에 수정한 네비게이션을 복사-붙여 넣기 해보세요.</p>
<p>무슨 일이죠?? 🤨</p>
<p>SSR(Server-side rendering)은 일부 프레임워크에서 기본적으로 지원하는 멋진 기능입니다. 그리고 이와 같은 일이 생길 때 정말 고통스럽습니다.</p>
<p>SSR을 사용한다면 첫 단계로 코드가 브라우저에 도달하기 전에 리액트 컴포넌트를 렌더링하고 모든 생명주기 이벤트는 서버에서 호출합니다. 만약 SSR 작동 방식에 익숙하지 않다면, 백엔드의 어딘가에 있는 일부 메서드가 <code>React.renderToString(&lt;App /&gt;)</code>과 같은 것을 호출한다는 것을 의미합니다. 그런 다음 리액트는 앱의 모든 컴포넌트를 살펴보고, 이를 "렌더링"(단지 함수를 호출하기만 하는 함수)한 다음 해당 컴포넌트를 나타내는 HTML을 생성합니다.</p>
<p><img decoding="async" loading="lazy" alt="react-to-html-ssr" src="https://mooyeon-choi.github.io/assets/images/react-to-html-ssr-0de641329454c833c4458e858922f1ed.png" width="1724" height="950" class="img_ev3q"></p>
<p>그런 다음, 이 HTML은 브라우저로 보낼 페이지에 삽입되고 종료합니다. 예전처럼 모든 것이 서버에서 생성되고 메뉴를 열 때만 자바스크립트를 사용했습니다. 그 후, 브라우저에서는 페이지를 다운로드하여 우리에게 보여주고, 모든 스크립트를 다운로드하고(리액트 포함), 실행하여(다시 리액트 포함), 리액트는 미리 생성된 HTML을 거쳐 약간의 상호작용을 합니다.</p>
<p>여기서 문제는 첫번째 HTML 생성 시 브라우저가 아니라는 것입니다. 따라서 요소의 실제 크기를 계산하는 것과 관련된 모든 작업(<code>useLayoutEffect</code>와 같은)은 서버에서 간단하게 작동하지 않습니다. 아직 너비가 있는 요소는 없으므로, 그건 단지 문자에 불과합니다. 그리고 <code>useLayoutEffect</code>의 전체적인 목적은 요소들의 크기에 접근하는 것이므로 서버에서 실행하는 것에 큰 의미는 없습니다. 그리고 리액트도 그렇게 하지 않습니다.</p>
<p>결과적으로 브라우저가 아직 상호작용하지 않은 페이지를 표시할 때 처음 로드 중에 우리가 보는 것은 컴포넌트의 "첫 번째 패스" 단계에서 렌더링한 것입니다. "더 보기" 버튼을 포함합니다. 브라우저가 모든 것을 실행할 기회를 얻고 리액트가 활성화되면 마침내 <code>useLayoutEffect</code>를 실행할 수 있고, 버튼은 숨겨집니다. 하지만 거기엔 시각적 결함이 있습니다.</p>
<p>이를 해결하는 방법은 사용자 경험의 문제이고 "기본적으로" 사용자에게 무엇을 표시할지는 전적으로 당신에게 달려 있습니다. 메뉴 대신에 "로딩" 상태를 보여 줄 수 있습니다. 또는 항목을 완전히 숨기고 클라이언트에서만 렌더링할 수도 있습니다. 그건 당신에게 달려 있습니다.</p>
<p>이를 수행하는 한 가지 방법은 "shouldRender" 상태 변수를 도입하고 <code>useEffect</code>에서 "true"로 바꾸는 것입니다.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:#d73a49">Component</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// SSR에서 window가 있는지 확인합니다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">SomeNavigationSubstitude</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Navigation</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>기술적으로 <code>typeof window === undefined</code>는 SSR 환경(서버에는 window가 없음)을 나타내지만, 이 방식은 제대로 동작하지 않습니다. 리액트는 서버에서 내려준 HTML과 첫번째 렌더링 결과가 정확히 일치해야함을 요구합니다. 그렇지 않으면 앱이 술에 취한 것처럼 동작합니다. 이 주제에 대한 또 다른 자세한 내용을 원하신다면 여기 설명을 참고하세요. <a href="https://www.joshwcomeau.com/react/the-perils-of-rehydration/" target="_blank" rel="noopener noreferrer">(재수화의 위험)</a></p>
<hr>
<p>아, "이봐, 쉽고 멋진 속임수구나"라고 가볍고 산뜻하게 생각했던 아티클이 어쩐지 거의 렌더링 심층 분석으로 바뀌었습니다. 이 모든 일이 끝난 후에도 여전히 저와 함께 있기를 바라며, 😅 아래는 더 깊이 파고드는 데 도움이 될 수 있는 참고 자료입니다.</p>
<ul>
<li><a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noopener noreferrer">Dan Abramov의 리액트의 UI 런타임</a>, 이를 위해 당신의 모든 저녁 시간을 내주세요.</li>
<li><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener noreferrer">GitHub - acdlite/react-fiber-architecture</a>: 리액트의 새로운 핵심 알고리즘인 리액트 Fiber에 대한 설명</li>
<li><a href="https://blog.xnim.me/event-loop-and-render-queue" target="_blank" rel="noopener noreferrer">브라우저 이벤트루프</a>: 마이크로, 마이크로 테스크, 콜 스텍, 렌더 큐: 레이아웃, 페인트, 합성</li>
<li><a href="https://web.dev/rendering-performance/" target="_blank" rel="noopener noreferrer">렌더링 성능</a></li>
<li>재<a href="https://www.joshwcomeau.com/react/the-perils-of-rehydration/" target="_blank" rel="noopener noreferrer">수화의 위험성</a></li>
<li><a href="https://blog.thoughtspile.tech/2021/11/15/unintentional-layout-effect/" target="_blank" rel="noopener noreferrer">useEffect는 가끔 페인트 전에 실행합니다.</a></li>
<li><a href="https://react.dev/learn/you-might-not-need-an-effect" target="_blank" rel="noopener noreferrer">Effect가 필요하지 않을 수도 있습니다 - 리액트</a></li>
<li><a href="https://react.dev/learn/render-and-commit" target="_blank" rel="noopener noreferrer">렌더와 커밋 - 리액트</a></li>
</ul>
<p>유튜브를 통해 지식을 확고히 해보세요. 때로는 3초짜리 애니메이션이 두 단락의 텍스트보다 상황을 더 잘 설명할 수 있습니다.</p>
<p><a href="https://youtu.be/__tm1dyMi4A" target="_blank" rel="noopener noreferrer">Youtube - "깜빡이는" UI를 거부하세요: useLayoutEffect의 페인팅 및 브라우저 이야기</a></p>
<p>다음에 또 봐요!</p>]]></content:encoded>
            <category>React</category>
            <category>Javascript</category>
            <category>frontend</category>
            <category>useEffect</category>
            <category>useLayoutEffect</category>
        </item>
        <item>
            <title><![CDATA[Refs in React - DOM 접근에서 명령형 API까지]]></title>
            <link>https://mooyeon-choi.github.io/blog/refs-from-dom-to-api</link>
            <guid>https://mooyeon-choi.github.io/blog/refs-from-dom-to-api</guid>
            <pubDate>Sat, 16 Mar 2024 21:51:00 GMT</pubDate>
            <description><![CDATA[FrontEnd에 관한 도움이 될만한 자료들을 번역]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>FrontEnd에 관한 도움이 될만한 자료들을 번역</p>
</blockquote>
<p><img decoding="async" loading="lazy" alt="refs-from-dom-to-api" src="https://mooyeon-choi.github.io/assets/images/refs-from-dom-to-api_welcome-7303ecf9f86b2db71a6d43976974b1b7.png" width="1080" height="720" class="img_ev3q"></p>
<ul>
<li>원문: <a href="https://www.developerway.com/posts/refs-from-dom-to-api" target="_blank" rel="noopener noreferrer">https://www.developerway.com/posts/refs-from-dom-to-api</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/refs-from-dom-to-api#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>useRef를 통한 React DOM 접근</li>
<li>부모 요소에서 자식 요소로 prop로 ref 전달하기</li>
<li>forwardRef로 ref 전달하기</li>
<li>useImperativeHandle를 사용하는 명령형 API</li>
<li>명령형 API에서 useImperativeHandle 제거하기</li>
</ol></div></div>
<p>React에서 DOM에 접근 해야하는 이유와 Ref가 이를 어떻게 도와주는지, <code>useRef</code>, <code>forwordRef</code>, <code>useImperativeHandle</code> Hook 가 무엇이고 어떻게 사용하는지 알아봅시다.</p>
<p>React의 많은 장점 중 하나는 실제 DOM을 다루는 복잡한 과정들을 추상화하여 쉽게 다룰 수 있다는 것입니다. 이제 각 요소들을 직접 쿼리하거나, 해당 요소에 클래스를 추가하는 방법에 대해 고민하거나, 브라우저가 달라 어려움을 겪지 않고도 사용자 경험에 집중하여 화면 구성 요소를 작성할 수 있습니다. 그러나 가끔은(아주 드물지만!) 실제 DOM에 직접 접근해야하는 경우도 여전히 있습니다.</p>]]></content:encoded>
            <category>React</category>
            <category>Javascript</category>
            <category>frontend</category>
            <category>useEffect</category>
            <category>useLayoutEffect</category>
        </item>
        <item>
            <title><![CDATA[Dart 완전 정복 - 효율적이고 강력한 프로그래밍을 위한 8가지 고급 테크닉]]></title>
            <link>https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming</link>
            <guid>https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming</guid>
            <pubDate>Mon, 11 Mar 2024 21:50:00 GMT</pubDate>
            <description><![CDATA[Dart에 관한 도움이 될만한 자료들을 번역]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Dart에 관한 도움이 될만한 자료들을 번역</p>
</blockquote>
<ul>
<li>원문: <a href="https://medium.com/gitconnected/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming-76c4ad13c743" target="_blank" rel="noopener noreferrer">https://medium.com/gitconnected/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming-76c4ad13c743</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>구글에서 개발한 현대적인 프로그래밍 언어 <strong>Dart</strong>는 그 간결한 문법과 강력한 기능, 특히 <strong>Flutter</strong> 프레임워크와의 연계성으로 개발자들 사이에서 상당한 찬사를 받았습니다. 이 글에서는 기술적 깊이, 영감을 주는 특성, 그리고 <strong>Dart</strong> 개발 효율성을 크게 향상시킬 수 있는 능력으로 알려진 8가지 놀라운 <strong>Dart</strong> 프로그래밍 기법을 탐구합니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>제네릭 타입 별칭 활용</li>
<li>스트림에 대한 고급 처리 기법</li>
<li><code>isolate</code>를 활용한 경량 병렬 컴퓨팅</li>
<li>열거형(Enum)</li>
<li><code>const</code> 생성자 활용법</li>
<li>메타데이터 주석 및 리플렉션</li>
<li>익명 믹스인(Mixins)</li>
<li>비동기 프로그래밍 기술</li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-제네릭-타입-별칭-활용">1. 제네릭 타입 별칭 활용<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#1-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%AD-%ED%99%9C%EC%9A%A9" class="hash-link" aria-label="1. 제네릭 타입 별칭 활용에 대한 직접 링크" title="1. 제네릭 타입 별칭 활용에 대한 직접 링크">​</a></h2>
<p>Type aliases를 활용하면 간단한 이름으로 더 복잡한 형식을 정의할 수 있으므로 중첩된 제네릭을 처리할 때 유용합니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token class-name">ComplexList</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">T</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">T</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">T</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Used for creating lists with specific key-value pair types</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">ComplexList</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> complexList </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-literal string" style="color:#e3116c">'key1'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'value1'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-literal string" style="color:#e3116c">'key2'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'value2'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Operations on a complex collection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  complexList</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-literal string" style="color:#e3116c">'key3'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'value3'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">complexList</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>제네릭 형식 별칭은 코드 구성과 가독성을 향상시킵니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-스트림에-대한-고급-처리-기법">2. 스트림에 대한 고급 처리 기법<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#2-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EA%B8%89-%EC%B2%98%EB%A6%AC-%EA%B8%B0%EB%B2%95" class="hash-link" aria-label="2. 스트림에 대한 고급 처리 기법에 대한 직접 링크" title="2. 스트림에 대한 고급 처리 기법에 대한 직접 링크">​</a></h2>
<p><code>stream</code>에서 제공하는 다양한 연산자 및 변환기를 활용하면 이벤트 스트림 및 비동기 데이터를 처리하기 쉽습니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Stream</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics">int</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timedCounter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Duration</span><span class="token plain"> interval</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> int maxCount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  int count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> maxCount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">delayed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">interval</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">yield</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">++</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Listening to a Stream and executing specific logic</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> count </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">timedCounter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Duration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">seconds</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>async* yield</code>를 활용하면 데이터 시퀀스를 내보내는 <strong>Streams</strong>를 생성하여 비동기 프로그래밍에 대한 강력한 지원을 제공할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-isolates를-활용한-경량-병렬-컴퓨팅">3. <strong>Isolates</strong>를 활용한 경량 병렬 컴퓨팅<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#3-isolates%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B2%BD%EB%9F%89-%EB%B3%91%EB%A0%AC-%EC%BB%B4%ED%93%A8%ED%8C%85" class="hash-link" aria-label="3-isolates를-활용한-경량-병렬-컴퓨팅에 대한 직접 링크" title="3-isolates를-활용한-경량-병렬-컴퓨팅에 대한 직접 링크">​</a></h2>
<p><code>isolate</code>는 서로 다른 실행 스레드에서 동시에 작업을 실행하는 역할을 합니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:isolate'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">computeOnIsolate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> receivePort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ReceivePort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Isolate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_heavyComputation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> receivePort</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sendPort</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> message </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> receivePort</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">first </span><span class="token operator" style="color:#393A34">as</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_heavyComputation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">SendPort</span><span class="token plain"> sendPort</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Intensive computation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Assume this is a CPU-intensive operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  sendPort</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Computation complete'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">computeOnIsolate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>isolate</code>를 통해 <code>main</code>에 영향을 주지 않고 <code>Flutter</code> 애플리케이션에서 시간이 많이 걸리는 작업을 수행할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-열거형enum">4. 열거형(Enum)<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#4-%EC%97%B4%EA%B1%B0%ED%98%95enum" class="hash-link" aria-label="4. 열거형(Enum)에 대한 직접 링크" title="4. 열거형(Enum)에 대한 직접 링크">​</a></h2>
<p><code>Enum</code> 타입은 명명된 상수 집합을 나타내는데에도 유용하지만, 확장 메서드를 활용하면 기능을 더욱 향상시킬 수 있습니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">ConnectionState</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  none</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  waiting</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  active</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  done</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">extension</span><span class="token plain"> </span><span class="token class-name">ConnectionStateX</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token class-name">ConnectionState</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  bool </span><span class="token keyword" style="color:#00009f">get</span><span class="token plain"> isTerminal </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token class-name">ConnectionState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">done</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ConnectionState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">active</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Is the connection terminal? </span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression">state</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">.</span><span class="token string-literal interpolation expression">isTerminal</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>Enum</code> 타입의 확장성은 객채지향과 유사한 패턴을 제공하여 안정성을 유지하면서 기능을 추가할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-const-생성자-활용법">5. <code>const</code> 생성자 활용법<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#5-const-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%99%9C%EC%9A%A9%EB%B2%95" class="hash-link" aria-label="5-const-생성자-활용법에 대한 직접 링크" title="5-const-생성자-활용법에 대한 직접 링크">​</a></h2>
<p><code>const</code> 생성자를 사용하면 컴파일 시간에 변경할 수 없는 인스턴스를 만들어 성능 최적화에 도움이 됩니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ImmutableWidget</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> int id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">ImmutableWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token metadata function" style="color:#d73a49">@override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'ImmutableWidget(id: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">id</span><span class="token string-literal string" style="color:#e3116c">, name: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">name</span><span class="token string-literal string" style="color:#e3116c">)'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> widget1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ImmutableWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'Widget 1'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> widget2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ImmutableWidget</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'Widget 1'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Since identifiers are the same, they refer to the same instance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">identical</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> widget2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Output: true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>const</code> 생성자를 사용하여 만든 인스턴스는 불변성(Immutable)을 가지므로 <code>Dart</code> VM 여러 위치에서 다시 사용할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-메타데이터-주석-및-리플렉션">6. 메타데이터 주석 및 리플렉션<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#6-%EB%A9%94%ED%83%80%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A3%BC%EC%84%9D-%EB%B0%8F-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98" class="hash-link" aria-label="6. 메타데이터 주석 및 리플렉션에 대한 직접 링크" title="6. 메타데이터 주석 및 리플렉션에 대한 직접 링크">​</a></h2>
<p><code>Flutter</code>에서는 라이브러리를 사용할 수 없지만 메타데이터의 사용 방법을 이해한다면 디자인에 대한 새로운 영감을 얻을 수 있습니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'dart:mirrors'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Note: Not available on non-Web platforms</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Route</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token class-name">Route</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token metadata function" style="color:#d73a49">@Route</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'/login'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">LoginPage</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> mirror </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reflectClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">LoginPage</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> instanceMirror </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> mirror</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">metadata</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> annotation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> instanceMirror</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">reflectee</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">annotation </span><span class="token operator" style="color:#393A34">is</span><span class="token plain"> </span><span class="token class-name">Route</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Route for LoginPage: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression">annotation</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">.</span><span class="token string-literal interpolation expression">path</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>주석을 통해 읽기 쉬운 메타데이터를 추가하고, 실행 시점에 리플렉션을 사용하여 이를 가져올 수 있습니다. 또한 <code>Flutter</code>에서는 코드 생성과 같은 다른 방법도 활용할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-익명-믹스인mixins">7. 익명 믹스인(Mixins)<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#7-%EC%9D%B5%EB%AA%85-%EB%AF%B9%EC%8A%A4%EC%9D%B8mixins" class="hash-link" aria-label="7. 익명 믹스인(Mixins)에 대한 직접 링크" title="7. 익명 믹스인(Mixins)에 대한 직접 링크">​</a></h2>
<p>익명 <code>Mixin</code>을 생성하면 <code>Mixin</code>을 <code>global scope</code>에 노출하지 않고도 코드를 재사용할 수 있습니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Bird</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Flying'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Swimmer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">swim</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Swimming'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">Bird</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token class-name">Swimmer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> duck </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Duck</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  duck</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  duck</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">swim</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>익명 <code>Mixin</code>을 활용하면 명시적인 <strong>Class 계층 구조</strong>를 만들지 않고도 다른 클래스에 유사한 기능을 통합할 수 있으므로 코드를 재사용할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-비동기-프로그래밍-기술">8. 비동기 프로그래밍 기술<a href="https://mooyeon-choi.github.io/blog/dart-mastery-unleashed-8-advanced-techniques-for-efficient-and-powerful-programming#8-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EC%88%A0" class="hash-link" aria-label="8. 비동기 프로그래밍 기술에 대한 직접 링크" title="8. 비동기 프로그래밍 기술에 대한 직접 링크">​</a></h2>
<p>비동기 프로그래밍에서 <code>Dart</code>는 <code>Future</code>, <code>Stream</code>, <code>async</code> 및 <code>await</code>와 같은 강력한 도구를 제공합니다.</p>
<div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fetchUserData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Assume this is a network request</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">delayed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Duration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">seconds</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'User data'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Future</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics keyword" style="color:#00009f">void</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">logInUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> userId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Attempting to log in user...'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fetchUserData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Login successful: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">data</span><span class="token string-literal string" style="color:#e3116c">'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'Login failed: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">e</span><span class="token string-literal string" style="color:#e3116c">'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">​</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">logInUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'123'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>async</code> 및 <code>await</code>를 사용하면 동기 코드와 비슷하게 표시되는 비동기 작업을 작성하여 비동기 코드를 간결하고 이해하기 쉽게 작성할 수 있습니다.</p>]]></content:encoded>
            <category>dart</category>
            <category>frontend</category>
        </item>
        <item>
            <title><![CDATA[수많은 저장소를 하나로 - 자바 스크립트 코드를 모노레포로 이동하기]]></title>
            <link>https://mooyeon-choi.github.io/blog/monorepo</link>
            <guid>https://mooyeon-choi.github.io/blog/monorepo</guid>
            <pubDate>Sat, 09 Mar 2024 21:40:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://www.aha.io/engineering/articles/monorepo" target="_blank" rel="noopener noreferrer">https://www.aha.io/engineering/articles/monorepo</a></li>
<li>번역글: <a href="https://velog.io/@superlipbalm/monorepo?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">https://velog.io/@superlipbalm/monorepo?utm_source=substack&amp;utm_medium=email</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/monorepo#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>Aha!에 입사한 글쓴이가 왜 모노레포를 필요로 하게 되었는지, 그 과정에서 어떠한 고민들을 했는지, 그리고 어떤 방법을 사용해 모노레포로 전환했는지 자세히 설명하고 있습니다. 모노레포 도입을 고민중이시라면 이 글을 한 번 읽어보시면 도움이 되실겁니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>모노레포가 필요한가요?</li>
<li>모노레포가 필요한데 이제 어떻게 하죠?</li>
<li>Git 기록 유지 관리</li>
<li>단순함을 유지하기</li>
<li>Nx + pnpm</li>
<li>pnpm 워크스페이스</li>
<li>Turborepo + pnpm</li>
<li>새로 배울 것이 없습니다</li>
<li>잘 작동합니다!</li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모노레포가-필요한가요">모노레포가 필요한가요?<a href="https://mooyeon-choi.github.io/blog/monorepo#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94" class="hash-link" aria-label="모노레포가 필요한가요?에 대한 직접 링크" title="모노레포가 필요한가요?에 대한 직접 링크">​</a></h2>
<p>처음 Aha에 입사했을 때 <a href="https://www.aha.io/engineering/articles/engineering-onboarding-at-aha" target="_blank" rel="noopener noreferrer">엔지니어링 온보딩</a> 프로그램이 굉장히 체계적으로 구성되어 있어 놀랐습니다. 저는 몇 주 동안 모든 팀과 친해지고 시스템의 각 부분을 배우는 데 시간을 보냈습니다. 그 당시엔 사실 이러한 온보딩 과정이 기본적인 기술 지식 이상의 것을 제공한다는 것을 몰랐습니다. 그들은 전체 개발 워크플로에 대한 문을 열어주었죠. 웹 컴포넌트 라이브러리의 간단한 스타일 변경에 두 번의 풀 리퀘스트와 30분이 걸리는 것을 보고 뭔가 이상한 문제점이 있다는 것을 알았습니다.</p>
<p>모든 제품이 하나의 Rails 저장소에 존재하므로 비즈니스 로직, UI 등을 공유하는 다중 프로덕트 <a href="https://www.aha.io/engineering/articles/from-one-many-building-a-product-suite-with-a-monolith" target="_blank" rel="noopener noreferrer">모놀리스(multiproduct monolith)</a>를 운영한다고 해도 과언이 아닙니다. 따라서 제품과 관계없이 새로운 기능을 쉽고 빠르게 작업할 수 있습니다. 이와 대조적으로, 예전에는 대부분의 자바스크립트 코드가 프라이빗 npm 패키지로 존재했습니다. 프라이빗 패키지는 여러 곳에서 코드를 재사용하는 데는 좋지만, 한 곳에서 주로 사용하는 경우에는 프로세스에 너무 많은 오버헤드가 추가되므로 최선의 선택이 아닙니다. 저희의 경우 대부분의 패키지를 Rails 모놀리스로만 가져왔습니다.</p>
<p>Aha의 엔지니어링팀은 <a href="https://www.aha.io/company/the-responsive-method" target="_blank" rel="noopener noreferrer">인터럽트 주도(interrupt driven)</a>로, 필요에 따라 컨텍스트를 쉽게 전환하고 버그를 해결하거나 팀원을 지원하거나 다른 작업을 할 수 있는 <a href="https://www.aha.io/engineering/articles/cli-tools-at-aha" target="_blank" rel="noopener noreferrer">도구</a>를 만들기 위해 큰 노력을 기울이고 있습니다. 프라이빗 npm 패키지를 작업하는 프로세스는 전혀 인터럽트 주도적이지 않았습니다. 프라이빗 패키지 중 하나를 작업해야 한다면 웹 컴포넌트 라이브러리에서 스타일을 변경하는 것처럼 간단한 작업이라도 상당한 시간이 소요될 것이 분명했습니다.</p>
<p>지루할 수도 있지만 수동 프로세스는 매우 간단했습니다.</p>
<ol>
<li>패키지의 저장소를 복제합니다.</li>
<li>알맞은 node 버전으로 npm 종속성 패키지들을 설치합니다.</li>
<li>로컬 개발 환경을 시작합니다.</li>
<li>코드베이스를 변경합니다.</li>
<li>패키지의 로컬 개발 환경에서 변경 사항을 테스트합니다.</li>
<li>yalc를 사용하여 변경 사항이 적용된 패키지를 Rails 앱에 연결합니다.</li>
<li>로컬 앱 환경에서 변경 사항을 테스트합니다.</li>
<li>변경 사항에 만족할 때까지 4단계부터 7단계까지 반복합니다.</li>
<li>프라이빗 패키지 저장소에 새 변경 사항이 포함된 풀 리퀘스트를 만듭니다.</li>
<li>코드 리뷰를 요청합니다.</li>
<li>코드 리뷰가 완료되면 풀 리퀘스트를 머지하고 패키지의 새로운 버전을 npm에 푸시합니다.</li>
<li>Rails 앱에서 풀 리퀘스트를 생성하여 패키지 버전을 올립니다.</li>
<li>코드 리뷰를 요청합니다.</li>
<li>코드 리뷰가 완료되면 풀 리퀘스트를 머지하고 프로덕션에 배포합니다.</li>
</ol>
<p>프라이빗 npm 패키지와 관련된 모든 것을 배포하는 데 걸리는 시간은 생각했던 것보다 훨씬 길었고, 코드 리뷰를 두 번 요청하는 것 또한 리뷰어의 시간을 빼앗는 일이었습니다. 입사 첫 몇 주 동안은 이 문제에 대해 들어본 적도 없었습니다. 하지만 Aha에서 처음 몇 달 동안 여러 프라이빗 npm 패키지로 계속 작업하면서 이것이 개발자 경험을 정말 저하한다는 것을 금방 깨달았습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모노레포가-필요한데-이제-어떻게-하죠">모노레포가 필요한데 이제 어떻게 하죠?<a href="https://mooyeon-choi.github.io/blog/monorepo#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C%EB%8D%B0-%EC%9D%B4%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EC%A3%A0" class="hash-link" aria-label="모노레포가 필요한데 이제 어떻게 하죠?에 대한 직접 링크" title="모노레포가 필요한데 이제 어떻게 하죠?에 대한 직접 링크">​</a></h2>
<p>이 문제를 직접 경험하고 나니 어떤 조치든 취해야겠다는 생각이 들었습니다. 저희는 회의가 많지는 않지만 매주 매니저와 함께 회의를 진행합니다. 이 시간은 앞으로 어떤 작업을 하고 싶은지 이야기하기에 완벽한 시간입니다. 저는 현재 아키텍처에서 실현 가능한지 여부를 판단하기 위해 모노레포의 개념 증명(POC) 작업을 자원했습니다. 저희는 모노레포에 대해 매우 구체적인 목표를 세웠습니다.</p>
<ul>
<li>Git 히스토리를 유지해야 합니다: 일부 패키지는 몇 년이 지났기 때문에 모든 기록을 잃고 싶지 않았습니다.</li>
<li>단순해야 합니다: 이미 복잡한 코드베이스에 복잡성을 더하고 싶지 않았습니다.</li>
<li>개발자 경험을 개선해야 합니다: 우리는 부담을 다른 곳으로 옮기고 싶지 않았고 근본적인 해결책을 찾고 있었습니다.</li>
<li>호환성이 있어야 합니다: 툴링이나 CI를 크게 변경하고 싶지 않았습니다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-기록-유지-관리">Git 기록 유지 관리<a href="https://mooyeon-choi.github.io/blog/monorepo#git-%EA%B8%B0%EB%A1%9D-%EC%9C%A0%EC%A7%80-%EA%B4%80%EB%A6%AC" class="hash-link" aria-label="Git 기록 유지 관리에 대한 직접 링크" title="Git 기록 유지 관리에 대한 직접 링크">​</a></h2>
<p>코드는 살아있는 생명체이며, 모노레포를 적용하기 위해 해결해야 할 주요 문제 중 하나는 그 기록을 유지하는 것이었습니다. 우리는 패키지를 Rails 앱의 루트에 있는 "packages"라는 폴더로 마이그레이션하고 싶었습니다. 저장소 간에 코드를 이동할 때 Git 히스토리를 유지하기 위해 취할 수 있는 몇 가지 옵션이 있지만, 저희는 <code>git mv</code>와 <code>git merge --allow-unrelated-histories</code>를 조합하는 간단한 방법을 사용하기로 했습니다. 저장소를 Rails 앱으로 이동하기 위해 따랐던 절차는 매우 간단했습니다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 패키지 저장소의 루트에서</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 모든 코드를 packages/[package-name] 이름으로 이동하여 Rails 앱에 머지할 수 있도록 합니다.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git mv -k * packages/[package-name]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git mv -k .* packages/[package-name]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 변경 사항 커밋 및 푸시</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add --all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "package-name: prepare codebase for monorepo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push origin master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Rails 앱의 루트에서</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Rails 앱에 패키지의 원격 저장소 추가</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git remote add [package-name] [package-name].git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git fetch [package-name]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 패키지 저장소를 Rails 앱에 머지</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git merge [package-name]/master --allow-unrelated-histories</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 패키지 원격 저장소 제거</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git remote remove [package-name]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 변경 사항 커밋 및 푸시</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add --all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Add package-name to the monorepo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push origin master</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이러한 간단한 명령어를 사용하여 Git 히스토리를 유지하면서 패키지 코드를 Rails 앱으로 옮길 수 있었습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="단순함을-유지하기">단순함을 유지하기<a href="https://mooyeon-choi.github.io/blog/monorepo#%EB%8B%A8%EC%88%9C%ED%95%A8%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0" class="hash-link" aria-label="단순함을 유지하기에 대한 직접 링크" title="단순함을 유지하기에 대한 직접 링크">​</a></h2>
<p>Git 히스토리를 유지할 방법을 파악한 후 다음 작업으로 넘어갔습니다. 솔직히 말하면 가장 중요한 작업은 코드베이스의 복잡성을 많이 증가시키지 않고 모노레포를 구축하는 방법을 알아내는 것이었습니다. 자바스크립트 모노레포에 대한 정보를 검색하면 다음과 같은 내용을 찾을 수 있습니다.</p>
<p><img decoding="async" loading="lazy" alt="node package managers" src="https://mooyeon-choi.github.io/assets/images/node_package_managers-0583a045b40b5dc92823c917466c1691.png" width="3154" height="1298" class="img_ev3q"></p>
<blockquote>
<p>모노레포를 관리하기 위한 훌륭한 도구가 많지만, 자바스크립트와 타입스크립트를 염두에 두고 만들어진 도구에만 초점을 맞췄습니다.</p>
</blockquote>
<p>요컨대 <a href="https://lerna.js.org/" target="_blank" rel="noopener noreferrer">Lerna</a>, <a href="https://nx.dev/" target="_blank" rel="noopener noreferrer">Nx</a>, <a href="https://turbo.build/repo" target="_blank" rel="noopener noreferrer">Turborepo</a> 그리고 <a href="https://rushjs.io/" target="_blank" rel="noopener noreferrer">Rush.js</a>와 같은 도구를 찾을 수 있습니다. 이러한 도구들의 문서를 읽어보면 npm, Yarn 또는 pnpm과 함께 사용할 수 있기 때문에 가능한 조합이 매우 많다는 걸 알 수 있습니다. 따라서 프로젝트의 구성과 필요에 따라 특정 조합이 다른 조합보다 더 적합할 수 있습니다.</p>
<p>저희는 릴리스 간 큰 변경에 대한 걱정 없이 몇 년 동안 성장할 수 있는 도구를 선택하고 싶었습니다. 또한 사용하기 쉬운 인터페이스가 필요했습니다. 하지만 모든 도구를 다 사용해 보지 않으면 어떤 도구가 자신에게 적합한지 알기 어렵겠죠? 저희는 처음에 사용해 보고 싶었던 도구 목록에서 Lerna와 Rush.js를 제외했습니다. Nx의 배후에 있는 회사가 <a href="https://dev.to/nrwl/lerna-is-dead-long-live-lerna-3jal" target="_blank" rel="noopener noreferrer">Lerna의 관리권</a>을 인수했기 때문에 Nx와 Lerna 중에서 Nx만 사용해 보고 싶었습니다. Rush.js는 많은 기능을 갖춘 훌륭한 도구이지만 수백 개의 패키지가 있는 모노레포에서 빛을 발하도록 설계되었기 때문에 우리에게는 적합하지 않았습니다. 우리는 <a href="https://nx.dev/" target="_blank" rel="noopener noreferrer">Nx</a>와 <a href="https://turbo.build/repo" target="_blank" rel="noopener noreferrer">Turborepo</a>를 평가하는 POC를 진행하기로 했습니다. 모노레포에서 원했던 것을 고려했을 때 매력적인 유사한 기능들을 공유하기 때문입니다. 여기에는 다음이 포함됩니다.</p>
<ul>
<li>로컬 컴퓨팅 캐싱</li>
<li>로컬 작업 오케스트레이션</li>
<li>분산 컴퓨팅 캐싱</li>
<li>영향을 받는 프로젝트/패키지 탐지</li>
<li>작업 공간 분석</li>
<li>종속성 그래프 시각화</li>
</ul>
<p>필요하지 않은 도구는 사용하고 싶지 않았기 때문에 POC에 pnpm 작업 공간도 포함했습니다. 이러한 기능이 많지는 않지만, 당시에는 모노레포에 이러한 모든 기능이 필요한지 여부가 불분명했습니다. POC를 수행한 후 각 도구의 장단점을 더 잘 이해할 수 있었습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nx--pnpm">Nx + pnpm<a href="https://mooyeon-choi.github.io/blog/monorepo#nx--pnpm" class="hash-link" aria-label="Nx + pnpm에 대한 직접 링크" title="Nx + pnpm에 대한 직접 링크">​</a></h2>
<p>저희가 처음 살펴본 도구는 <a href="https://nx.dev/" target="_blank" rel="noopener noreferrer">Nx</a>였습니다. 매우 강력하고 확장 가능한 도구이긴 하지만 코드베이스에 불필요한 복잡성을 더했습니다. 엔지니어가 작업을 수행하기 위해 배워야 하는 또 다른 레이어를 추가하고 싶지 않았습니다. <a href="https://nx.dev/core-features/run-tasks#define-tasks" target="_blank" rel="noopener noreferrer">Nx에서 작업을 정의하는 방식과 타깃의 개념</a>은 이해하기 쉽지만, 독특합니다. 따라서 한 번 선택한 후 다른 도구로 전환할 때 어려움을 겪을 수 있습니다. 확장성이 있긴 하지만 플러그인 에코시스템이 있다는 것은 다른 사람의 코드를 사용하거나 모노레포를 더욱 커스터마이징하고 싶다면 직접 플러그인을 만들 수 있다는 것을 의미합니다. 기능은 있었지만 플러그 앤 플레이 방식은 아니었습니다. 또한 Nx 전용 설정으로 인한 러닝 커브도 다소 까다로워서 시간과 리소스 투자를 정당화하기가 어려웠습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pnpm-워크스페이스">pnpm 워크스페이스<a href="https://mooyeon-choi.github.io/blog/monorepo#pnpm-%EC%9B%8C%ED%81%AC%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4" class="hash-link" aria-label="pnpm 워크스페이스에 대한 직접 링크" title="pnpm 워크스페이스에 대한 직접 링크">​</a></h2>
<p>Nx에서 설정한 매우 높은 기준을 가지고 저희는 <a href="https://pnpm.io/workspaces" target="_blank" rel="noopener noreferrer">pnpm 워크스페이스</a>을 사용해 보았습니다. 훌륭하게 작동하고 사용하기 쉬우며 작동을 위해 아무것도 추가할 필요가 없습니다. 몇 분 안에 설정할 수 있는 것을 찾고 있다면 아마도 최고의 선택 중 하나일 것입니다. 하지만 저희 모노레포에서 사용하기에는 로컬 컴퓨팅 캐싱이나 로컬 작업 오케스트레이션과 같은 기본적인 기능이 부족했습니다. 따라서 로컬 또는 CI에서 모노레포를 관리하는 데 도움이 되지 않았기 때문에 사용을 정당화하기는 어려웠습니다. 저희는 모노레포를 관리하기 위한 맞춤형 툴을 구축하고 싶지 않았습니다. 그리고 이것이 가장 마찰이 적은 접근 방식이었지만 40명 이상의 엔지니어로 구성된 팀에게는 최선의 선택이 아니었습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="turborepo--pnpm">Turborepo + pnpm<a href="https://mooyeon-choi.github.io/blog/monorepo#turborepo--pnpm" class="hash-link" aria-label="Turborepo + pnpm에 대한 직접 링크" title="Turborepo + pnpm에 대한 직접 링크">​</a></h2>
<p>마지막으로 <a href="https://turbo.build/repo" target="_blank" rel="noopener noreferrer">Turborepo</a>를 사용해 보았습니다. 이 시점에 우리는 Nx가 원하는 기능을 제공하지만 매우 독특하고 학습 곡선이 가파르다는 것, 그리고 pnpm 워크스페이스에는 일상적인 작업에서 시간을 절약할 수 있는 기본 기능이 부족하지만, 몇 가지 새로운 개념만 익히면 간단하고 이해하기 쉽다는 것을 알았습니다. 로컬 컴퓨팅 캐싱, 로컬 작업 오케스트레이션, 영향을 받는 프로젝트/패키지를 감지하는 기능 등 Nx에서 마음에 들었던 모든 기능을 Turborepo가 제공하면서도 pnpm 워크스페이스보다 별로 복잡하지 않다는 사실을 알게 되어 매우 좋았습니다. 가파른 학습 곡선 없이 원하는 모든 것을 이미 갖춘 이 간단한 추가 레이어를 사용하면 윈-윈할 수 있었습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="새로-배울-것이-없습니다">새로 배울 것이 없습니다<a href="https://mooyeon-choi.github.io/blog/monorepo#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B8-%EA%B2%83%EC%9D%B4-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="새로 배울 것이 없습니다에 대한 직접 링크" title="새로 배울 것이 없습니다에 대한 직접 링크">​</a></h2>
<p>POC는 툴을 확정하기 전에 짧은 기간 동안 많은 것을 시도해 볼 수 있는 좋은 기회였습니다. 결국 저희는 현재 빌드 시스템에서 잘 작동하고 사용하기 매우 쉽다는 점 때문에 Turborepo를 선택했습니다. 개발자 경험의 관점에서 보면 우리가 이미 하고 있던 작업과 매우 유사합니다. 모노레포를 도입하기 전에는 프런트엔드 개발 서버를 시작하려면 <code>yarn start</code>를 실행해야 했습니다. 이제 모노레포에서는 <code>pnpm start</code>를 실행하면 끝입니다. 모노레포 패키지나 구성을 적극적으로 변경하지 않는 엔지니어라면 다른 것은 알 필요 없이 사용할 수 있습니다. 고급 Turborepo 기능 중 일부를 사용하려면 해당 문서를 확인하고 커맨드에 플래그를 추가하면 됩니다.</p>
<p>다시 말하지만, 우리 팀에게는 가능한 한 마찰이 없는 도구를 선택하는 것이 가장 중요했습니다. 저희는 Rails를 사랑합니다. 새로운 것을 추가할 때는 일반적으로 설정 원칙에 기반한 컨벤션을 따르려고 노력하는데, 모노레포에서도 마찬가지였습니다.</p>
<p>Turborepo는 다음과같이 간단한 방법으로 모든 파이프라인을 정의하는 <code>turbo.json</code>이라는 단일 JSON 파일로 설정됩니다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "$schema": "https://turbo.build/schema.json",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "pipeline": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "build": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "cache": true,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "outputs": ["dist/**"],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // 워크스페이스의 `build` 커맨드는 dependencies 또는 devDependencies의</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // `build` 커맨드가 먼저 완료된 후 실행됩니다</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "dependsOn": ["^build"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "start": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // 워크스페이스의 `start` 커맨드는 long-running 프로세스입니다</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "persistent": true,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "dependsOn": ["^build"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "test": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // 워크스페이스의 `test` 커맨드는 워크스페이스의</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // `lint`와 `build` 커맨드가 완료된 후 실행됩니다"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "dependsOn": ["lint", "build"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "deploy": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // 워크스페이스의 `deploy` 커맨드는 워크스페이스의</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // `build`와 `test` 커맨드가 완료된 후 실행됩니다"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "dependsOn": ["build", "test"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 워크스페이스의 `lint` 명령에는 종속성이 없습니다</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "lint": {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>각 파이프라인의 이름은 각 패키지에서 실행될 <code>pnpm script</code>의 이름입니다(종속성 그래프에 정의된 순서를 따름). 이 파일을 설정하기 위한 여러 가지 옵션이 있지만 <code>dependsOn</code>, <code>outputs</code>, <code>cache</code> 그리고 <code>persistent</code> 가장 관련성이 높습니다.</p>
<ol>
<li><code>dependsOn</code>: 작업이 종속되는 작업 목록</li>
<li><code>outputs</code>: 작업의 캐시 가능한 파일 시스템 출력에 대한 글로브 패턴 집합입니다.</li>
<li><code>cache</code>: 작업 <code>outputs</code>를 캐시 할지 여부</li>
<li><code>persistent</code>: 개발 서버 또는 --watch 모드와 같이 long-running 프로세스인 경우 작업을 persistent로 지정할 수 있습니다.</li>
</ol>
<p><code>turbo.json</code> 파일 설정만 신경 쓰면 됩니다. <code>dependency graph</code>는 자동 생성되므로 무엇이 무엇에 종속되는지 Turborepo에 알려줄 필요가 없습니다. 다음과 같은 간단한 종속성 그래프가 있습니다.</p>
<p><img decoding="async" loading="lazy" alt="dependency graph" src="https://mooyeon-choi.github.io/assets/images/dependency_graph-93f54cc2b5926d60615438b820ef6fe7.png" width="2042" height="1448" class="img_ev3q"></p>
<p>위의 <code>turbo.json</code> 파일과 <code>dependency graph</code>를 예로 들어보면, Turborepo는 <code>start</code> 파이프라인을 실행할 때마다 다음을 수행합니다.</p>
<ol>
<li>Web components 라이브러리 빌드</li>
<li>Text editor 패키지 빌드</li>
<li>Whiteboard 패키지 빌드</li>
<li>Dropdown 패키지 빌드</li>
<li>모든 패키지에 대한 watch server 시작</li>
<li>메인 앱의 watch server 시작</li>
</ol>
<p>Turborepo를 사용하면 무슨 일이 일어나고 있는지 매우 쉽게 이해할 수 있으며, 새로운 개념을 배우거나 복잡한 아이디어를 생각할 필요가 없습니다. 팀원 모두가 이 기능을 사용하기 위해 내부 작동 방식을 이해할 필요는 없습니다. 하지만 turborepo와 turborepo의 개념은 간단하기 때문에 누구든 모노레포를 변경하고자 하는 경우 복잡한 작업이 필요하지 않습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="잘-작동합니다">잘 작동합니다!<a href="https://mooyeon-choi.github.io/blog/monorepo#%EC%9E%98-%EC%9E%91%EB%8F%99%ED%95%A9%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="잘 작동합니다!에 대한 직접 링크" title="잘 작동합니다!에 대한 직접 링크">​</a></h2>
<p>저는 2022년 1월에 Aha!에 합류했고, 2023년 3분기 초에 모노레포를 적용했습니다. 그 이후로 팀원 모두가 프로덕션 환경과 로컬 환경 모두에서 문제 없이 작동하고 있습니다. CI와 빌드 시스템에 약간의 변경이 필요했지만 미미했습니다. 그리고 대부분의 경우 과거에 실행하던 코드를 단순화하는 것으로 끝났습니다. Turborepo가 제공하는 모든 기능을 사용하지 않고 필요한 기능만 사용하고 있습니다. 사용을 강제하지 않고 원하는 도구만 사용할 수 있는 점이 정말 만족스럽습니다.</p>
<p>모노레포를 도입한 이후 약 450개의 풀 리퀘스트에서 패키지 변경 사항을 포함한 2,500개에 가까운 커밋을 푸시했습니다. 이 블로그의 서두에서 저는 프라이빗 패키지의 변경 사항을 릴리스하는 기존 프로세스가 아주 작은 변경 사항을 적용할 때도 느리다고 이야기했습니다. 보수적으로 계산하면, 모든 풀 리퀘스트가 모노레포까지 평균 30분이 더 걸렸다고 할 수 있습니다. 따라서 매달 55시간에 가까운 개발 시간, 더 정확하게는 화면 앞에서 기다리는 시간을 절약할 수 있었습니다.</p>
<p>결국, 시간 절약뿐만 아니라 일상적인 업무에서 느끼는 좌절감을 없애는 것이 더 중요합니다. 걱정할 일이 하나 줄어들면 정말 중요한 것, 즉 고객을 위한 멋진 기능을 출시하는 데 더 많은 시간을 할애할 수 있습니다.</p>]]></content:encoded>
            <category>CSS</category>
            <category>frontend</category>
        </item>
        <item>
            <title><![CDATA[접근성을 고려하여 CSS 작성하기]]></title>
            <link>https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind</link>
            <guid>https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind</guid>
            <pubDate>Sat, 02 Mar 2024 21:56:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>접근성(Accessibility)을 고려하여 개발하는 것은 검색 엔진 최적화와 사용자 경험 향상을 넘어서 법적 요구사항이나 사회적 책임을 이행하는 매우 중요한 업무입니다.</p>
<p>이 글은 특히 CSS를 이용하여 접근성을 향상하는 방법에 대해 소개하고 있습니다. 시리즈로는 “접근성을 고려하여 HTML 작성하기”, “접근성을 고려하여 JavaScript 작성하기”가 있습니다. 2017년에 작성되어 오랜 시간이 지났음에도 여전히 유용한 정보를 제공하고 있어 번역하여 소개하게 되었습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ul>
<li>가독성 있는 텍스트에서 읽기 쉬운 텍스트로</li>
<li>가상 요소에 콘텐츠 신중하게 사용하기</li>
<li>화면만이 유일한 매체가 아니다</li>
<li>완전히 지원되지 않는 속성 값에 대한 대안</li>
<li>콘텐츠를 숨기는 여러 가지 방법</li>
<li>나쁜 대비는 신뢰할 수 없다</li>
<li>색상이 정보의 유일한 단서가 되어서는 안 된다</li>
<li>순서에 신경 쓰기</li>
<li>중요한 것에 집중하기: focus</li>
<li>그리드와 평평한 문서 구조</li>
</ul></div></div>
<p>CSS를 사용하여 웹사이트와 앱의 접근성을 향상시키는 데 도움이 되는 팁에 대한 소개입니다.</p>
<p>이 글은 <a href="https://medium.com/@ABatickaya/%D0%B4%D1%83%D0%BC%D0%B0%D1%8F-%D0%BE-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BF%D0%B8%D1%88%D0%B5%D0%BC-css-9032d7b64fb2" target="_blank" rel="noopener noreferrer">러시아어</a>(역자: <a href="https://medium.com/@ABatickaya" target="_blank" rel="noopener noreferrer">Workafrolic</a>), <a href="https://maujor.com/tutorial/escrevendo-css-com-acessibilidade-em-mente.php" target="_blank" rel="noopener noreferrer">포르투갈어</a>(역자: <a href="https://maujor.com/" target="_blank" rel="noopener noreferrer">Maujor</a>), 그리고 <a href="https://frasco.io/writing-css-with-accessibility-in-mind-4fc82b26aecb" target="_blank" rel="noopener noreferrer">일본어</a>(역자: <a href="https://twitter.com/nakanishy" target="_blank" rel="noopener noreferrer">Keita Nakanishi</a>)로 번역되었습니다.</p>
<p>읽기를 선호하지 않는다면, <strong>CSS Conf Budapest</strong>에서 이 글의 대부분에 대해 이야기한 <a href="https://www.youtube.com/watch?v=EOiC2M47GBY" target="_blank" rel="noopener noreferrer">녹음본</a>을 들을 수 있습니다.</p>
<p>약 1년 전, 저는 웹 접근성에 좀 더 집중하기 시작했습니다. 저에게 가장 효과적인 학습 방식은 다른 사람들을 가르치는 것입니다. 이것이 바로 제가 <a href="https://speakerdeck.com/matuzo/" target="_blank" rel="noopener noreferrer">밋업과 컨퍼런스</a>에서 발표하고, 이 주제에 대한 글을 쓰는 이유 중 하나입니다. 저는 <strong>Smashing Magazine</strong>에 <a href="https://www.smashingmagazine.com/2017/07/enhancing-css-layout-floats-flexbox-grid/" target="_blank" rel="noopener noreferrer">점진적인 향상</a>, 그리고 접근성 기초에 대해 <strong>Medium</strong>에 글을 작성했습니다. 이 글은 접근성 팁 모음 시리즈 중 세 번째 글입니다. 관심이 있다면 특별한 순서 없이, <a href="https://medium.com/alistapart/writing-html-with-accessibility-in-mind-a62026493412" target="_blank" rel="noopener noreferrer">접근성을 고려하여 HTML 작성하기</a>와 <a href="https://medium.com/@matuzo/writing-javascript-with-accessibility-in-mind-a1f6a5f467b9" target="_blank" rel="noopener noreferrer">접근성을 고려하여 자바스크립트 작성하기</a>를 지금이나 나중에 읽어보면 좋습니다.</p>
<hr>
<p>접근성을 고려하여 CSS 작성하기</p>
<p>CSS를 사용하여 문제를 해결하는 무한한 방법과 다양한 속성이 우리의 삶을 더 쉽게 만들어주지만, 동시에 사용자의 경험을 악화시킬 수도 있습니다. 사실, <a href="http://outlinenone.com/" target="_blank" rel="noopener noreferrer">단 세 줄의 CSS</a> 만으로 웹사이트에 접근하기 어렵게 만들 수 있습니다.</p>
<p>이 글에서는 접근성 있는 CSS를 작성하는 데 도움이 될만한 기술과 고려 사항 그리고 접근방식을 모두 모았습니다. 이 컬렉션은 기본 개념과 잘 알려진 속성으로 시작하여, 끝에는 좀 더 새로운 것들을 다룹니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="가독성-있는-텍스트에서-읽기-쉬운-텍스트로">가독성 있는 텍스트에서 읽기 쉬운 텍스트로<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EA%B0%80%EB%8F%85%EC%84%B1-%EC%9E%88%EB%8A%94-%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9D%BD%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%A1%9C" class="hash-link" aria-label="가독성 있는 텍스트에서 읽기 쉬운 텍스트로에 대한 직접 링크" title="가독성 있는 텍스트에서 읽기 쉬운 텍스트로에 대한 직접 링크">​</a></h2>
<p>이미지, 아이콘, 동영상은 오늘날 웹 디자인에서 빼놓을 수 없는 요소이지만, 여전히 거의 모든 웹사이트에서는 텍스트가 콘텐츠의 대부분을 차지합니다. 텍스트는 어떤 기기에서든 읽을 수 있어야 하기 때문에, 폰트 속성을 스타일링하고, 테스트하며, 미세 조정하는 데 상당한 시간을 할애하는 것이 중요합니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="글꼴-크기-확대">글꼴 크기 확대<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EA%B8%80%EA%BC%B4-%ED%81%AC%EA%B8%B0-%ED%99%95%EB%8C%80" class="hash-link" aria-label="글꼴 크기 확대에 대한 직접 링크" title="글꼴 크기 확대에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="font_size_for_langth" src="https://mooyeon-choi.github.io/assets/images/font_size_for_langth-a43026f55bde763d7c1e75c339d28fda.png" width="720" height="386" class="img_ev3q"></p>
<p>사용자가 화면에서 떨어진 거리에 따라 글꼴 크기는 확대해야 합니다 (<a href="https://blog.marvelapp.com/body-text-small/" target="_blank" rel="noopener noreferrer">출처: Marvel</a>)</p>
<p>한때 <a href="https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/" target="_blank" rel="noopener noreferrer">12px 글꼴 크기가 본문(body) 텍스트의 표준이었지만</a>, 해상도가 높은 기기의 등장으로 평균 글꼴 크기는 한동안 15에서 18px 사이에 정착했습니다. 최근 몇 년간, 글꼴 크기는 다시 20px 이상으로 상승했으며, 이는 좋은 일입니다. 텍스트는 스마트폰에서 충분히 커야 하며, TV와 같은 큰 화면에서 멀리서도 읽을 수 있도록 화면 크기에 따라 확대해야 합니다.</p>
<p>서체의 특성이 매우 다양하기 때문에 표준의 최소 크기를 정의하는 것은 의미가 없지만, 작은 화면 크기에 좋은 시작점은 아마도 18-20px일 것입니다.</p>
<p>물론 글꼴 크기에 대해 더 많이 말할 수 있지만, 이 글에서 다루기에는 너무 많습니다. 자세한 내용은 <a href="https://twitter.com/xtianmiller" target="_blank" rel="noopener noreferrer">Christian Miller</a>의 <a href="https://blog.marvelapp.com/body-text-small/" target="_blank" rel="noopener noreferrer">당신의 Body 텍스트는 너무 작습니다</a>를 읽어보시길 권장합니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="라인-높이line-height-설정">라인 높이(line-height) 설정<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EB%9D%BC%EC%9D%B8-%EB%86%92%EC%9D%B4line-height-%EC%84%A4%EC%A0%95" class="hash-link" aria-label="라인 높이(line-height) 설정에 대한 직접 링크" title="라인 높이(line-height) 설정에 대한 직접 링크">​</a></h3>
<p>브라우저의 기본 라인 높이는 대략 **<code>1.2</code>**입니다. <a href="https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-visual-presentation" target="_blank" rel="noopener noreferrer">웹 콘텐츠 접근성 지침</a>에 따르면, 텍스트 블록 내의 문단에서는 최소 **<code>1.5</code>**여야 합니다.</p>
<p><img decoding="async" loading="lazy" alt="line-height" src="https://mooyeon-choi.github.io/assets/images/line-height-7273fc8d9fcacd9215ab6b95f8d04019.png" width="720" height="277" class="img_ev3q"></p>
<p><em><code>line-height</code>가 1.2인 문단과 1.5인 문단 비교</em></p>
<p>문단 내 라인 높이가 조정된 텍스트는 가독성이 향상될 뿐만 아니라, 시각적으로도 꽤 더 매력적입니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="텍스트를-왼쪽-또는-오른쪽으로-정렬">텍스트를 왼쪽 또는 오른쪽으로 정렬<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%99%BC%EC%AA%BD-%EB%98%90%EB%8A%94-%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC" class="hash-link" aria-label="텍스트를 왼쪽 또는 오른쪽으로 정렬에 대한 직접 링크" title="텍스트를 왼쪽 또는 오른쪽으로 정렬에 대한 직접 링크">​</a></h3>
<p><img decoding="async" loading="lazy" alt="text align" src="https://mooyeon-choi.github.io/assets/images/text-align-49810536a5c940b1bcd8982c4ba6b473.png" width="720" height="94" class="img_ev3q"></p>
<p>양쪽 정렬된 텍스트의 불규칙한 단어 간격</p>
<p>양쪽 정렬이 왼쪽 또는 오른쪽 정렬된 텍스트보다 보기 좋다고 생각하는 사람들도 있지만, 이는 나쁜 관행으로 간주됩니다. <code>text-align: justify</code>는 같은 길이의 줄을 만들기 위해 단어 간격을 조정합니다. 이러한 불균일한 공백은 가독성을 해칠 수 있으며 매우 산만해질 수 있습니다. 필요한 경우 단어를 구분하는 것도 해결책이 될 수 있지만, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens?redirectlocale=en-US&amp;redirectslug=CSS%2Fhyphens#Languages_support_notes" target="_blank" rel="noopener noreferrer">CSS 하이픈</a>은 잘 지원되지 않고 예상대로 작동하지 않을 수 있습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="문단-너비-정의">문단 너비 정의<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EB%AC%B8%EB%8B%A8-%EB%84%88%EB%B9%84-%EC%A0%95%EC%9D%98" class="hash-link" aria-label="문단 너비 정의에 대한 직접 링크" title="문단 너비 정의에 대한 직접 링크">​</a></h3>
<p>여러 출처에 따르면 디자이너들은 <a href="https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/#line-length-measure-and-reading" target="_blank" rel="noopener noreferrer">줄당 45에서 85자</a>를 유지해야 한다고 합니다. 이상적인 문단 너비는 65자라고 여겨집니다.</p>
<p>텍스트 블록의 너비를 정의할 때 ch 단위가 유용할 수 있습니다. <code>1ch</code>는 숫자 0을 나타내는 문자의 너비와 동일합니다. 또한, <code>font-family</code> 또는 <code>font-size</code>가 변경되면 이에 따라 변경됩니다.</p>
<div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token selector" style="color:#00009f">p</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* 최대 너비 65자 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">max-width</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">65</span><span class="token unit">ch</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>어떠한 종류의 반응형 타이포그래피 기술을 사용한다면, 매우 큰 화면에서 사이트를 테스트해야 합니다. 글꼴 크기에 제한이 없다면, 특정 뷰포트 크기에서 텍스트가 읽기 어려워질 수 있습니다. 제한을 설정하는 방법이나 반응형 타이포그래피에 익숙하지 않다면, <a href="https://twitter.com/MikeRiethmuller" target="_blank" rel="noopener noreferrer">Mike Riethmullers</a>의 글 <a href="https://madebymike.com.au/writing/precise-control-responsive-typography/" target="_blank" rel="noopener noreferrer">반응형 타이포그래피에 대한 정밀한 제어</a>를 읽어보시기 바랍니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="가상-요소에-콘텐츠-신중하게-사용하기">가상 요소에 콘텐츠 신중하게 사용하기<a href="https://mooyeon-choi.github.io/blog/writing-css-with-accessibility-in-mind#%EA%B0%80%EC%83%81-%EC%9A%94%EC%86%8C%EC%97%90-%EC%BD%98%ED%85%90%EC%B8%A0-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="가상 요소에 콘텐츠 신중하게 사용하기에 대한 직접 링크" title="가상 요소에 콘텐츠 신중하게 사용하기에 대한 직접 링크">​</a></h2>
<p>우리는 <code>::before</code>와 <code>::after</code>라는 가상 요소를 사용하여 요소의 맨 처음이나 맨 끝에 CSS를 추가할 수 있습니다. 이것은 디자인 요소를 우리 컴포넌트에 추가하는 매우 일반적이고 편리한 방법을 제공하지만, <code>content</code> 속성을 사용하여 내용을 추가하는 것도 가능합니다. 관심사의 분리의 관점에서 보면, 우리는 이렇게 하지 않아야 합니다.</p>]]></content:encoded>
            <category>CSS</category>
            <category>frontend</category>
        </item>
        <item>
            <title><![CDATA[Import 속성 (attributes)]]></title>
            <link>https://mooyeon-choi.github.io/blog/import-attributes</link>
            <guid>https://mooyeon-choi.github.io/blog/import-attributes</guid>
            <pubDate>Sun, 25 Feb 2024 20:01:00 GMT</pubDate>
            <description><![CDATA[- 원문//v8.dev/features/import-attributes#deprecation-and-eventual-removal-of-assert]]></description>
            <content:encoded><![CDATA[<ul>
<li>원문: <a href="https://v8.dev/features/import-attributes#deprecation-and-eventual-removal-of-assert" target="_blank" rel="noopener noreferrer">https://v8.dev/features/import-attributes#deprecation-and-eventual-removal-of-assert</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/import-attributes#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>V8 v12.3부터 새롭게 지원되는 import 속성(attributes)에 대해 설명하는 글입니다. import 속성이 왜 필요하게 되었는지, v9.1 부터 사용된 import 어설션(assertions)과는 어떻게 다른지 이 글을 통해 살펴보실 수 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ul>
<li>이전 버전</li>
<li>Import 속성</li>
<li>동적 import()</li>
<li>with 사용 가능 여부</li>
<li>assert의 사용 중단 및 최종 제거</li>
<li>Import 속성 지원</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="이전-버전">이전 버전<a href="https://mooyeon-choi.github.io/blog/import-attributes#%EC%9D%B4%EC%A0%84-%EB%B2%84%EC%A0%84" class="hash-link" aria-label="이전 버전에 대한 직접 링크" title="이전 버전에 대한 직접 링크">​</a></h2>
<p>V8은 v9.1에서 <a href="https://chromestatus.com/feature/5765269513306112" target="_blank" rel="noopener noreferrer">import 어설션(assertions)</a> 기능을 제공했습니다. 이 기능을 사용하면 모듈 import 문에 <code>assert</code> 키워드를 사용하여 추가 정보를 포함할 수 있습니다. 이 추가 정보는 현재 자바스크립트 모듈 내에서 JSON 및 CSS 모듈을 임포트하는 데 사용됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="import-속성">Import 속성<a href="https://mooyeon-choi.github.io/blog/import-attributes#import-%EC%86%8D%EC%84%B1" class="hash-link" aria-label="Import 속성에 대한 직접 링크" title="Import 속성에 대한 직접 링크">​</a></h2>
<p>그 이후로 import 어설션은 <a href="https://github.com/tc39/proposal-import-attributes" target="_blank" rel="noopener noreferrer">import 속성(attributes)</a>로 발전했습니다. 모듈 import 문에 추가 정보를 포함할 수 있도록 허용한다는 기능의 요점은 동일하게 유지됩니다.</p>
<p>가장 중요한 차이점은 import 어설션에는 어설션 전용 시멘틱이 있는 반면 import 속성에는 좀 더 완화된 시멘틱이 있다는 것입니다. 어설션 전용 시멘틱은 추가 정보가 모듈이 로드되는 방식에는 영향을 미치지 않고 로드 여부에만 영향을 미친다는 것을 의미합니다. 예를 들어, JSON 모듈은 MIME 유형에 따라 항상 JSON 모듈로 로드되며, <code>assert { type: 'json' }</code> 절은 요청된 모듈의 MIME 유형이 <code>application/json</code>이 아닌 경우에만 로드에 실패할 수 있습니다.</p>
<p>하지만 어설션 전용 시맨틱에는 치명적인 결함이 있었습니다. 웹에서는 요청되는 리소스 유형에 따라 HTTP 요청의 형태가 달라집니다. 예를 들어 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noopener noreferrer">Accept 헤더</a>는 응답의 MIME 유형에 영향을 미치고, <a href="https://web.dev/articles/fetch-metadata" target="_blank" rel="noopener noreferrer">Sec-Fetch-Dest 메타데이터 헤더</a>는 웹 서버가 요청을 수락할지 거부할지에 영향을 줍니다. import 어설션은 모듈을 로드하는 방법에 영향을 줄 수 없으므로 HTTP 요청의 형태를 변경할 수 없습니다. 요청되는 리소스의 유형은 사용되는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">콘텐츠 보안 정책(CSP, Content Security Policies)</a>에도 영향을 미치므로 import 어설션이 웹의 보안 모델에서 올바르게 작동하지 않을 수 있습니다.</p>
<p><code>import</code> 속성은 어설션 전용 시멘틱을 완화하여 속성이 모듈 로드 방식에 영향을 줄 수 있도록 합니다. 즉, import 속성은 적절한 <strong>Accept</strong> 및 <strong>Sec-Fetch-Dest</strong> 헤더를 포함하는 HTTP 요청을 생성할 수 있습니다. 구문을 새 시멘틱과 일치시키기 위해 이전 <strong>assert</strong> 키워드는 <strong>with</strong>으로 업데이트됩니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// main.mjs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 새로운 'with' 문법.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports">json</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./foo.json'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'json'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">answer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 42</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="동적-import">동적 import()<a href="https://mooyeon-choi.github.io/blog/import-attributes#%EB%8F%99%EC%A0%81-import" class="hash-link" aria-label="동적 import()에 대한 직접 링크" title="동적 import()에 대한 직접 링크">​</a></h2>
<p>마찬가지로 <a href="https://v8.dev/features/dynamic-import#dynamic" target="_blank" rel="noopener noreferrer">동적 import()</a>도 with 옵션을 허용하도록 업데이트됩니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// main.mjs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 새로운 'with' 옵션.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> jsonModule </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">import</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"./foo.json"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"json"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">jsonModule</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword module" style="color:#00009f">default</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">answer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 42</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="with-사용-가능-여부">with 사용 가능 여부<a href="https://mooyeon-choi.github.io/blog/import-attributes#with-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5-%EC%97%AC%EB%B6%80" class="hash-link" aria-label="with 사용 가능 여부에 대한 직접 링크" title="with 사용 가능 여부에 대한 직접 링크">​</a></h2>
<p>Import 속성은 V8 v12.3에서 기본적으로 활성화됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="assert의-사용-중단-및-최종-제거">assert의 사용 중단 및 최종 제거<a href="https://mooyeon-choi.github.io/blog/import-attributes#assert%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%A4%91%EB%8B%A8-%EB%B0%8F-%EC%B5%9C%EC%A2%85-%EC%A0%9C%EA%B1%B0" class="hash-link" aria-label="assert의 사용 중단 및 최종 제거에 대한 직접 링크" title="assert의 사용 중단 및 최종 제거에 대한 직접 링크">​</a></h2>
<p>assert 키워드는 V8 v12.3부터 더 이상 사용되지 않으며 v12.6에서 제거될 예정입니다. assert 대신 with를 사용해 주세요! assert 절을 사용하면 콘솔에 with를 사용하라는 경고가 출력됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="import-속성-지원">Import 속성 지원<a href="https://mooyeon-choi.github.io/blog/import-attributes#import-%EC%86%8D%EC%84%B1-%EC%A7%80%EC%9B%90" class="hash-link" aria-label="Import 속성 지원에 대한 직접 링크" title="Import 속성 지원에 대한 직접 링크">​</a></h2>
<p>Chrome: 123 버전 부터 지원</p>
<p>Firefox: 지원하지 않음</p>
<p>Safari: 17.2 버전 부터 지원</p>
<p>Node.js: 지원하지 않음</p>
<p>Babel: <a href="https://babeljs.io/blog/2023/05/26/7.22.0#import-attributes-15536-15620" target="_blank" rel="noopener noreferrer"><code>@babel/syntax-import-attributes</code> 플러그인을 통해 지원</a></p>]]></content:encoded>
            <category>V8</category>
            <category>v12.3</category>
            <category>frontend</category>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[자동화 게임 극한까지 자바스크립트 성능 끌어올리기]]></title>
            <link>https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game</link>
            <guid>https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game</guid>
            <pubDate>Sun, 25 Feb 2024 09:30:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://ruoyusun.com/2024/01/23/cividle-optimization.html" target="_blank" rel="noopener noreferrer">https://ruoyusun.com/2024/01/23/cividle-optimization.html</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>이 글은 자바스크립트로 게임을 만들면서 진행한 성능 최적화에 대한 글입니다. 성능을 1초라도 끌어올리기 위해 어떤 방법들을 시도해 보았는지 알 수 있습니다.</p>
<p>일반적인 프론트엔드 서비스에서 먼저 검토하는 성능 최적화 방법들을 소개하지는 않습니다. 하지만 글쓴이와 같이 0.01 초도 라도 빠르 이 글이 도움이 될 것 같습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>왜 다시 타입스크립트/자바스크립트인가?</li>
<li>모든 교훈을 되새기며</li>
<li>성능의 벽에 부딪히기</li>
<li>항상 할당입니다!</li>
<li>메모이제이션과 캐싱</li>
<li>문자열 제거하기!</li>
<li>(숫자 키를 사용하는)Map/Set 채택</li>
<li>주의사항</li>
<li>성급한 최적화는 만악의 근원인가?</li>
</ol></div></div>
<p><a href="https://industryidle.com/" target="_blank" rel="noopener noreferrer">Industry Idle</a> 출시 직후에 <a href="https://ruoyusun.com/2022/01/28/game-pref.html" target="_blank" rel="noopener noreferrer">글로도 작성 했었던</a> 대대적인 최적화 작업을 진행했습니다. Industry Idle 게임을 한 번도 해보지 않은 분들을 위해 설명하자면, 이 게임은 공장 자동화 및 경제 시뮬레이션 게임입니다. 제가 직면한 주요 성능 문제는 렌더링 측면에서 발생했는데, 게임에서 미니멀한 그래픽을 제공하고 있다는 점을 생각하면 의외였습니다.</p>
<p><img decoding="async" loading="lazy" alt="In-game screen" src="https://mooyeon-choi.github.io/assets/images/in-game_screen-32806fb8d8759777b16883d4c290f775.gif" width="800" height="400" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-다시-타입스크립트자바스크립트인가">왜 다시 타입스크립트/자바스크립트인가?<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%99%9C-%EB%8B%A4%EC%8B%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="왜 다시 타입스크립��트/자바스크립트인가?에 대한 직접 링크" title="왜 다시 타입스크립트/자바스크립트인가?에 대한 직접 링크">​</a></h2>
<p>후속작인 <a href="https://www.cividle.com/" target="_blank" rel="noopener noreferrer">CivIdle</a> 작업을 하기로 결정했을 때, 저는 처음부터 다시 작성하기로 했습니다. CivIdle에서는 Industry Idle의 핵심 아이디어에 역사적 테마를 도입했습니다. 이 게임에는 테크 트리, 세계 불가사의, 위인 등 몇 가지 새로운 메커니즘이 추가되어 게임의 시뮬레이션이 더욱 복잡해졌습니다.</p>
<p>모든 것을 다시 작성하고 있기 때문에 타입스크립트 이외의 언어도 살펴보았습니다. 고성능 코드를 작성해야 할 때 저는 보통 타입스크립트/자바스크립트는 가장 먼저 선택하지는 않습니다. 하지만 Industry Idle 코드베이스를 살펴본 결과, 게임 코드의 90%가 UI이며 웹 플랫폼이 이 부분에 매우 적합하다는 결론에 도달했습니다. 웹 프레임워크가 어렵다고 생각하신다면 게임 UI 라이브러리/미들웨어를 사용해보시기 바랍니다. CivIdle 코드의 대부분은 UI 코드가 될 가능성이 높기 때문에 UI는 웹 플랫폼에 머물고 싶었지만, 추가로 몇 가지 선택지가 있어 살펴봤습니다.</p>
<ol>
<li>Industry Idle 처럼 웹 플랫폼 사용: UI에는 HTML을 사용하고 게임 렌더링에는 WebGL을 사용하며, 두 가지 모두 타입스크립트로 작성.</li>
<li>위와 동일하지만 게임 로직과 렌더링에 웹 어셈블리를 사용하고 UI는 HTML/타입스크립트로 유지.</li>
<li>게임 로직과 렌더링을 C++로 작성하고, 3D 컨텍스트 위에 HTML 렌더링을 지원하는 미들웨어(1, 2)를 사용.</li>
</ol>
<p>저는 3번 선택지를 적용하기 위해 테스트해봤지만 필요한 브릿징 코드의 양이 너무 많아서 금방 포기했습니다. 모든 미들웨어는 브라우저에 비해 수준 이하의 개발자 도구를 제공하기 때문에 개발, 특히 디버깅이 상당히 고통스러웠습니다. 또한 게임 상태와 같은 대용량 데이터를 C++와 자바스크립트 간에 안전하고 효율적으로 공유하는 것도 쉬운 일이 아닙니다. 2번 선택지는 UI 작업 시 개선된 툴을 제외하면 비슷한 문제를 겪습니다. 결국 저는 1번을 선택하게 됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모든-교훈을-되새기며">모든 교훈을 되새기며<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%AA%A8%EB%93%A0-%EA%B5%90%ED%9B%88%EC%9D%84-%EB%90%98%EC%83%88%EA%B8%B0%EB%A9%B0" class="hash-link" aria-label="모든 교훈을 되새기며에 대한 직접 링크" title="모든 교훈을 되새기며에 대한 직접 링크">​</a></h2>
<p>Industry Idle 렌더링 성능 문제는 대부분 게임 엔진(Cocos Creator)에서 발생합니다. 이 엔진은 비주얼 에디터와 자체 씬 그래프/프리팹(prefab) 시스템을 갖춘 Unity와 유사한 올인원 게임 엔진으로 설계되었습니다. 저는 이 엔진의 렌더링만 사용하지만, 설계된 사용 사례가 아니기 때문에 성능을 위해 렌더러를 커스터마이징하기가 쉽지 않습니다.</p>
<p>CivIdle의 경우 가장 빠른 WebGL 렌더러 중 하나인 <a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">Pixi.JS</a>를 선택했습니다. 한 가지 일만 잘 해내는데, 제가 필요한 기능을 정확히 수행합니다. 나만의 WebGL 렌더러를 만들까도 잠시 고민했지만 Pixi.JS보다 더 잘할 수 없을 것 같다는 결론을 내렸습니다.</p>
<p>가능한 한 객체들은 풀링되었고, 텍스처는 최적화되어 아틀라스(atlases)에 패킹되었으며, 드로 콜(draw calls)을 꼼꼼히 확인하고, Industry Idle에서 문제가 되는 작은 점들을 특화된 <code>ParticleContainer</code>를 사용하여 구현하는 등 Industry Idle에서 배운 모든 교훈을 바탕으로 더 높은 기준을 가지고 시작했습니다. 유일한 문제는 <a href="https://github.com/Chlumsky/msdfgen" target="_blank" rel="noopener noreferrer">MSDF</a> 글꼴 렌더링이 지속적으로 일괄 처리를 중단한다는 점(자체 셰이더가 필요하기 때문에)으로, 품질이 약간 떨어지긴 했지만 기존 비트맵 글꼴로 대체했습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="성능의-벽에-부딪히기">성능의 벽에 부딪히기<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%84%B1%EB%8A%A5%EC%9D%98-%EB%B2%BD%EC%97%90-%EB%B6%80%EB%94%AA%ED%9E%88%EA%B8%B0" class="hash-link" aria-label="성능의 벽에 부딪히기에 대한 직접 링크" title="성능의 벽에 부딪히기에 대한 직접 링크">​</a></h2>
<p>Industry Idle의 가장 큰 구조적 결함은 게임 로직과 렌더링이 긴밀하게 결합되어 있어 렌더링 없이는 게임 로직을 실행할 수 없다는 것입니다 Industry Idle에서 오프라인 수익(게임을 플레이하지 않아도 얻을 수 있는 수익)은 근사치 계산을 통해 이루어집니다. 저 같은 하드코어 시뮬레이션 게임 팬에게는 속임수처럼 느껴지지만, 시뮬레이션 게임에서는 모든 것을 충실하게 시뮬레이션하는 것이 중요하다고 생각합니다. 따라서 오프라인 수입은 오프라인 시간을 가져와 해당 기간 동안 실제 시뮬레이션을 실행하는 것이 이상적입니다.</p>
<p>CivIdle에서는 시뮬레이션과 렌더링이 완전히 분리되어 "모든 것을 시뮬레이션"하는 디자인을 구현했습니다. 오프라인 수익 창출 기능을 구현하고 처음으로 큰 맵에서 실행해 본 결과, 1시간 시뮬레이션을 실행하는 데 약 43초가 걸렸으며, 이는 게임 초당 약 12ms의 벽시계 시간(wall clock time)입니다. 즉, 플레이어가 하루 동안 오프라인 상태였다면 시뮬레이션이 이를 따라잡는 데 약 17분이 걸린다는 뜻입니다! 오프라인 제작 기능을 플레이 테스터에게 처음 공개했을 때 게임이 로딩할 때 '멈춘다'는 버그 보고를 여러 번 받았지만, 실제로는 멈춘 것이 아니라 따라잡는 속도가 고통스러울 정도로 느릴 뿐이었습니다.</p>
<p>다시 말해, 12ms는 부드러운 60FPS를 구현하기 위한 프레임 시간 예산인 16.67ms 이내입니다 하지만 이는 합리적인 오프라인 프로덕션 성능을 달성하기에는 충분하지 않습니다. 게임 로직은 단일 스레드에서 실행되므로 병렬화가 쉽지 않고, 자바스크립트에 멀티스레드를 추가하려면 설정이 쉽지 않은 웹 워커가 필요합니다. 또한 웹 워커는 메인 스레드의 잠금을 해제하는 데 도움이 될 수 있지만 전체 시간을 단축하지는 못할 것입니다. 따라서 가능한 한 싱글 스레드 성능을 최대한 끌어내야 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="항상-할당입니다">항상 할당입니다!<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%ED%95%AD%EC%83%81-%ED%95%A0%EB%8B%B9%EC%9E%85%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="항상 할당입니다!에 대한 직접 링크" title="항상 할당입니다!에 대한 직접 링크">​</a></h2>
<p>최적화를 시작하기 전에 CPU 시간이 어디에 사용되는지 파악해야 합니다. 다행히도 브라우저에는 매우 훌륭한 프로파일링 도구가 있습니다. Chrome에서 프로파일 세션을 실행하면 다음과 같은 결과가 나타납니다.</p>
<p><img decoding="async" loading="lazy" alt="Profile session in chrome" src="https://mooyeon-choi.github.io/assets/images/profile_session_in_chrome-c198a5c96cfed4eec4c0cd87903c79bd.png" width="1183" height="490" class="img_ev3q"></p>
<p>프로파일러는 성능 저하의 주요 원인이 될 수 있는 함수를 보여 주는데, 이는 매우 희망적인 상황입니다. 이는 일반적으로 쉽게 개선할 수 있는 문제를 의미합니다. 문제의 함수는 바로 이것입니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> oc1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hex1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCube</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> oc1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> oc2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hex2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCube</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> oc2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> distance</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 코드는 육각형 격자에서 두 타일 사이의 거리를 계산하는 것입니다. 이 코드는 뻔뻔하게도 Red Blob Games의 뛰어난 <a href="https://www.redblobgames.com/grids/hexagons/codegen/output/lib.ts" target="_blank" rel="noopener noreferrer">레퍼런스육각 그리드 구현</a>에서 복사한 것입니다. 실제 계산은 프로파일러에 나타나지 않고 모든 작은 오브젝트를 할당하는 것입니다!</p>
<p>값 타입이 존재하는 언어에서는 일반적으로 큰 문제가 되지 않습니다. 이러한 값들은 스택에 할당할 수 있으며 일반적으로 매우 빠릅니다. 자바스크립트 VM(V8)에서는 거의 모든 것이 힙에 할당되며(나중에 설명할 "작은 정수" 제외), 이러한 객체를 구성하는 작업(프로토타입 체인 설정)은 의외로 무겁습니다. 해결책은 이러한 객체를 매번 할당하는 대신 정적으로 캐시된 사본을 사용하는 것입니다. 또한 할당하지 않는 버전의 API를 추가해야 하는데, 이는 전달받은 객체(캐시된 정적 객체)에 결과를 설정하거나 객체 중 하나(다시 캐시된 정적 객체)를 변경하는 것입니다. 새 코드는 다음과 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _oc1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _oc2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _hex1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _hex2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">col</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">row</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> y1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCubeNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">col</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">row</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> y2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCubeNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">distanceNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> distance</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>새 코드는 훨씬 더 나빠 보이고 스레드에서 안전하지 않지만 어쨌든 우리는 단일 스레드입니다. 동일한 프로필을 실행하면 전체 시간이 21초에서 9초로 단축됩니다! 이것은 정말 쉬운 개선입니다!</p>
<p><img decoding="async" loading="lazy" alt="New code profile session in chrome" src="https://mooyeon-choi.github.io/assets/images/new_code_profile_session_in_chrome-b98798ebe5879a5a0e2b60a98f4fb906.png" width="1183" height="562" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="메모이제이션과-캐싱">메모이제이션과 캐싱<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%BA%90%EC%8B%B1" class="hash-link" aria-label="메모이제이션과 캐싱에 대한 직접 링크" title="메모이제이션과 캐싱에 대한 직접 링크">​</a></h2>
<p>프로필 결과를 다시 살펴보니 몇 가지 함수가 눈에 띄었습니다. 이 함수는 CPU 시간을 상당히 많이 차지하지만 외부 상태에 의존하지 않고 부작용이 없는 "순수한" 계산만 포함하고 있습니다. 예제는 다음과 같습니다(함수 시그니처를 단순화했습니다. 실제 코드 베이스에서는 string은 타입을 가지고 있지만 여기서는 상관없습니다).</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getBuildingCost</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">type</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">level</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Record</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> number</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이는 메모이제이션의 좋은 대상입니다. 메모이제이션은 매번 계산하는 대신 계산 결과를 캐시에 저장해 둔다는 것을 멋지게 표현한 것입니다. 일반적인 <code>memoize</code> 함수는 다음과 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">memoize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> results </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> argsKey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>인자에 대한 "해시"를 만들기 위해 <code>JSON.stringify(args)</code>를 사용하는 것은 끔직하게 비효율적 입니다. <code>getBuildingCost</code>의 경우에는 아마도 인자를 그냥 이어 붙힐 수 있습니다.</p>
<p>여러 함수가 계산을 위해 외부 상태에 의존하지만, 프레임 내에서 상태가 변경되지 않습니다. 결과를 캐시하고 새 프레임이 시작될 때 캐시를 지울 수 있습니다.</p>
<p>메모 기능을 추가하면 전체 시간을 2초 정도 단축할 수 있는데, 나쁘지 않습니다!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문자열-제거하기">문자열 제거하기!<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0" class="hash-link" aria-label="문자열 제거하기!에 대한 직접 링크" title="문자열 제거하기!에 대한 직접 링크">​</a></h2>
<p>안타깝게도 우리가 기대했던 열매는 모두 수확했습니다. 이 시점에서 코드의 핫스팟은 대부분 문자열과 관련이 있습니다.</p>
<ol>
<li>이전 메모이제이션 예제에서 이미 문자열 키를 사용했습니다.</li>
<li>게임에서는 타일을 나타내기 위해 <code>{x, y}</code>를 사용하고 있고 키가 필요할 때마다 <code>"x,y"</code> 문자열을 사용하고 있습니다. 몇몇 핫스팟은 두 형식간의 변화와 관련이 있습니다.</li>
</ol>
<p>문자열을 사용하면 코드를 쉽게 읽을 수 있습니다. 하지만 안타깝게도 코드 실행 속도가 느려지기도 합니다. 하지만 문자열을 제거하는 것이 항상 쉬운일은 아닙니다. 타일을 표현하는 경우 x와 y를 정수로 패킹할 수 있습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> tile </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>앞서 자바스크립트(V8)에서 작은 정수, 즉 기본적으로 포인터에 들어갈 수 있는 정수를 제외한 거의 모든 것이 힙에 할당된다고 언급했습니다. 하지만 32비트 플랫폼에서는 V8이 1비트를 사용해 포인터와 실제 숫자를 구분하기 때문에 정수가 31비트에 맞아야 한다는 문제가 있습니다. 그리고 64비트 플랫폼에서는 <a href="https://v8.dev/blog/pointer-compression" target="_blank" rel="noopener noreferrer">포인터 압축</a>으로 인해 정수가 여전히 32비트에 맞아야 합니다. 제가 계획한 가장 큰 맵은 200x200 정도인데 15비트는 여전히 필요한 것보다 많기에 저희에게는 문제가 되지 않습니다. 한 가지 주의할 점은 자바스크립트에는 '정수'라는 개념이 없고 모든 숫자가 배정밀도 부동 소수점이라는 점입니다. 따라서 이것은 본질적으로 벤더별 최적화입니다. 하지만 V8이 매우 일반적으로 사용되고 있고 게임이 일렉트론으로 출시되었기 때문에 이 최적화는 꽤 합리적입니다.</p>
<p>캐시/메모화를 위해 31비트 정수 키를 생성하는 경우에는 좀 더 까다롭습니다. 게임 데이터의 대부분은 문자열로 되어 있으며, 이 방식이 더 바람직합니다. 데이터를 자주 조정하기 때문에 문자열이 훨씬 읽기 쉽기 때문입니다. 대신 게임이 시작되면 모든 데이터를 검토하여 각 항목에 대해 자동 증가 숫자 키를 생성합니다. 또한 부울 플래그 객체 대신 타입스크립트의 열거형 플래그를 사용합니다. 예시는 아래와 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Before</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calculate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">building</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">options</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">flag1</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean</span><span class="token parameter punctuation" style="color:#393A34">;</span><span class="token parameter"> flag2</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean</span><span class="token parameter punctuation" style="color:#393A34">;</span><span class="token parameter"> flag3</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// After</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token maybe-class-name">Options</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token maybe-class-name">None</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag3</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">TotalBits</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calculate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">building</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">options</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter maybe-class-name">Options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">BuildingHash</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">building</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token maybe-class-name">Options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">TotalBits</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="숫자-키를-사용하는mapset-채택">(숫자 키를 사용하는)Map/Set 채택<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%88%AB%EC%9E%90-%ED%82%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94mapset-%EC%B1%84%ED%83%9D" class="hash-link" aria-label="(숫자 키를 사용하는)Map/Set 채택에 대한 직접 링크" title="(숫자 키를 사용하는)Map/Set 채택에 대한 직접 링크">​</a></h2>
<p>저는 고성능 자바스크립트를 전문적으로 작성하지 않고(고성능 코드를 작성하긴 하지만 다른 언어로 작성합니다), 자바스크립트 세계의 최신 기술을 잘 따르지 않기 때문에 <strong>자바스크립트 성능 전문가가 아니라는 사실</strong>을 인정합니다. 자바스크립트에서 Map/Set의 존재를 어렴풋이 알고는 있지만 항상 평범한 오래된 객체를 사용해 왔습니다. 그래서 게임에서 흔히 사용되는 패턴의 일부를 간단히 마이크로 벤치마크해 보았습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access obj (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access obj (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">,</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access map (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">,</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>결과의 순위는 그다지 놀랍지 않지만 차이점은 있었습니다! 숫자(작은 정수) 키가 더 빠르다는 것은 알고 있었지만 이렇게까지 빠를 줄은 몰랐습니다. 또한 숫자 키와 맵의 조합이 승리한 것으로 보아, 문자열을 작은 정수로 대체하는 수고로움에 대한 보상을 받은 셈입니다!</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌───────────────────────────┬───────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│         Task Name         │  ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────────────────────┼───────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access obj (number key)' │ '60,121'  │ 16632.928519960293 │ '±0.59%' │  6013   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access map (number key)' │ '245,327' │ 4076.1832382745756 │ '±0.65%' │  24533  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access obj (string key)' │ '10,316'  │ 96930.13813144476  │ '±4.19%' │  1032   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access map (string key)' │ '17,543'  │ 57001.994138429654 │ '±1.53%' │  1755   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└───────────────────────────┴───────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>map vs object를 순회하는 밴치마크도 진행했습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate obj (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> key </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> numMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"forEach map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    numMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate obj (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> key </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate map (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> strMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>아래 표가 결과 입니다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌────────────────────────────┬───────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│         Task Name          │  ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────────┼───────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate obj (number key)' │  '5,769'  │ 173319.23769086445 │ '±1.42%' │   577   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate map (number key)' │ '178,355' │ 5606.781289537164  │ '±1.94%' │  17858  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'forEach map (number key)' │ '185,631' │ 5387.017655490776  │ '±0.55%' │  18564  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate obj (string key)' │ '25,965'  │ 38512.431584109334 │ '±1.42%' │  2598   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate map (string key)' │ '179,725' │ 5564.040455324439  │ '±2.05%' │  17973  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└────────────────────────────┴───────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>숫자 키를 사용하는 Map이 다시 한번 더 승리했습니다 (숫자 키로 객체를 반복하는 것이 그렇게 느리다는 사실은 약간 의아합니다)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="주의사항">주의사항<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD" class="hash-link" aria-label="주의사항에 대한 직접 링크" title="주의사항에 대한 직접 링크">​</a></h2>
<p>문자열을 없애고 객체를 Map/Set으로 대체하면 전체 시간이 약 3초 정도 감소합니다. 이 시점에서 전체 시간이 21초에서 4초로 단축되었습니다. 하지만 이 두 가지 최적화에는 많은 작업이 필요했고, 며칠이 걸렸으며 몇 가지 지저분한 버그도 해결해야 했습니다. 또한 C/C++와 같은 언어에 비해 자바스크립트에서 마이크로 최적화를 수행하는 것이 훨씬 더 어렵다는걸 알게되었습니다.</p>
<ol>
<li>마이크로 벤치마킹은 신뢰할 수 없을 수 있습니다. JIT는 워밍업이 필요합니다. 가비지 수집기를 끌 수 없습니다.</li>
<li>최적화는 V8의 특정 구현에 대해 수행되며, 이는 변경될 수 있습니다. 그리고 V8의 내부를 파악하는 것은 사소한 일이 아니며 소스 코드를 읽는 것도 쉽지 않습니다. 그리고 여러 단계에 걸친 JIT 최적화는 작업을 더욱 어렵게 만듭니다.</li>
<li>대부분의 유용한 마이크로 최적화는 대개 데이터 로컬리티와 관련된 것(예: 캐시 라인에 더 많은 데이터를 넣을 수 있도록 데이터를 작게 만들거나 함께 액세스하는 데이터가 함께 위치하도록 하는 것)인데, 안타깝게도 자바스크립트에서는 이를 달성하기가 어렵습니다.</li>
</ol>
<p>'성공 사례'와는 별개로, 저는 눈에 띄지도 않는 않는 미세 최적화를 여러 번 시도해 보았습니다.</p>
<p>숫자 배열에서 유형 배열(<code>Uint32Array</code>)로 변경해도 도움이 되지 않습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access array"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access uint32array"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> uint32Array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌──────────────────────┬──────────────┬───────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│      Task Name       │   ops/sec    │ Average Time (ns) │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──────────────────────┼──────────────┼───────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│    'access array'    │ '1,824f,996' │ 547.9462917536906 │ '±0.35%' │ 182500  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access uint32array' │ '1,828,721'  │ 546.8302087845923 │ '±0.17%' │ 182873  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──────────────────────┴──────────────┴───────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>브랜치를 브랜치없는 코드로 대체하는 것은 그다지 도움이 되지 않습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// With branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">y </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Without branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌──────────────┬──────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│  Task Name   │ ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──────────────┼──────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'branchless' │ '53,060' │ 18846.260416366207 │ '±1.45%' │  5307   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   'branch'   │ '40,458' │ 24716.880848309927 │ '±1.20%' │  4046   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──────────────┴──────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="성급한-최적화는-만악의-근원인가">성급한 최적화는 만악의 근원인가?<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%84%B1%EA%B8%89%ED%95%9C-%EC%B5%9C%EC%A0%81%ED%99%94%EB%8A%94-%EB%A7%8C%EC%95%85%EC%9D%98-%EA%B7%BC%EC%9B%90%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="성급한 최적화는 만악의 근원인가?에 대한 직접 링크" title="성급한 최적화는 만악의 근원인가?에 대한 직접 링크">​</a></h2>
<p>Donald Knuth의 말은 종종 문맥에서 벗어난 채 인용되기도 합니다. 사람들은 이를 정당화하기 위해 이 인용문을 사용합니다</p>
<ol>
<li>컴퓨터는 충분히 빠르므로 성능은 중요하지 않습니다.</li>
<li>깔끔한 코드를 먼저 작성하고 성능은 나중에 언제든지 최적화할 수 있습니다.</li>
</ol>
<blockquote>
<p>“프로그래머는 프로그램에서 중요하지 않은 부분의 속도에 대해 생각하거나 걱정하는 데 엄청난 시간을 낭비하며, 효율성을 위한 이러한 시도는 디버깅과 유지보수를 고려할 때 실제로 매우 부정적인 영향을 미칩니다. 97% 정도의 작은 효율성은 잊어야 합니다. 조급한 최적화는 만악의 근원입니다. 하지만 그 중요한 3%의 기회를 놓쳐서는 안 됩니다.”</p>
</blockquote>
<p>모든 최적화 중에서 앞의 두 가지(하나의 핫 함수에서 초과 할당 제거 및 메모화)가 '나중에 최적화'의 좋은 예라고 생각합니다. 하지만 후자의 두 가지는 미리 수행하면 훨씬 더 쉬울 것입니다. 또한 후자의 두 가지는 프로파일러에 실제로 나타나지 않는 <a href="https://wiki.c2.com/?UniformlySlowCode" target="_blank" rel="noopener noreferrer">균일하게 느린 코드</a>입니다. 타일이 표현되는 방식과 같은 것은 매우 기본적이고 모든 곳에서 사용됩니다. 이러한 작은 비효율성은 코드 기반 전체에 퍼져 있어 나중에 최적화하기가 더욱 어려워집니다.</p>
<p>최적화를 적용할 시기를 결정할 때는 컨텍스트가 매우 중요합니다. 게임 프로그래밍에서는 초기 코드를 작성할 때에도 핫 코드 경로를 쉽게 식별할 수 있으며, 몇 가지 기본 성능 관행을 채택하면 대개 성과를 거둘 수 있습니다. 이는 언어와 에코시스템의 문제이기도 한데, 일반적으로 자바스크립트보다 C++에는 성능을 고려한(그리고 할당을 고려한) 라이브러리가 더 많습니다. C++의 라이브러리는 수정 없이 사용할 수 있는 경우가 많지만 자바스크립트에서는 대부분의 라이브러리가 성능에 중요한 소프트웨어용으로 작성되지 않았습니다. 아이러니하게도 사실상 패키지 관리자가 없기 때문에 C++ 라이브러리를 공급하는 것이 더 일반적입니다.</p>
<p>여기까지 읽어주셔서 감사합니다. 저는 자바스크립트 성능에 대한 전문가가 아니라는 점을 다시 한 번 말씀드리고 싶습니다. 따라서 제가 놓친 오류나 명백한 오류를 발견하신 경우 알려주시기 바랍니다. CivIdle이 관심 있는 게임인 것 같다면 <a href="https://store.steampowered.com/app/2181940/CivIdle/" target="_blank" rel="noopener noreferrer">Steam</a>으로 이동하여 확인해 보세요.</p>
<p><a href="https://news.ycombinator.com/item?id=39210048" target="_blank" rel="noopener noreferrer">HN</a> 와 <a href="https://www.reddit.com/r/programming/comments/1afu6jh/squeezing_last_bit_of_javascript_performance_for/" target="_blank" rel="noopener noreferrer">Reddit</a>에서 토론</p>]]></content:encoded>
            <category>WebGl</category>
            <category>frontend</category>
            <category>Game</category>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[Evan You가 말하는 2024년 Vue.js의 인사이트 및 트렌드]]></title>
            <link>https://mooyeon-choi.github.io/blog/Vue.js trend</link>
            <guid>https://mooyeon-choi.github.io/blog/Vue.js trend</guid>
            <pubDate>Sat, 24 Feb 2024 20:25:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://medium.com/front-end-weekly/insights-and-trends-in-vue-js-from-evan-you-2024-695ed1feef5d" target="_blank" rel="noopener noreferrer">https://medium.com/front-end-weekly/insights-and-trends-in-vue-js-from-evan-you-2024-695ed1feef5d</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>이 글에서는 Vite 5가 뷰에 미치는 영향, 매크로, vapor mode, 널리 알려진 오해들, <strong>새로운 특징 또는 기능</strong>, 향후 버전의 option API 지원 여부, VitePress 등에 대한 일반적인 인사이트를 살펴보겠습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>Evan You와 함께하는 Q&amp;A 세션</li>
<li>결론</li>
<li>도움 될만한 링크</li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="evan-you와-함께하는-qa-세션">Evan You와 함께하는 Q&amp;A 세션<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#evan-you%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-qa-%EC%84%B8%EC%85%98" class="hash-link" aria-label="Evan You와 함께하는 Q&amp;A 세션에 대한 직접 링크" title="Evan You와 함께하는 Q&amp;A 세션에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-vite-5는-어떻게-뷰-성능을-향상시켰을까요">1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#1-vite-5%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B7%B0-%EC%84%B1%EB%8A%A5%EC%9D%84-%ED%96%A5%EC%83%81%EC%8B%9C%EC%BC%B0%EC%9D%84%EA%B9%8C%EC%9A%94" class="hash-link" aria-label="1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?에 대한 직접 링크" title="1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?에 대한 직접 링크">​</a></h3>
<p>Vite 내에서 성능 향상을 위해 수행되는 대부분의 작업은 Vite 자체에 한정되어 있습니다. 하지만 Vite를 사용하는 누구든 같은 혜택을 누릴 수 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>추가로,</div><div class="admonitionContent_BuS1"><p>중요한 세부 사항도 언급되었습니다. 뷰 3.4의 모든 이점을 활용하려면 "vitejs/plugin-vue"를 최신 버전으로 업데이트하는 것이 좋습니다. 이 업데이트는 프로젝트의 빌드 성능을 향상시킬 수 있습니다.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-뷰-코어-기능에-추가적인-vuejs-매크로가-추가될-예정인가요">2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#2-%EB%B7%B0-%EC%BD%94%EC%96%B4-%EA%B8%B0%EB%8A%A5%EC%97%90-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-vuejs-%EB%A7%A4%ED%81%AC%EB%A1%9C%EA%B0%80-%EC%B6%94%EA%B0%80%EB%90%A0-%EC%98%88%EC%A0%95%EC%9D%B8%EA%B0%80%EC%9A%94" class="hash-link" aria-label="2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?에 대한 직접 링크" title="2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?에 대한 직접 링크">​</a></h3>
<p>Vue.js 팀은 뷰 코어에 새로운 매크로를 통합하는 것을 매우 신중하게 고려합니다. 현재로서는 뷰에 새로운 매크로를 도입할 계획이 없습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_BuS1"><p>매크로는 뷰에 공식적으로는 통합되지 않는 개념적인 제안이나 아이디어입니다. 이러한 제안들은 뷰의 추가적인 기능이나 문법적 설탕(syntactic sugar)을 탐구하고 확장하는 것을 목표로 합니다.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-뷰-vapor-mode의-최신-소식은-무엇인가요">3. 뷰 vapor mode의 최신 소식은 무엇인가요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#3-%EB%B7%B0-vapor-mode%EC%9D%98-%EC%B5%9C%EC%8B%A0-%EC%86%8C%EC%8B%9D%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94" class="hash-link" aria-label="3. 뷰 vapor mode의 최신 소식은 무엇인가요?에 대한 직접 링크" title="3. 뷰 vapor mode의 최신 소식은 무엇인가요?에 대한 직접 링크">​</a></h3>
<p>초기 런타임 구현과 컴파일러의 상당 부분이 완료되었습니다. 그 결과, 아직 진행 중이기는 하지만 기능적인 플레이그라운드가 조성되었습니다.</p>
<p>이 모드에서는 복잡한 마이그레이션이나 사용을 위한 준비 조치가 필요하지 않습니다. 이 기술을 이용하면 최적화가 필요한 특정 컴포넌트에 vapor mode를 활성화할 수 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>vapor mode</div><div class="admonitionContent_BuS1"><p>성능 향상을 위한 비가상 DOM 모드 개발에 사용되는 vapor mode</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-사람들이-vuejs에-대해-갖고-있는-가장-큰-오해는-무엇이라고-생각하나요">4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#4-%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%B4-vuejs%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B0%96%EA%B3%A0-%EC%9E%88%EB%8A%94-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%98%A4%ED%95%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EB%82%98%EC%9A%94" class="hash-link" aria-label="4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?에 대한 직접 링크" title="4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?에 대한 직접 링크">​</a></h3>
<p>잘 알려진 오해에는 JSX 및 타입스크립트에 대한 지원 부족, 그리고 뷰는 간단한 앱에만 적합하다는 것 등이 있습니다. 하지만 더 많은 유명 브랜드에서 거대한 웹 애플리케이션 제작을 위해 뷰를 사용하고 있습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-향후-vuejs-버전에서-기대할-만한-흥미로운-신규-기능은-무엇이-있을까요">5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#5-%ED%96%A5%ED%9B%84-vuejs-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C-%EA%B8%B0%EB%8C%80%ED%95%A0-%EB%A7%8C%ED%95%9C-%ED%9D%A5%EB%AF%B8%EB%A1%9C%EC%9A%B4-%EC%8B%A0%EA%B7%9C-%EA%B8%B0%EB%8A%A5%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94" class="hash-link" aria-label="5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?에 대한 직접 링크" title="5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?에 대한 직접 링크">​</a></h3>
<p>vapor mode는 현재 뷰 생태계 내에서 개발되고 있는 가장 중요한 혁신입니다.</p>
<p>이에 더해, 아래 항목들을 포함하여 뷰 코어에 많은 개선이 있었습니다.</p>
<ul>
<li>
<p>반응성 시스템 리팩토링</p>
</li>
<li>
<p>빨라진 파서와 향상된 싱글 파일 컴포넌트(Single File Component, SFC) 빌드 성능</p>
</li>
<li>
<p>defineModel의 안정화</p>
</li>
<li>
<p>v-bind:를 위한 같은 이름의 축약어</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">img</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:id</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:src</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:alt</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>하이드레이션 불일치 오류 개선</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-향후-뷰-버전에서-option-api를-제거할-것을-계획하고-있나요">6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#6-%ED%96%A5%ED%9B%84-%EB%B7%B0-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C-option-api%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A0-%EA%B2%83%EC%9D%84-%EA%B3%84%ED%9A%8D%ED%95%98%EA%B3%A0-%EC%9E%88%EB%82%98%EC%9A%94" class="hash-link" aria-label="6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?에 대한 직접 링크" title="6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?에 대한 직접 링크">​</a></h3>
<p>향후 버전에서 option API를 제거할 계획은 없습니다. Composition API와 Option API 두 접근 방식을 모두 유지하는 작업은 어렵지 않습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-뷰-3는-웹팩을-계속-지원할-예정인가요-아니면-완전히-vite로-옮겨가나요">7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#7-%EB%B7%B0-3%EB%8A%94-%EC%9B%B9%ED%8C%A9%EC%9D%84-%EA%B3%84%EC%86%8D-%EC%A7%80%EC%9B%90%ED%95%A0-%EC%98%88%EC%A0%95%EC%9D%B8%EA%B0%80%EC%9A%94-%EC%95%84%EB%8B%88%EB%A9%B4-%EC%99%84%EC%A0%84%ED%9E%88-vite%EB%A1%9C-%EC%98%AE%EA%B2%A8%EA%B0%80%EB%82%98%EC%9A%94" class="hash-link" aria-label="7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?에 대한 직접 링크" title="7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?에 대한 직접 링크">​</a></h3>
<p>뷰에서 웹팩을 금지하는 것은 가까운 시일내에는 계획하고 있지 않습니다. 웹팩과 Vite 양측에 대한 지원이 모두 제공될 예정입니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-기타">8. 기타<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#8-%EA%B8%B0%ED%83%80" class="hash-link" aria-label="8. 기타에 대한 직접 링크" title="8. 기타에 대한 직접 링크">​</a></h3>
<p>안정된 버전의 **서스펜스 컴포넌트(suspense component)**의 출시가 계획되어 있습니다.</p>
<p><strong>defineModel</strong>이 객체와 배열에 대해 깊게 반응성을 유지할 수 없는 이유는 다음과 같습니다. prop을 직접적으로 수정하는 것은 이후 추적에 영향을 미치기 때문에 권장되지 않습니다. 이 경우, 깊은 반응성이 불필요해지며 매번 새로운 객체를 반환할 뿐입니다.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">setup</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript">  </span><span class="token script language-javascript keyword" style="color:#00009f">const</span><span class="token script language-javascript"> modelValue </span><span class="token script language-javascript operator" style="color:#393A34">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript function" style="color:#d73a49">defineModel</span><span class="token script language-javascript punctuation" style="color:#393A34">(</span><span class="token script language-javascript punctuation" style="color:#393A34">)</span><span class="token script language-javascript punctuation" style="color:#393A34">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript">  </span><span class="token script language-javascript console class-name">console</span><span class="token script language-javascript punctuation" style="color:#393A34">.</span><span class="token script language-javascript method function property-access" style="color:#d73a49">log</span><span class="token script language-javascript punctuation" style="color:#393A34">(</span><span class="token script language-javascript">modelValue</span><span class="token script language-javascript punctuation" style="color:#393A34">.</span><span class="token script language-javascript property-access">value</span><span class="token script language-javascript punctuation" style="color:#393A34">)</span><span class="token script language-javascript punctuation" style="color:#393A34">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">script</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">template</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">v-model</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">modelValue</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">template</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>VitePress 출시에 많은 기대 부탁드립니다.</strong></p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>VitePress란?</div><div class="admonitionContent_BuS1"><p><strong>*VitePress</strong>는 콘텐츠 중심의 신속한 웹사이트 구축을 위해 제작된 정적 사이트 생성기(SSG)입니다. 문서, 블로그, 포트폴리오, 마케팅 사이트를 생성하는 데 적합합니다.</p><p>Nuxt.js보다 훨씬 경량의 대안을 제공하여 웹 개발에 효율성을 높입니다.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EA%B2%B0%EB%A1%A0" class="hash-link" aria-label="결론에 대한 직접 링크" title="결론에 대한 직접 링크">​</a></h2>
<p>뷰 생태계와 프레임워크는 활발히 개발되고 있으며, 성능 향상과 반응성에 초점을 맞추고, 비가상 DOM 모드를 발전시키고 있습니다. 뷰는 Option API와 Composition API를 모두 지원하며 융통성을 유지하고 있으며, 웹팩 그리고 Vite와 같은 유명한 번들러에 대한 호환성을 보장합니다. defineModel과 v-bind 단축어와 같은 새로운 기능이 안정적으로 릴리즈되는 등 상당한 진전이 있었습니다. 이러한 모든 요소는 이후 뷰의 역동성과 유망한 미래를 증명합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="도움-될만한-링크">도움 될만한 링크<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EB%8F%84%EC%9B%80-%EB%90%A0%EB%A7%8C%ED%95%9C-%EB%A7%81%ED%81%AC" class="hash-link" aria-label="도움 될만한 링크에 대한 직접 링크" title="도움 될만한 링크에 대한 직접 링크">​</a></h2>
<ol>
<li><a href="https://vuejsnation.com/" target="_blank" rel="noopener noreferrer">Vue.js Nation 콘퍼런스</a></li>
<li><a href="https://github.com/nuxt/awesome?tab=readme-ov-file#projects-using-nuxt" target="_blank" rel="noopener noreferrer">nuxt를 사용한 프로젝트들</a></li>
<li><a href="https://github.com/vuejs/core-vapor" target="_blank" rel="noopener noreferrer">Vapor mode</a></li>
<li><a href="https://vue-macros.dev/guide/getting-started.html" target="_blank" rel="noopener noreferrer">뷰 매크로</a></li>
<li><a href="https://vueschool.io/" target="_blank" rel="noopener noreferrer">Vue School</a></li>
<li><a href="https://javascript.plainenglish.io/how-to-use-graphql-in-vue3-with-the-apollo-client-79b1c1fda69d" target="_blank" rel="noopener noreferrer">Vue3에서 GraphQL과 Apollo 클라이언트</a></li>
<li><a href="https://blog.stackademic.com/how-hmac-works-step-by-step-explanation-with-examples-f4aff5efb40e" target="_blank" rel="noopener noreferrer">HMAC(보안)</a></li>
</ol>]]></content:encoded>
            <category>Vuejs</category>
            <category>frontend</category>
        </item>
    </channel>
</rss>