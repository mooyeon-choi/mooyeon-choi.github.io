<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mylog Blog</title>
        <link>https://mooyeon-choi.github.io/blog</link>
        <description>Mylog Blog</description>
        <lastBuildDate>Sun, 25 Feb 2024 09:30:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[자동화 게임 극한까지 자바스크립트 성능 끌어올리기]]></title>
            <link>https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game</link>
            <guid>https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game</guid>
            <pubDate>Sun, 25 Feb 2024 09:30:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://ruoyusun.com/2024/01/23/cividle-optimization.html" target="_blank" rel="noopener noreferrer">https://ruoyusun.com/2024/01/23/cividle-optimization.html</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>이 글은 자바스크립트로 게임을 만들면서 진행한 성능 최적화에 대한 글입니다. 성능을 1초라도 끌어올리기 위해 어떤 방법들을 시도해 보았는지 알 수 있습니다.</p>
<p>일반적인 프론트엔드 서비스에서 먼저 검토하는 성능 최적화 방법들을 소개하지는 않습니다. 하지만 글쓴이와 같이 0.01 초도 라도 빠르 이 글이 도움이 될 것 같습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>왜 다시 타입스크립트/자바스크립트인가?</li>
<li>모든 교훈을 되새기며</li>
<li>성능의 벽에 부딪히기</li>
<li>항상 할당입니다!</li>
<li>메모이제이션과 캐싱</li>
<li>문자열 제거하기!</li>
<li>(숫자 키를 사용하는)Map/Set 채택</li>
<li>주의사항</li>
<li>성급한 최적화는 만악의 근원인가?</li>
</ol></div></div>
<p><a href="https://industryidle.com/" target="_blank" rel="noopener noreferrer">Industry Idle</a> 출시 직후에 <a href="https://ruoyusun.com/2022/01/28/game-pref.html" target="_blank" rel="noopener noreferrer">글로도 작성 했었던</a> 대대적인 최적화 작업을 진행했습니다. Industry Idle 게임을 한 번도 해보지 않은 분들을 위해 설명하자면, 이 게임은 공장 자동화 및 경제 시뮬레이션 게임입니다. 제가 직면한 주요 성능 문제는 렌더링 측면에서 발생했는데, 게임에서 미니멀한 그래픽을 제공하고 있다는 점을 생각하면 의외였습니다.</p>
<p><img decoding="async" loading="lazy" alt="In-game screen" src="https://mooyeon-choi.github.io/assets/images/in-game_screen-32806fb8d8759777b16883d4c290f775.gif" width="800" height="400" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-다시-타입스크립트자바스크립트인가">왜 다시 타입스크립트/자바스크립트인가?<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%99%9C-%EB%8B%A4%EC%8B%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="왜 다시 타입스크립트/자바스크립트인가?에 대한 직접 링크" title="왜 다시 타입스크립트/자바스크립트인가?에 대한 직접 링크">​</a></h2>
<p>후속작인 <a href="https://www.cividle.com/" target="_blank" rel="noopener noreferrer">CivIdle</a> 작업을 하기로 결정했을 때, 저는 처음부터 다시 작성하기로 했습니다. CivIdle에서는 Industry Idle의 핵심 아이디어에 역사적 테마를 도입했습니다. 이 게임에는 테크 트리, 세계 불가사의, 위인 등 몇 가지 새로운 메커니즘이 추가되어 게임의 시뮬레이션이 더욱 복잡해졌습니다.</p>
<p>모든 것을 다시 작성하고 있기 때문에 타입스크립트 이외의 언어도 살펴보았습니다. 고성능 코드를 작성해야 할 때 저는 보통 타입스크립트/자바스크립트는 가장 먼저 선택하지는 않습니다. 하지만 Industry Idle 코드베이스를 살펴본 결과, 게임 코드의 90%가 UI이며 웹 플랫폼이 이 부분에 매우 적합하다는 결론에 도달했습니다. 웹 프레임워크가 어렵다고 생각하신다면 게임 UI 라이브러리/미들웨어를 사용해보시기 바랍니다. CivIdle 코드의 대부분은 UI 코드가 될 가능성이 높기 때문에 UI는 웹 플랫폼에 머물고 싶었지만, 추가로 몇 가지 선택지가 있어 살펴봤습니다.</p>
<ol>
<li>Industry Idle 처럼 웹 플랫폼 사용: UI에는 HTML을 사용하고 게임 렌더링에는 WebGL을 사용하며, 두 가지 모두 타입스크립트로 작성.</li>
<li>위와 동일하지만 게임 로직과 렌더링에 웹 어셈블리를 사용하고 UI는 HTML/타입스크립트로 유지.</li>
<li>게임 로직과 렌더링을 C++로 작성하고, 3D 컨텍스트 위에 HTML 렌더링을 지원하는 미들웨어(1, 2)를 사용.</li>
</ol>
<p>저는 3번 선택지를 적용하기 위해 테스트해봤지만 필요한 브릿징 코드의 양이 너무 많아서 금방 포기했습니다. 모든 미들웨어는 브라우저에 비해 수준 이하의 개발자 도구를 제공하기 때문에 개발, 특히 디버깅이 상당히 고통스러웠습니다. 또한 게임 상태와 같은 대용량 데이터를 C++와 자바스크립트 간에 안전하고 효율적으로 공유하는 것도 쉬운 일이 아닙니다. 2번 선택지는 UI 작업 시 개선된 툴을 제외하면 비슷한 문제를 겪습니다. 결국 저는 1번을 선택하게 됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모든-교훈을-되새기며">모든 교훈을 되새기며<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%AA%A8%EB%93%A0-%EA%B5%90%ED%9B%88%EC%9D%84-%EB%90%98%EC%83%88%EA%B8%B0%EB%A9%B0" class="hash-link" aria-label="모든 교훈을 되새기며에 대한 직접 링크" title="모든 교훈을 되새기며에 대한 직접 링크">​</a></h2>
<p>Industry Idle 렌더링 성능 문제는 대부분 게임 엔진(Cocos Creator)에서 발생합니다. 이 엔진은 비주얼 에디터와 자체 씬 그래프/프리팹(prefab) 시스템을 갖춘 Unity와 유사한 올인원 게임 엔진으로 설계되었습니다. 저는 이 엔진의 렌더링만 사용하지만, 설계된 사용 사례가 아니기 때문에 성능을 위해 렌더러를 커스터마이징하기가 쉽지 않습니다.</p>
<p>CivIdle의 경우 가장 빠른 WebGL 렌더러 중 하나인 <a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">Pixi.JS</a>를 선택했습니다. 한 가지 일만 잘 해내는데, 제가 필요한 기능을 정확히 수행합니다. 나만의 WebGL 렌더러를 만들까도 잠시 고민했지만 Pixi.JS보다 더 잘할 수 없을 것 같다는 결론을 내렸습니다.</p>
<p>가능한 한 객체들은 풀링되었고, 텍스처는 최적화되어 아틀라스(atlases)에 패킹되었으며, 드로 콜(draw calls)을 꼼꼼히 확인하고, Industry Idle에서 문제가 되는 작은 점들을 특화된 <code>ParticleContainer</code>를 사용하여 구현하는 등 Industry Idle에서 배운 모든 교훈을 바탕으로 더 높은 기준을 가지고 시작했습니다. 유일한 문제는 <a href="https://github.com/Chlumsky/msdfgen" target="_blank" rel="noopener noreferrer">MSDF</a> 글꼴 렌더링이 지속적으로 일괄 처리를 중단한다는 점(자체 셰이더가 필요하기 때문에)으로, 품질이 약간 떨어지긴 했지만 기존 비트맵 글꼴로 대체했습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="성능의-벽에-부딪히기">성능의 벽에 부딪히기<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%84%B1%EB%8A%A5%EC%9D%98-%EB%B2%BD%EC%97%90-%EB%B6%80%EB%94%AA%ED%9E%88%EA%B8%B0" class="hash-link" aria-label="성능의 벽에 부딪히기에 대한 직접 링크" title="성능의 벽에 부딪히기에 대한 직접 링크">​</a></h2>
<p>Industry Idle의 가장 큰 구조적 결함은 게임 로직과 렌더링이 긴밀하게 결합되어 있어 렌더링 없이는 게임 로직을 실행할 수 없다는 것입니다 Industry Idle에서 오프라인 수익(게임을 플레이하지 않아도 얻을 수 있는 수익)은 근사치 계산을 통해 이루어집니다. 저 같은 하드코어 시뮬레이션 게임 팬에게는 속임수처럼 느껴지지만, 시뮬레이션 게임에서는 모든 것을 충실하게 시뮬레이션하는 것이 중요하다고 생각합니다. 따라서 오프라인 수입은 오프라인 시간을 가져와 해당 기간 동안 실제 시뮬레이션을 실행하는 것이 이상적입니다.</p>
<p>CivIdle에서는 시뮬레이션과 렌더링이 완전히 분리되어 "모든 것을 시뮬레이션"하는 디자인을 구현했습니다. 오프라인 수익 창출 기능을 구현하고 처음으로 큰 맵에서 실행해 본 결과, 1시간 시뮬레이션을 실행하는 데 약 43초가 걸렸으며, 이는 게임 초당 약 12ms의 벽시계 시간(wall clock time)입니다. 즉, 플레이어가 하루 동안 오프라인 상태였다면 시뮬레이션이 이를 따라잡는 데 약 17분이 걸린다는 뜻입니다! 오프라인 제작 기능을 플레이 테스터에게 처음 공개했을 때 게임이 로딩할 때 '멈춘다'는 버그 보고를 여러 번 받았지만, 실제로는 멈춘 것이 아니라 따라잡는 속도가 고통스러울 정도로 느릴 뿐이었습니다.</p>
<p>다시 말해, 12ms는 부드러운 60FPS를 구현하기 위한 프레임 시간 예산인 16.67ms 이내입니다 하지만 이는 합리적인 오프라인 프로덕션 성능을 달성하기에는 충분하지 않습니다. 게임 로직은 단일 스레드에서 실행되므로 병렬화가 쉽지 않고, 자바스크립트에 멀티스레드를 추가하려면 설정이 쉽지 않은 웹 워커가 필요합니다. 또한 웹 워커는 메인 스레드의 잠금을 해제하는 데 도움이 될 수 있지만 전체 시간을 단축하지는 못할 것입니다. 따라서 가능한 한 싱글 스레드 성능을 최대한 끌어내야 합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="항상-할당입니다">항상 할당입니다!<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%ED%95%AD%EC%83%81-%ED%95%A0%EB%8B%B9%EC%9E%85%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="항상 할당입니다!에 대한 직접 링크" title="항상 할당입니다!에 대한 직접 링크">​</a></h2>
<p>최적화를 시작하기 전에 CPU 시간이 어디에 사용되는지 파악해야 합니다. 다행히도 브라우저에는 매우 훌륭한 프로파일링 도구가 있습니다. Chrome에서 프로파일 세션을 실행하면 다음과 같은 결과가 나타납니다.</p>
<p><img decoding="async" loading="lazy" alt="Profile session in chrome" src="https://mooyeon-choi.github.io/assets/images/profile_session_in_chrome-c198a5c96cfed4eec4c0cd87903c79bd.png" width="1183" height="490" class="img_ev3q"></p>
<p>프로파일러는 성능 저하의 주요 원인이 될 수 있는 함수를 보여 주는데, 이는 매우 희망적인 상황입니다. 이는 일반적으로 쉽게 개선할 수 있는 문제를 의미합니다. 문제의 함수는 바로 이것입니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> oc1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hex1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCube</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> oc1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> oc2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hex2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCube</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> oc2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hex1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> distance</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 코드는 육각형 격자에서 두 타일 사이의 거리를 계산하는 것입니다. 이 코드는 뻔뻔하게도 Red Blob Games의 뛰어난 <a href="https://www.redblobgames.com/grids/hexagons/codegen/output/lib.ts" target="_blank" rel="noopener noreferrer">레퍼런스육각 그리드 구현</a>에서 복사한 것입니다. 실제 계산은 프로파일러에 나타나지 않고 모든 작은 오브젝트를 할당하는 것입니다!</p>
<p>값 타입이 존재하는 언어에서는 일반적으로 큰 문제가 되지 않습니다. 이러한 값들은 스택에 할당할 수 있으며 일반적으로 매우 빠릅니다. 자바스크립트 VM(V8)에서는 거의 모든 것이 힙에 할당되며(나중에 설명할 "작은 정수" 제외), 이러한 객체를 구성하는 작업(프로토타입 체인 설정)은 의외로 무겁습니다. 해결책은 이러한 객체를 매번 할당하는 대신 정적으로 캐시된 사본을 사용하는 것입니다. 또한 할당하지 않는 버전의 API를 추가해야 하는데, 이는 전달받은 객체(캐시된 정적 객체)에 결과를 설정하거나 객체 중 하나(다시 캐시된 정적 객체)를 변경하는 것입니다. 새 코드는 다음과 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _oc1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _oc2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _hex1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> _hex2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Hex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">distance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">x2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">y2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">col</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">row</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> y1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCubeNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">col</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">row</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> y2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">roffsetToCubeNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">OffsetCoord</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ODD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_oc2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">distanceNonAlloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Grid</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_hex2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> distance</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>새 코드는 훨씬 더 나빠 보이고 스레드에서 안전하지 않지만 어쨌든 우리는 단일 스레드입니다. 동일한 프로필을 실행하면 전체 시간이 21초에서 9초로 단축됩니다! 이것은 정말 쉬운 개선입니다!</p>
<p><img decoding="async" loading="lazy" alt="New code profile session in chrome" src="https://mooyeon-choi.github.io/assets/images/new_code_profile_session_in_chrome-b98798ebe5879a5a0e2b60a98f4fb906.png" width="1183" height="562" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="메모이제이션과-캐싱">메모이제이션과 캐싱<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%BA%90%EC%8B%B1" class="hash-link" aria-label="메모이제이션과 캐싱에 대한 직접 링크" title="메모이제이션과 캐싱에 대한 직접 링크">​</a></h2>
<p>프로필 결과를 다시 살펴보니 몇 가지 함수가 눈에 띄었습니다. 이 함수는 CPU 시간을 상당히 많이 차지하지만 외부 상태에 의존하지 않고 부작용이 없는 "순수한" 계산만 포함하고 있습니다. 예제는 다음과 같습니다(함수 시그니처를 단순화했습니다. 실제 코드 베이스에서는 string은 타입을 가지고 있지만 여기서는 상관없습니다).</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getBuildingCost</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">type</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">level</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Record</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> number</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이는 메모이제이션의 좋은 대상입니다. 메모이제이션은 매번 계산하는 대신 계산 결과를 캐시에 저장해 둔다는 것을 멋지게 표현한 것입니다. 일반적인 <code>memoize</code> 함수는 다음과 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">memoize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">func</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> results </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter spread operator" style="color:#393A34">...</span><span class="token parameter">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> argsKey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> results</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">argsKey</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>인자에 대한 "해시"를 만들기 위해 <code>JSON.stringify(args)</code>를 사용하는 것은 끔직하게 비효율적 입니다. <code>getBuildingCost</code>의 경우에는 아마도 인자를 그냥 이어 붙힐 수 있습니다.</p>
<p>여러 함수가 계산을 위해 외부 상태에 의존하지만, 프레임 내에서 상태가 변경되지 않습니다. 결과를 캐시하고 새 프레임이 시작될 때 캐시를 지울 수 있습니다.</p>
<p>메모 기능을 추가하면 전체 시간을 2초 정도 단축할 수 있는데, 나쁘지 않습니다!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문자열-제거하기">문자열 제거하기!<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0" class="hash-link" aria-label="문자열 제거하기!에 대한 직접 링크" title="문자열 제거하기!에 대한 직접 링크">​</a></h2>
<p>안타깝게도 우리가 기대했던 열매는 모두 수확했습니다. 이 시점에서 코드의 핫스팟은 대부분 문자열과 관련이 있습니다.</p>
<ol>
<li>이전 메모이제이션 예제에서 이미 문자열 키를 사용했습니다.</li>
<li>게임에서는 타일을 나타내기 위해 <code>{x, y}</code>를 사용하고 있고 키가 필요할 때마다 <code>"x,y"</code> 문자열을 사용하고 있습니다. 몇몇 핫스팟은 두 형식간의 변화와 관련이 있습니다.</li>
</ol>
<p>문자열을 사용하면 코드를 쉽게 읽을 수 있습니다. 하지만 안타깝게도 코드 실행 속도가 느려지기도 합니다. 하지만 문자열을 제거하는 것이 항상 쉬운일은 아닙니다. 타일을 표현하는 경우 x와 y를 정수로 패킹할 수 있습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> tile </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>앞서 자바스크립트(V8)에서 작은 정수, 즉 기본적으로 포인터에 들어갈 수 있는 정수를 제외한 거의 모든 것이 힙에 할당된다고 언급했습니다. 하지만 32비트 플랫폼에서는 V8이 1비트를 사용해 포인터와 실제 숫자를 구분하기 때문에 정수가 31비트에 맞아야 한다는 문제가 있습니다. 그리고 64비트 플랫폼에서는 <a href="https://v8.dev/blog/pointer-compression" target="_blank" rel="noopener noreferrer">포인터 압축</a>으로 인해 정수가 여전히 32비트에 맞아야 합니다. 제가 계획한 가장 큰 맵은 200x200 정도인데 15비트는 여전히 필요한 것보다 많기에 저희에게는 문제가 되지 않습니다. 한 가지 주의할 점은 자바스크립트에는 '정수'라는 개념이 없고 모든 숫자가 배정밀도 부동 소수점이라는 점입니다. 따라서 이것은 본질적으로 벤더별 최적화입니다. 하지만 V8이 매우 일반적으로 사용되고 있고 게임이 일렉트론으로 출시되었기 때문에 이 최적화는 꽤 합리적입니다.</p>
<p>캐시/메모화를 위해 31비트 정수 키를 생성하는 경우에는 좀 더 까다롭습니다. 게임 데이터의 대부분은 문자열로 되어 있으며, 이 방식이 더 바람직합니다. 데이터를 자주 조정하기 때문에 문자열이 훨씬 읽기 쉽기 때문입니다. 대신 게임이 시작되면 모든 데이터를 검토하여 각 항목에 대해 자동 증가 숫자 키를 생성합니다. 또한 부울 플래그 객체 대신 타입스크립트의 열거형 플래그를 사용합니다. 예시는 아래와 같습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Before</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calculate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">building</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">options</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">flag1</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean</span><span class="token parameter punctuation" style="color:#393A34">;</span><span class="token parameter"> flag2</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean</span><span class="token parameter punctuation" style="color:#393A34">;</span><span class="token parameter"> flag3</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> boolean </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// After</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token maybe-class-name">Options</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token maybe-class-name">None</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">Flag3</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">TotalBits</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calculate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">building</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> string</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">options</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter maybe-class-name">Options</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">BuildingHash</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">building</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token maybe-class-name">Options</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">TotalBits</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> options</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="숫자-키를-사용하는mapset-채택">(숫자 키를 사용하는)Map/Set 채택<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%88%AB%EC%9E%90-%ED%82%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94mapset-%EC%B1%84%ED%83%9D" class="hash-link" aria-label="(숫자 키를 사용하는)Map/Set 채택에 대한 직접 링크" title="(숫자 키를 사용하는)Map/Set 채택에 대한 직접 링크">​</a></h2>
<p>저는 고성능 자바스크립트를 전문적으로 작성하지 않고(고성능 코드를 작성하긴 하지만 다른 언어로 작성합니다), 자바스크립트 세계의 최신 기술을 잘 따르지 않기 때문에 <strong>자바스크립트 성능 전문가가 아니라는 사실</strong>을 인정합니다. 자바스크립트에서 Map/Set의 존재를 어렴풋이 알고는 있지만 항상 평범한 오래된 객체를 사용해 왔습니다. 그래서 게임에서 흔히 사용되는 패턴의 일부를 간단히 마이크로 벤치마크해 보았습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access obj (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access obj (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">,</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access map (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">,</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">i</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>결과의 순위는 그다지 놀랍지 않지만 차이점은 있었습니다! 숫자(작은 정수) 키가 더 빠르다는 것은 알고 있었지만 이렇게까지 빠를 줄은 몰랐습니다. 또한 숫자 키와 맵의 조합이 승리한 것으로 보아, 문자열을 작은 정수로 대체하는 수고로움에 대한 보상을 받은 셈입니다!</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌───────────────────────────┬───────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│         Task Name         │  ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├───────────────────────────┼───────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access obj (number key)' │ '60,121'  │ 16632.928519960293 │ '±0.59%' │  6013   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access map (number key)' │ '245,327' │ 4076.1832382745756 │ '±0.65%' │  24533  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access obj (string key)' │ '10,316'  │ 96930.13813144476  │ '±4.19%' │  1032   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access map (string key)' │ '17,543'  │ 57001.994138429654 │ '±1.53%' │  1755   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└───────────────────────────┴───────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>map vs object를 순회하는 밴치마크도 진행했습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate obj (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> key </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> numMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"forEach map (number key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    numMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">forEach</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate obj (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> key </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> strObj</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"iterate map (string key)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> strMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>아래 표가 결과 입니다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌────────────────────────────┬───────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│         Task Name          │  ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├────────────────────────────┼───────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate obj (number key)' │  '5,769'  │ 173319.23769086445 │ '±1.42%' │   577   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate map (number key)' │ '178,355' │ 5606.781289537164  │ '±1.94%' │  17858  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'forEach map (number key)' │ '185,631' │ 5387.017655490776  │ '±0.55%' │  18564  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate obj (string key)' │ '25,965'  │ 38512.431584109334 │ '±1.42%' │  2598   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'iterate map (string key)' │ '179,725' │ 5564.040455324439  │ '±2.05%' │  17973  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└────────────────────────────┴───────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>숫자 키를 사용하는 Map이 다시 한번 더 승리했습니다 (숫자 키로 객체를 반복하는 것이 그렇게 느리다는 사실은 약간 의아합니다)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="주의사항">주의사항<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD" class="hash-link" aria-label="주의사항에 대한 직접 링크" title="주의사항에 대한 직접 링크">​</a></h2>
<p>문자열을 없애고 객체를 Map/Set으로 대체하면 전체 시간이 약 3초 정도 감소합니다. 이 시점에서 전체 시간이 21초에서 4초로 단축되었습니다. 하지만 이 두 가지 최적화에는 많은 작업이 필요했고, 며칠이 걸렸으며 몇 가지 지저분한 버그도 해결해야 했습니다. 또한 C/C++와 같은 언어에 비해 자바스크립트에서 마이크로 최적화를 수행하는 것이 훨씬 더 어렵다는걸 알게되었습니다.</p>
<ol>
<li>마이크로 벤치마킹은 신뢰할 수 없을 수 있습니다. JIT는 워밍업이 필요합니다. 가비지 수집기를 끌 수 없습니다.</li>
<li>최적화는 V8의 특정 구현에 대해 수행되며, 이는 변경될 수 있습니다. 그리고 V8의 내부를 파악하는 것은 사소한 일이 아니며 소스 코드를 읽는 것도 쉽지 않습니다. 그리고 여러 단계에 걸친 JIT 최적화는 작업을 더욱 어렵게 만듭니다.</li>
<li>대부분의 유용한 마이크로 최적화는 대개 데이터 로컬리티와 관련된 것(예: 캐시 라인에 더 많은 데이터를 넣을 수 있도록 데이터를 작게 만들거나 함께 액세스하는 데이터가 함께 위치하도록 하는 것)인데, 안타깝게도 자바스크립트에서는 이를 달성하기가 어렵습니다.</li>
</ol>
<p>'성공 사례'와는 별개로, 저는 눈에 띄지도 않는 않는 미세 최적화를 여러 번 시도해 보았습니다.</p>
<p>숫자 배열에서 유형 배열(<code>Uint32Array</code>)로 변경해도 도움이 되지 않습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Bench</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access array"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> numArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"access uint32array"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> uint32Array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌──────────────────────┬──────────────┬───────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│      Task Name       │   ops/sec    │ Average Time (ns) │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──────────────────────┼──────────────┼───────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│    'access array'    │ '1,824f,996' │ 547.9462917536906 │ '±0.35%' │ 182500  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'access uint32array' │ '1,828,721'  │ 546.8302087845923 │ '±0.17%' │ 182873  │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──────────────────────┴──────────────┴───────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>브랜치를 브랜치없는 코드로 대체하는 것은 그다지 도움이 되지 않습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// With branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">y </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Without branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">┌──────────────┬──────────┬────────────────────┬──────────┬─────────┐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│  Task Name   │ ops/sec  │ Average Time (ns)  │  Margin  │ Samples │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──────────────┼──────────┼────────────────────┼──────────┼─────────┤</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ 'branchless' │ '53,060' │ 18846.260416366207 │ '±1.45%' │  5307   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   'branch'   │ '40,458' │ 24716.880848309927 │ '±1.20%' │  4046   │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──────────────┴──────────┴────────────────────┴──────────┴─────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="성급한-최적화는-만악의-근원인가">성급한 최적화는 만악의 근원인가?<a href="https://mooyeon-choi.github.io/blog/squeezing-last-bit-of-javascript-performance-for-my-automation-game#%EC%84%B1%EA%B8%89%ED%95%9C-%EC%B5%9C%EC%A0%81%ED%99%94%EB%8A%94-%EB%A7%8C%EC%95%85%EC%9D%98-%EA%B7%BC%EC%9B%90%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="성급한 최적화는 만악의 근원인가?에 대한 직접 링크" title="성급한 최적화는 만악의 근원인가?에 대한 직접 링크">​</a></h2>
<p>Donald Knuth의 말은 종종 문맥에서 벗어난 채 인용되기도 합니다. 사람들은 이를 정당화하기 위해 이 인용문을 사용합니다</p>
<ol>
<li>컴퓨터는 충분히 빠르므로 성능은 중요하지 않습니다.</li>
<li>깔끔한 코드를 먼저 작성하고 성능은 나중에 언제든지 최적화할 수 있습니다.</li>
</ol>
<blockquote>
<p>“프로그래머는 프로그램에서 중요하지 않은 부분의 속도에 대해 생각하거나 걱정하는 데 엄청난 시간을 낭비하며, 효율성을 위한 이러한 시도는 디버깅과 유지보수를 고려할 때 실제로 매우 부정적인 영향을 미칩니다. 97% 정도의 작은 효율성은 잊어야 합니다. 조급한 최적화는 만악의 근원입니다. 하지만 그 중요한 3%의 기회를 놓쳐서는 안 됩니다.”</p>
</blockquote>
<p>모든 최적화 중에서 앞의 두 가지(하나의 핫 함수에서 초과 할당 제거 및 메모화)가 '나중에 최적화'의 좋은 예라고 생각합니다. 하지만 후자의 두 가지는 미리 수행하면 훨씬 더 쉬울 것입니다. 또한 후자의 두 가지는 프로파일러에 실제로 나타나지 않는 <a href="https://wiki.c2.com/?UniformlySlowCode" target="_blank" rel="noopener noreferrer">균일하게 느린 코드</a>입니다. 타일이 표현되는 방식과 같은 것은 매우 기본적이고 모든 곳에서 사용됩니다. 이러한 작은 비효율성은 코드 기반 전체에 퍼져 있어 나중에 최적화하기가 더욱 어려워집니다.</p>
<p>최적화를 적용할 시기를 결정할 때는 컨텍스트가 매우 중요합니다. 게임 프로그래밍에서는 초기 코드를 작성할 때에도 핫 코드 경로를 쉽게 식별할 수 있으며, 몇 가지 기본 성능 관행을 채택하면 대개 성과를 거둘 수 있습니다. 이는 언어와 에코시스템의 문제이기도 한데, 일반적으로 자바스크립트보다 C++에는 성능을 고려한(그리고 할당을 고려한) 라이브러리가 더 많습니다. C++의 라이브러리는 수정 없이 사용할 수 있는 경우가 많지만 자바스크립트에서는 대부분의 라이브러리가 성능에 중요한 소프트웨어용으로 작성되지 않았습니다. 아이러니하게도 사실상 패키지 관리자가 없기 때문에 C++ 라이브러리를 공급하는 것이 더 일반적입니다.</p>
<p>여기까지 읽어주셔서 감사합니다. 저는 자바스크립트 성능에 대한 전문가가 아니라는 점을 다시 한 번 말씀드리고 싶습니다. 따라서 제가 놓친 오류나 명백한 오류를 발견하신 경우 알려주시기 바랍니다. CivIdle이 관심 있는 게임인 것 같다면 <a href="https://store.steampowered.com/app/2181940/CivIdle/" target="_blank" rel="noopener noreferrer">Steam</a>으로 이동하여 확인해 보세요.</p>
<p><a href="https://news.ycombinator.com/item?id=39210048" target="_blank" rel="noopener noreferrer">HN</a> 와 <a href="https://www.reddit.com/r/programming/comments/1afu6jh/squeezing_last_bit_of_javascript_performance_for/" target="_blank" rel="noopener noreferrer">Reddit</a>에서 토론</p>]]></content:encoded>
            <category>WebGl</category>
            <category>frontend</category>
            <category>Game</category>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[Evan You가 말하는 2024년 Vue.js의 인사이트 및 트렌드]]></title>
            <link>https://mooyeon-choi.github.io/blog/Vue.js trend</link>
            <guid>https://mooyeon-choi.github.io/blog/Vue.js trend</guid>
            <pubDate>Sat, 24 Feb 2024 20:25:00 GMT</pubDate>
            <description><![CDATA[Korean FE Article Team 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><a href="https://kofearticle.substack.com/about?utm_source=substack&amp;utm_medium=email" target="_blank" rel="noopener noreferrer">Korean FE Article Team</a> 에서 번역해주는 FrontEnd 소식을 아카이브 하였습니다.</p>
</blockquote>
<ul>
<li>원문: <a href="https://medium.com/front-end-weekly/insights-and-trends-in-vue-js-from-evan-you-2024-695ed1feef5d" target="_blank" rel="noopener noreferrer">https://medium.com/front-end-weekly/insights-and-trends-in-vue-js-from-evan-you-2024-695ed1feef5d</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="소개">소개<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EC%86%8C%EA%B0%9C" class="hash-link" aria-label="소개에 대한 직접 링크" title="소개에 대한 직접 링크">​</a></h2>
<p>이 글에서는 Vite 5가 뷰에 미치는 영향, 매크로, vapor mode, 널리 알려진 오해들, <strong>새로운 특징 또는 기능</strong>, 향후 버전의 option API 지원 여부, VitePress 등에 대한 일반적인 인사이트를 살펴보겠습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>목차</div><div class="admonitionContent_BuS1"><ol>
<li>Evan You와 함께하는 Q&amp;A 세션</li>
<li>결론</li>
<li>도움 될만한 링크</li>
</ol></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="evan-you와-함께하는-qa-세션">Evan You와 함께하는 Q&amp;A 세션<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#evan-you%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-qa-%EC%84%B8%EC%85%98" class="hash-link" aria-label="Evan You와 함께하는 Q&amp;A 세션에 대한 직접 링크" title="Evan You와 함께하는 Q&amp;A 세션에 대한 직접 링크">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-vite-5는-어떻게-뷰-성능을-향상시켰을까요">1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#1-vite-5%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B7%B0-%EC%84%B1%EB%8A%A5%EC%9D%84-%ED%96%A5%EC%83%81%EC%8B%9C%EC%BC%B0%EC%9D%84%EA%B9%8C%EC%9A%94" class="hash-link" aria-label="1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?에 대한 직접 링크" title="1. Vite 5는 어떻게 뷰 성능을 향상시켰을까요?에 대한 직접 링크">​</a></h3>
<p>Vite 내에서 성능 향상을 위해 수행되는 대부분의 작업은 Vite 자체에 한정되어 있습니다. 하지만 Vite를 사용하는 누구든 같은 혜택을 누릴 수 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>추가로,</div><div class="admonitionContent_BuS1"><p>중요한 세부 사항도 언급되었습니다. 뷰 3.4의 모든 이점을 활용하려면 "vitejs/plugin-vue"를 최신 버전으로 업데이트하는 것이 좋습니다. 이 업데이트는 프로젝트의 빌드 성능을 향상시킬 수 있습니다.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-뷰-코어-기능에-추가적인-vuejs-매크로가-추가될-예정인가요">2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#2-%EB%B7%B0-%EC%BD%94%EC%96%B4-%EA%B8%B0%EB%8A%A5%EC%97%90-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-vuejs-%EB%A7%A4%ED%81%AC%EB%A1%9C%EA%B0%80-%EC%B6%94%EA%B0%80%EB%90%A0-%EC%98%88%EC%A0%95%EC%9D%B8%EA%B0%80%EC%9A%94" class="hash-link" aria-label="2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?에 대한 직접 링크" title="2. 뷰 코어 기능에 추가적인 Vue.js 매크로가 추가될 예정인가요?에 대한 직접 링크">​</a></h3>
<p>Vue.js 팀은 뷰 코어에 새로운 매크로를 통합하는 것을 매우 신중하게 고려합니다. 현재로서는 뷰에 새로운 매크로를 도입할 계획이 없습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_BuS1"><p>매크로는 뷰에 공식적으로는 통합되지 않는 개념적인 제안이나 아이디어입니다. 이러한 제안들은 뷰의 추가적인 기능이나 문법적 설탕(syntactic sugar)을 탐구하고 확장하는 것을 목표로 합니다.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-뷰-vapor-mode의-최신-소식은-무엇인가요">3. 뷰 vapor mode의 최신 소식은 무엇인가요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#3-%EB%B7%B0-vapor-mode%EC%9D%98-%EC%B5%9C%EC%8B%A0-%EC%86%8C%EC%8B%9D%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94" class="hash-link" aria-label="3. 뷰 vapor mode의 최신 소식은 무엇인가요?에 대한 직접 링크" title="3. 뷰 vapor mode의 최신 소식은 무엇인가요?에 대한 직접 링크">​</a></h3>
<p>초기 런타임 구현과 컴파일러의 상당 부분이 완료되었습니다. 그 결과, 아직 진행 중이기는 하지만 기능적인 플레이그라운드가 조성되었습니다.</p>
<p>이 모드에서는 복잡한 마이그레이션이나 사용을 위한 준비 조치가 필요하지 않습니다. 이 기술을 이용하면 최적화가 필요한 특정 컴포넌트에 vapor mode를 활성화할 수 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>vapor mode</div><div class="admonitionContent_BuS1"><p>성능 향상을 위한 비가상 DOM 모드 개발에 사용되는 vapor mode</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-사람들이-vuejs에-대해-갖고-있는-가장-큰-오해는-무엇이라고-생각하나요">4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#4-%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%B4-vuejs%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B0%96%EA%B3%A0-%EC%9E%88%EB%8A%94-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%98%A4%ED%95%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EB%82%98%EC%9A%94" class="hash-link" aria-label="4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?에 대한 직접 링크" title="4. 사람들이 Vue.js에 대해 갖고 있는 가장 큰 오해는 무엇이라고 생각하나요?에 대한 직접 링크">​</a></h3>
<p>잘 알려진 오해에는 JSX 및 타입스크립트에 대한 지원 부족, 그리고 뷰는 간단한 앱에만 적합하다는 것 등이 있습니다. 하지만 더 많은 유명 브랜드에서 거대한 웹 애플리케이션 제작을 위해 뷰를 사용하고 있습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-향후-vuejs-버전에서-기대할-만한-흥미로운-신규-기능은-무엇이-있을까요">5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#5-%ED%96%A5%ED%9B%84-vuejs-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C-%EA%B8%B0%EB%8C%80%ED%95%A0-%EB%A7%8C%ED%95%9C-%ED%9D%A5%EB%AF%B8%EB%A1%9C%EC%9A%B4-%EC%8B%A0%EA%B7%9C-%EA%B8%B0%EB%8A%A5%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94" class="hash-link" aria-label="5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?에 대한 직접 링크" title="5. 향후 Vue.js 버전에서 기대할 만한 흥미로운 신규 기능은 무엇이 있을까요?에 대한 직접 링크">​</a></h3>
<p>vapor mode는 현재 뷰 생태계 내에서 개발되고 있는 가장 중요한 혁신입니다.</p>
<p>이에 더해, 아래 항목들을 포함하여 뷰 코어에 많은 개선이 있었습니다.</p>
<ul>
<li>
<p>반응성 시스템 리팩토링</p>
</li>
<li>
<p>빨라진 파서와 향상된 싱글 파일 컴포넌트(Single File Component, SFC) 빌드 성능</p>
</li>
<li>
<p>defineModel의 안정화</p>
</li>
<li>
<p>v-bind:를 위한 같은 이름의 축약어</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">img</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:id</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:src</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">:alt</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>하이드레이션 불일치 오류 개선</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-향후-뷰-버전에서-option-api를-제거할-것을-계획하고-있나요">6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#6-%ED%96%A5%ED%9B%84-%EB%B7%B0-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C-option-api%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A0-%EA%B2%83%EC%9D%84-%EA%B3%84%ED%9A%8D%ED%95%98%EA%B3%A0-%EC%9E%88%EB%82%98%EC%9A%94" class="hash-link" aria-label="6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?에 대한 직접 링크" title="6. 향후 뷰 버전에서 Option API를 제거할 것을 계획하고 있나요?에 대한 직접 링크">​</a></h3>
<p>향후 버전에서 option API를 제거할 계획은 없습니다. Composition API와 Option API 두 접근 방식을 모두 유지하는 작업은 어렵지 않습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-뷰-3는-웹팩을-계속-지원할-예정인가요-아니면-완전히-vite로-옮겨가나요">7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#7-%EB%B7%B0-3%EB%8A%94-%EC%9B%B9%ED%8C%A9%EC%9D%84-%EA%B3%84%EC%86%8D-%EC%A7%80%EC%9B%90%ED%95%A0-%EC%98%88%EC%A0%95%EC%9D%B8%EA%B0%80%EC%9A%94-%EC%95%84%EB%8B%88%EB%A9%B4-%EC%99%84%EC%A0%84%ED%9E%88-vite%EB%A1%9C-%EC%98%AE%EA%B2%A8%EA%B0%80%EB%82%98%EC%9A%94" class="hash-link" aria-label="7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?에 대한 직접 링크" title="7. 뷰 3는 웹팩을 계속 지원할 예정인가요? 아니면 완전히 Vite로 옮겨가나요?에 대한 직접 링크">​</a></h3>
<p>뷰에서 웹팩을 금지하는 것은 가까운 시일내에는 계획하고 있지 않습니다. 웹팩과 Vite 양측에 대한 지원이 모두 제공될 예정입니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-기타">8. 기타<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#8-%EA%B8%B0%ED%83%80" class="hash-link" aria-label="8. 기타에 대한 직접 링크" title="8. 기타에 대한 직접 링크">​</a></h3>
<p>안정된 버전의 **서스펜스 컴포넌트(suspense component)**의 출시가 계획되어 있습니다.</p>
<p><strong>defineModel</strong>이 객체와 배열에 대해 깊게 반응성을 유지할 수 없는 이유는 다음과 같습니다. prop을 직접적으로 수정하는 것은 이후 추적에 영향을 미치기 때문에 권장되지 않습니다. 이 경우, 깊은 반응성이 불필요해지며 매번 새로운 객체를 반환할 뿐입니다.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">script</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">setup</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript">  </span><span class="token script language-javascript keyword" style="color:#00009f">const</span><span class="token script language-javascript"> modelValue </span><span class="token script language-javascript operator" style="color:#393A34">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript function" style="color:#d73a49">defineModel</span><span class="token script language-javascript punctuation" style="color:#393A34">(</span><span class="token script language-javascript punctuation" style="color:#393A34">)</span><span class="token script language-javascript punctuation" style="color:#393A34">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript">  </span><span class="token script language-javascript console class-name">console</span><span class="token script language-javascript punctuation" style="color:#393A34">.</span><span class="token script language-javascript method function property-access" style="color:#d73a49">log</span><span class="token script language-javascript punctuation" style="color:#393A34">(</span><span class="token script language-javascript">modelValue</span><span class="token script language-javascript punctuation" style="color:#393A34">.</span><span class="token script language-javascript property-access">value</span><span class="token script language-javascript punctuation" style="color:#393A34">)</span><span class="token script language-javascript punctuation" style="color:#393A34">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#393A34"><span class="token script language-javascript"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">script</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">template</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">v-model</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">modelValue</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">template</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>VitePress 출시에 많은 기대 부탁드립니다.</strong></p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>VitePress란?</div><div class="admonitionContent_BuS1"><p><strong>*VitePress</strong>는 콘텐츠 중심의 신속한 웹사이트 구축을 위해 제작된 정적 사이트 생성기(SSG)입니다. 문서, 블로그, 포트폴리오, 마케팅 사이트를 생성하는 데 적합합니다.</p><p>Nuxt.js보다 훨씬 경량의 대안을 제공하여 웹 개발에 효율성을 높입니다.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EA%B2%B0%EB%A1%A0" class="hash-link" aria-label="결론에 대한 직접 링크" title="결론에 대한 직접 링크">​</a></h2>
<p>뷰 생태계와 프레임워크는 활발히 개발되고 있으며, 성능 향상과 반응성에 초점을 맞추고, 비가상 DOM 모드를 발전시키고 있습니다. 뷰는 Option API와 Composition API를 모두 지원하며 융통성을 유지하고 있으며, 웹팩 그리고 Vite와 같은 유명한 번들러에 대한 호환성을 보장합니다. defineModel과 v-bind 단축어와 같은 새로운 기능이 안정적으로 릴리즈되는 등 상당한 진전이 있었습니다. 이러한 모든 요소는 이후 뷰의 역동성과 유망한 미래를 증명합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="도움-될만한-링크">도움 될만한 링크<a href="https://mooyeon-choi.github.io/blog/Vue.js%20trend#%EB%8F%84%EC%9B%80-%EB%90%A0%EB%A7%8C%ED%95%9C-%EB%A7%81%ED%81%AC" class="hash-link" aria-label="도움 될만한 링크에 대한 직접 링크" title="도움 될만한 링크에 대한 직접 링크">​</a></h2>
<ol>
<li><a href="https://vuejsnation.com/" target="_blank" rel="noopener noreferrer">Vue.js Nation 콘퍼런스</a></li>
<li><a href="https://github.com/nuxt/awesome?tab=readme-ov-file#projects-using-nuxt" target="_blank" rel="noopener noreferrer">nuxt를 사용한 프로젝트들</a></li>
<li><a href="https://github.com/vuejs/core-vapor" target="_blank" rel="noopener noreferrer">Vapor mode</a></li>
<li><a href="https://vue-macros.dev/guide/getting-started.html" target="_blank" rel="noopener noreferrer">뷰 매크로</a></li>
<li><a href="https://vueschool.io/" target="_blank" rel="noopener noreferrer">Vue School</a></li>
<li><a href="https://javascript.plainenglish.io/how-to-use-graphql-in-vue3-with-the-apollo-client-79b1c1fda69d" target="_blank" rel="noopener noreferrer">Vue3에서 GraphQL과 Apollo 클라이언트</a></li>
<li><a href="https://blog.stackademic.com/how-hmac-works-step-by-step-explanation-with-examples-f4aff5efb40e" target="_blank" rel="noopener noreferrer">HMAC(보안)</a></li>
</ol>]]></content:encoded>
            <category>Vuejs</category>
            <category>frontend</category>
        </item>
    </channel>
</rss>